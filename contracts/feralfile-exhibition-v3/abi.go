// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package feralfilev3

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// FeralfileExhibitionV3Artwork is an auto generated low-level Go binding around an user-defined struct.
type FeralfileExhibitionV3Artwork struct {
	Title       string
	ArtistName  string
	Fingerprint string
	EditionSize *big.Int
	AEAmount    *big.Int
	PPAmount    *big.Int
}

// FeralfileExhibitionV3MintArtworkParam is an auto generated low-level Go binding around an user-defined struct.
type FeralfileExhibitionV3MintArtworkParam struct {
	ArtworkID *big.Int
	Edition   *big.Int
	Artist    common.Address
	Owner     common.Address
	IpfsCID   string
}

// FeralfileExhibitionV3TransferArtworkParam is an auto generated low-level Go binding around an user-defined struct.
type FeralfileExhibitionV3TransferArtworkParam struct {
	From      common.Address
	To        common.Address
	TokenID   *big.Int
	Timestamp *big.Int
	R         [32]byte
	S         [32]byte
	V         uint8
}

// FeralfileExhibitionV3MetaData contains all meta data concerning the FeralfileExhibitionV3 contract.
var FeralfileExhibitionV3MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"secondarySaleRoyaltyBPS_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltyPayoutAddress_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenBaseURI_\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isBurnable_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isBridgeable_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionID\",\"type\":\"uint256\"}],\"name\":\"BurnArtworkEdition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"}],\"name\":\"NewArtwork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionID\",\"type\":\"uint256\"}],\"name\":\"NewArtworkEdition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ROYALITY_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustee\",\"type\":\"address\"}],\"name\":\"addTrustee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworkEditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"editionID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsCID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fingerprint\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"AEAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PPAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"codeVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBridgeable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBurnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustee\",\"type\":\"address\"}],\"name\":\"removeTrustee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyPayoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondarySaleRoyaltyBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trustees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fingerprint\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"AEAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PPAmount\",\"type\":\"uint256\"}],\"internalType\":\"structFeralfileExhibitionV3.Artwork[]\",\"name\":\"artworks_\",\"type\":\"tuple[]\"}],\"name\":\"createArtworks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalArtworks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getArtworkByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsCID\",\"type\":\"string\"}],\"name\":\"updateArtworkEditionIPFSCid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"royaltyPayoutAddress_\",\"type\":\"address\"}],\"name\":\"setRoyaltyPayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"}],\"name\":\"totalEditionOfArtwork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getArtworkEditionByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setTokenBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"}],\"internalType\":\"structFeralfileExhibitionV3.TransferArtworkParam[]\",\"name\":\"transferParams_\",\"type\":\"tuple[]\"}],\"name\":\"authorizedTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"edition\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ipfsCID\",\"type\":\"string\"}],\"internalType\":\"structFeralfileExhibitionV3.MintArtworkParam[]\",\"name\":\"mintParams_\",\"type\":\"tuple[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"editionIDs_\",\"type\":\"uint256[]\"}],\"name\":\"burnEditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405260006010556127106012553480156200001c57600080fd5b5060405162003c5a38038062003c5a8339810160408190526200003f9162000360565b878760006200004f8382620004d8565b5060016200005e8282620004d8565b5050506200007b620000756200022860201b60201c565b6200022c565b6001600160a01b038616620000d75760405162461bcd60e51b815260206004820152601760248201527f696e76616c69642063757261746f72206164647265737300000000000000000060448201526064015b60405180910390fd5b60008511620001615760405162461bcd60e51b815260206004820152604960248201527f6d617845646974696f6e206f66206561636820617274776f726b20696e20616e60448201527f2065786869626974696f6e206e6565647320746f2062652067726561746572206064820152687468616e207a65726f60b81b608482015260a401620000ce565b60008411620001c35760405162461bcd60e51b815260206004820152602760248201527f626173655072696365206e6565647320746f2062652067726561746572207468604482015266616e207a65726f60c81b6064820152608401620000ce565b600c620001d18982620004d8565b50600d80546001600160a01b0319166001600160a01b038816179055600f849055600e859055601083905560146200020a8382620004d8565b506013620002198282620004d8565b505050505050505050620005a4565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002a657600080fd5b81516001600160401b0380821115620002c357620002c36200027e565b604051601f8301601f19908116603f01168101908282118183101715620002ee57620002ee6200027e565b816040528381526020925086838588010111156200030b57600080fd5b600091505b838210156200032f578582018301518183018401529082019062000310565b600093810190920192909252949350505050565b80516001600160a01b03811681146200035b57600080fd5b919050565b600080600080600080600080610100898b0312156200037e57600080fd5b88516001600160401b03808211156200039657600080fd5b620003a48c838d0162000294565b995060208b0151915080821115620003bb57600080fd5b620003c98c838d0162000294565b9850620003d960408c0162000343565b975060608b0151965060808b0151955060a08b0151945060c08b01519150808211156200040557600080fd5b620004138c838d0162000294565b935060e08b01519150808211156200042a57600080fd5b50620004398b828c0162000294565b9150509295985092959890939650565b600181811c908216806200045e57607f821691505b6020821081036200047f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004d357600081815260208120601f850160051c81016020861015620004ae5750805b601f850160051c820191505b81811015620004cf57828155600101620004ba565b5050505b505050565b81516001600160401b03811115620004f457620004f46200027e565b6200050c8162000505845462000449565b8462000485565b602080601f8311600181146200054457600084156200052b5750858301515b600019600386901b1c1916600185901b178555620004cf565b600085815260208120601f198616915b82811015620005755788860151825594840194600190910190840162000554565b5085821015620005945787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6136a680620005b46000396000f3fe608060405234801561001057600080fd5b50600436106101ee5760003560e01c806301ffc9a7146101f3578063031205061461021b57806306fdde0314610230578063081812fc14610245578063095ea7b3146102705780630cfcb5f1146102835780630dd62a0d1461029657806318160ddd146102a957806323b872dd146102bb578063240804d9146102ce5780632a55205a146102d75780632f745c591461030957806339ce3b021461031c57806342842e0e1461032f5780634895ad74146103425780634a79d50c146103555780634b6026731461035d5780634f6ccce7146103825780635bcdf74c1461039557806362fe2131146103a85780636352211e146103cd578063641b18e9146103e057806370a08231146103f3578063715018a61461040657806384ad61af1461040e5780638da5cb5b1461041757806395d89b411461041f578063a22cb46514610427578063ac14cf0b1461043a578063b48837031461044d578063b88d4fde14610460578063c7876ea414610473578063c87b56dd1461047c578063dc78ac1c1461048f578063e4a233e1146104a2578063e66f53b7146104aa578063e8a3d485146104bd578063e985e9c5146104c5578063ea211d7c146104d8578063eee608a4146104e1578063f2fde38b14610504578063fe2a3bf314610517575b600080fd5b610206610201366004612cf6565b610537565b60405190151581526020015b60405180910390f35b61022e610229366004612d36565b610562565b005b61023861058b565b6040516102129190612da1565b610258610253366004612db4565b61061d565b6040516001600160a01b039091168152602001610212565b61022e61027e366004612dcd565b610644565b61022e610291366004612ea2565b61075e565b61022e6102a4366004612ee8565b6109ea565b6008545b604051908152602001610212565b61022e6102c9366004612fad565b610e33565b6102ad60125481565b6102ea6102e5366004612fe9565b610e64565b604080516001600160a01b039093168352602083019190915201610212565b6102ad610317366004612dcd565b6112db565b601154610258906001600160a01b031681565b61022e61033d366004612fad565b611371565b61022e610350366004612d36565b61138c565b6102386113ed565b61037061036b366004612db4565b61147b565b6040516102129695949392919061300b565b6102ad610390366004612db4565b6116de565b61022e6103a336600461307b565b611771565b6103bb6103b6366004612db4565b6117c0565b604051610212969594939291906130af565b6102586103db366004612db4565b611907565b6102ad6103ee366004612fe9565b61193c565b6102ad610401366004612d36565b611989565b61022e611a0f565b6102ad600e5481565b610258611a23565b610238611a32565b61022e6104353660046130f9565b611a41565b61022e610448366004613135565b611a4c565b6102ad61045b366004612db4565b61205b565b61022e61046e3660046131c4565b6120d3565b6102ad600f5481565b61023861048a366004612db4565b612105565b61022e61049d366004612d36565b612266565b6015546102ad565b600d54610258906001600160a01b031681565b610238612292565b6102066104d336600461323f565b6122a1565b6102ad60105481565b6102066104ef366004612d36565b600b6020526000908152604090205460ff1681565b61022e610512366004612d36565b6122cf565b6102ad610525366004612db4565b60009081526018602052604090205490565b60006001600160e01b0319821663780e9d6360e01b148061055c575061055c82612348565b92915050565b61056a61236d565b6001600160a01b03166000908152600b60205260409020805460ff19169055565b60606000805461059a90613272565b80601f01602080910402602001604051908101604052809291908181526020018280546105c690613272565b80156106135780601f106105e857610100808354040283529160200191610613565b820191906000526020600020905b8154815290600101906020018083116105f657829003601f168201915b5050505050905090565b6000610628826123cc565b506000908152600460205260409020546001600160a01b031690565b600061064f82611907565b9050806001600160a01b0316836001600160a01b0316036106c15760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806106dd57506106dd81336122a1565b61074f5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016106b8565b61075983836123f1565b505050565b336000908152600b602052604090205460ff1680610794575061077f611a23565b6001600160a01b0316336001600160a01b0316145b61079d57600080fd5b6000601760008481526020019081526020016000206040518060c0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820180546107f590613272565b80601f016020809104026020016040519081016040528092919081815260200182805461082190613272565b801561086e5780601f106108435761010080835404028352916020019161086e565b820191906000526020600020905b81548152906001019060200180831161085157829003601f168201915b5050505050815260200160058201805461088790613272565b80601f01602080910402602001604051908101604052809291908181526020018280546108b390613272565b80156109005780601f106108d557610100808354040283529160200191610900565b820191906000526020600020905b8154815290600101906020018083116108e357829003601f168201915b5050505050815250509050806000015160000361092f5760405162461bcd60e51b81526004016106b8906132ac565b601a8260405161093f91906132e2565b9081526040519081900360200190205460ff161561096f5760405162461bcd60e51b81526004016106b8906132fe565b601a8160a0015160405161098391906132e2565b908152604051908190036020018120805460ff19169055600190601a906109ab9085906132e2565b9081526040805160209281900383019020805460ff19169315159390931790925560008581526017909152206005016109e4838261337c565b50505050565b336000908152600b602052604090205460ff1680610a205750610a0b611a23565b6001600160a01b0316336001600160a01b0316145b610a2957600080fd5b8551600003610a795760405162461bcd60e51b815260206004820152601c60248201527b66696e6765727072696e742063616e206e6f7420626520656d70747960201b60448201526064016106b8565b8451600003610ac35760405162461bcd60e51b81526020600482015260166024820152757469746c652063616e206e6f7420626520656d70747960501b60448201526064016106b8565b6001600160a01b038316610b125760405162461bcd60e51b8152602060048201526016602482015275696e76616c696420617274697374206164647265737360501b60448201526064016106b8565b8151600003610b5d5760405162461bcd60e51b81526020600482015260176024820152766d656469756d2063616e206e6f7420626520656d70747960481b60448201526064016106b8565b60008111610bb95760405162461bcd60e51b815260206004820152602360248201527f65646974696f6e2073697a65206e6565647320746f206265206174206c65617360448201526274203160e81b60648201526084016106b8565b600e54811115610c415760405162461bcd60e51b815260206004820152604760248201527f617274776f726b2065646974696f6e2073697a6520657863656564732074686560448201527f206d6178696d756d2065646974696f6e2073697a65206f66207468652065786860648201526634b134ba34b7b760c91b608482015260a4016106b8565b600086604051602001610c549190612da1565b60408051601f198184030181529181528151602092830120600081815260169093529120600301549091506001600160a01b031615610cf95760405162461bcd60e51b815260206004820152603b60248201527f616e20617274776f726b2077697468207468652073616d652066696e6765727060448201527a1c9a5b9d081a185cc8185b1c9958591e481c9959da5cdd195c9959602a1b60648201526084016106b8565b6040805160c08101825288815260208082018990528183018890526001600160a01b03871660608301526080820186905260a0820185905260158054600181019091557f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47501849055600084815260169091529190912081518291908190610d80908261337c565b5060208201516001820190610d95908261337c565b5060408201516002820190610daa908261337c565b5060608201516003820180546001600160a01b0319166001600160a01b0390921691909117905560808201516004820190610de5908261337c565b5060a0919091015160059091015560405182906001600160a01b038716907f997bc5bd0747442b15dc8315d11d6dad5b3afd0a1504a6882f57d988dfe9845190600090a35050505050505050565b610e3d338261245f565b610e595760405162461bcd60e51b81526004016106b89061343b565b6107598383836124be565b6000806000601760008681526020019081526020016000206040518060c001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482018054610ebf90613272565b80601f0160208091040260200160405190810160405280929190818152602001828054610eeb90613272565b8015610f385780601f10610f0d57610100808354040283529160200191610f38565b820191906000526020600020905b815481529060010190602001808311610f1b57829003601f168201915b50505050508152602001600582018054610f5190613272565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7d90613272565b8015610fca5780601f10610f9f57610100808354040283529160200191610fca565b820191906000526020600020905b815481529060010190602001808311610fad57829003601f168201915b50505050508152505090508060000151600003610ff95760405162461bcd60e51b81526004016106b8906132ac565b600060166000836040015181526020019081526020016000206040518060c001604052908160008201805461102d90613272565b80601f016020809104026020016040519081016040528092919081815260200182805461105990613272565b80156110a65780601f1061107b576101008083540402835291602001916110a6565b820191906000526020600020905b81548152906001019060200180831161108957829003601f168201915b505050505081526020016001820180546110bf90613272565b80601f01602080910402602001604051908101604052809291908181526020018280546110eb90613272565b80156111385780601f1061110d57610100808354040283529160200191611138565b820191906000526020600020905b81548152906001019060200180831161111b57829003601f168201915b5050505050815260200160028201805461115190613272565b80601f016020809104026020016040519081016040528092919081815260200182805461117d90613272565b80156111ca5780601f1061119f576101008083540402835291602001916111ca565b820191906000526020600020905b8154815290600101906020018083116111ad57829003601f168201915b505050918352505060038201546001600160a01b031660208201526004820180546040909201916111fa90613272565b80601f016020809104026020016040519081016040528092919081815260200182805461122690613272565b80156112735780601f1061124857610100808354040283529160200191611273565b820191906000526020600020905b81548152906001019060200180831161125657829003601f168201915b5050509183525050600591909101546020909101526011549091506001600160a01b03166112a757806060015193506112b6565b6011546001600160a01b031693505b6010546012546112c6908761349f565b6112d091906134c1565b925050509250929050565b60006112e683611989565b82106113485760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016106b8565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610759838383604051806020016040528060008152506120d3565b336000908152600b602052604090205460ff16806113c257506113ad611a23565b6001600160a01b0316336001600160a01b0316145b6113cb57600080fd5b601180546001600160a01b0319166001600160a01b0392909216919091179055565b600c80546113fa90613272565b80601f016020809104026020016040519081016040528092919081815260200182805461142690613272565b80156114735780601f1061144857610100808354040283529160200191611473565b820191906000526020600020905b81548152906001019060200180831161145657829003601f168201915b505050505081565b60166020526000908152604090208054819061149690613272565b80601f01602080910402602001604051908101604052809291908181526020018280546114c290613272565b801561150f5780601f106114e45761010080835404028352916020019161150f565b820191906000526020600020905b8154815290600101906020018083116114f257829003601f168201915b50505050509080600101805461152490613272565b80601f016020809104026020016040519081016040528092919081815260200182805461155090613272565b801561159d5780601f106115725761010080835404028352916020019161159d565b820191906000526020600020905b81548152906001019060200180831161158057829003601f168201915b5050505050908060020180546115b290613272565b80601f01602080910402602001604051908101604052809291908181526020018280546115de90613272565b801561162b5780601f106116005761010080835404028352916020019161162b565b820191906000526020600020905b81548152906001019060200180831161160e57829003601f168201915b505050600384015460048501805494956001600160a01b0390921694919350915061165590613272565b80601f016020809104026020016040519081016040528092919081815260200182805461168190613272565b80156116ce5780601f106116a3576101008083540402835291602001916116ce565b820191906000526020600020905b8154815290600101906020018083116116b157829003601f168201915b5050505050908060050154905086565b60006116e960085490565b821061174c5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016106b8565b6008828154811061175f5761175f6134d8565b90600052602060002001549050919050565b336000908152600b602052604090205460ff16806117a75750611792611a23565b6001600160a01b0316336001600160a01b0316145b6117b057600080fd5b60136117bc828261337c565b5050565b6017602052600090815260409020805460018201546002830154600384015460048501805494959394929391926117f690613272565b80601f016020809104026020016040519081016040528092919081815260200182805461182290613272565b801561186f5780601f106118445761010080835404028352916020019161186f565b820191906000526020600020905b81548152906001019060200180831161185257829003601f168201915b50505050509080600501805461188490613272565b80601f01602080910402602001604051908101604052809291908181526020018280546118b090613272565b80156118fd5780601f106118d2576101008083540402835291602001916118fd565b820191906000526020600020905b8154815290600101906020018083116118e057829003601f168201915b5050505050905086565b6000818152600260205260408120546001600160a01b03168061055c5760405162461bcd60e51b81526004016106b8906134ee565b600082815260186020526040812054821061195657600080fd5b6000838152601860205260409020805483908110611976576119766134d8565b9060005260206000200154905092915050565b60006001600160a01b0382166119f35760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016106b8565b506001600160a01b031660009081526003602052604090205490565b611a1761236d565b611a216000612653565b565b600a546001600160a01b031690565b60606001805461059a90613272565b6117bc3383836126a5565b336000908152600b602052604090205460ff1680611a825750611a6d611a23565b6001600160a01b0316336001600160a01b0316145b611a8b57600080fd5b600086815260166020526040808220815160c08101909252805482908290611ab290613272565b80601f0160208091040260200160405190810160405280929190818152602001828054611ade90613272565b8015611b2b5780601f10611b0057610100808354040283529160200191611b2b565b820191906000526020600020905b815481529060010190602001808311611b0e57829003601f168201915b50505050508152602001600182018054611b4490613272565b80601f0160208091040260200160405190810160405280929190818152602001828054611b7090613272565b8015611bbd5780601f10611b9257610100808354040283529160200191611bbd565b820191906000526020600020905b815481529060010190602001808311611ba057829003601f168201915b50505050508152602001600282018054611bd690613272565b80601f0160208091040260200160405190810160405280929190818152602001828054611c0290613272565b8015611c4f5780601f10611c2457610100808354040283529160200191611c4f565b820191906000526020600020905b815481529060010190602001808311611c3257829003601f168201915b505050918352505060038201546001600160a01b03166020820152600482018054604090920191611c7f90613272565b80601f0160208091040260200160405190810160405280929190818152602001828054611cab90613272565b8015611cf85780601f10611ccd57610100808354040283529160200191611cf8565b820191906000526020600020905b815481529060010190602001808311611cdb57829003601f168201915b50505091835250506005919091015460209091015260608101519091506001600160a01b0316611d615760405162461bcd60e51b8152602060048201526014602482015273185c9d1ddbdc9ac81a5cc81b9bdd08199bdd5b9960621b60448201526064016106b8565b8060a00151851115611dd35760405162461bcd60e51b815260206004820152603560248201527f65646974696f6e206e756d62657220657863656564207468652065646974696f6044820152746e2073697a65206f662074686520617274776f726b60581b60648201526084016106b8565b6001600160a01b038416611e215760405162461bcd60e51b8152602060048201526015602482015274696e76616c6964206f776e6572206164647265737360581b60448201526064016106b8565b60008681526019602052604090205460ff1615611e7c5760405162461bcd60e51b8152602060048201526019602482015278189a5d1b585c9ac81a59081a185cc81c9959da5cdd195c9959603a1b60448201526064016106b8565b601a82604051611e8c91906132e2565b9081526040519081900360200190205460ff1615611ebc5760405162461bcd60e51b81526004016106b8906132fe565b6000611ec88689613520565b60008181526017602052604090205490915015611f215760405162461bcd60e51b81526020600482015260176024820152761d1a194819591a5d1a5bdb881a5cc8195e1a5cdd195b9d604a1b60448201526064016106b8565b6040805160c08101825282815260208082018981528284018c8152606084018c8152608085018a815260a086018a905260008881526017909552959093208451815591516001830155516002820155905160038201559151909182916004820190611f8c908261337c565b5060a08201516005820190611fa1908261337c565b5050506000898152601860209081526040808320805460018181018355918552838520018690558b8452601990925291829020805460ff1916821790559051601a90611fee9087906132e2565b908152604051908190036020019020805491151560ff19909216919091179055612018868361276f565b8189876001600160a01b03167f4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd460405160405180910390a4505050505050505050565b600061206660155490565b82106120c05760405162461bcd60e51b8152602060048201526024808201527f617274776f726b733a20676c6f62616c20696e646578206f7574206f6620626f604482015263756e647360e01b60648201526084016106b8565b6015828154811061175f5761175f6134d8565b6120dd338361245f565b6120f95760405162461bcd60e51b81526004016106b89061343b565b6109e484848484612789565b6060612110826127bc565b6121745760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106b8565b600061217e6127d9565b9050805160000361219f575050604080516020810190915260008152919050565b600083815260176020526040812060050180546121bb90613272565b80601f01602080910402602001604051908101604052809291908181526020018280546121e790613272565b80156122345780601f1061220957610100808354040283529160200191612234565b820191906000526020600020905b81548152906001019060200180831161221757829003601f168201915b50505050509050818160405160200161224e929190613533565b60405160208183030381529060405292505050919050565b61226e61236d565b6001600160a01b03166000908152600b60205260409020805460ff19166001179055565b60606014805461059a90613272565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6122d761236d565b6001600160a01b03811661233c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106b8565b61234581612653565b50565b60006001600160e01b0319821663780e9d6360e01b148061055c575061055c826127e8565b33612376611a23565b6001600160a01b031614611a215760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106b8565b6123d5816127bc565b6123455760405162461bcd60e51b81526004016106b8906134ee565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061242682611907565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061246b83611907565b9050806001600160a01b0316846001600160a01b03161480612492575061249281856122a1565b806124b65750836001600160a01b03166124ab8461061d565b6001600160a01b0316145b949350505050565b826001600160a01b03166124d182611907565b6001600160a01b0316146125355760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016106b8565b6001600160a01b0382166125975760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106b8565b6125a2838383612838565b6125ad6000826123f1565b6001600160a01b03831660009081526003602052604081208054600192906125d690849061357b565b90915550506001600160a01b0382166000908152600360205260408120805460019290612604908490613520565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03868116918217909255915184939187169160008051602061365183398151915291a4505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036127025760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016106b8565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6117bc8282604051806020016040528060008152506128f0565b6127948484846124be565b6127a084848484612923565b6109e45760405162461bcd60e51b81526004016106b89061358e565b6000908152600260205260409020546001600160a01b0316151590565b60606013805461059a90613272565b60006001600160e01b031982166380ac58cd60e01b148061281957506001600160e01b03198216635b5e139f60e01b145b8061055c57506301ffc9a760e01b6001600160e01b031983161461055c565b6001600160a01b0383166128935761288e81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6128b6565b816001600160a01b0316836001600160a01b0316146128b6576128b68382612a24565b6001600160a01b0382166128cd5761075981612ac1565b826001600160a01b0316826001600160a01b031614610759576107598282612b70565b6128fa8383612bb4565b6129076000848484612923565b6107595760405162461bcd60e51b81526004016106b89061358e565b60006001600160a01b0384163b15612a1957604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906129679033908990889088906004016135e0565b6020604051808303816000875af19250505080156129a2575060408051601f3d908101601f1916820190925261299f9181019061361d565b60015b6129ff573d8080156129d0576040519150601f19603f3d011682016040523d82523d6000602084013e6129d5565b606091505b5080516000036129f75760405162461bcd60e51b81526004016106b89061358e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506124b6565b506001949350505050565b60006001612a3184611989565b612a3b919061357b565b600083815260076020526040902054909150808214612a8e576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612ad39060019061357b565b60008381526009602052604081205460088054939450909284908110612afb57612afb6134d8565b906000526020600020015490508060088381548110612b1c57612b1c6134d8565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612b5457612b5461363a565b6001900381819060005260206000200160009055905550505050565b6000612b7b83611989565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b038216612c0a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106b8565b612c13816127bc565b15612c5f5760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b60448201526064016106b8565b612c6b60008383612838565b6001600160a01b0382166000908152600360205260408120805460019290612c94908490613520565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020613651833981519152908290a45050565b6001600160e01b03198116811461234557600080fd5b600060208284031215612d0857600080fd5b8135612d1381612ce0565b9392505050565b80356001600160a01b0381168114612d3157600080fd5b919050565b600060208284031215612d4857600080fd5b612d1382612d1a565b60005b83811015612d6c578181015183820152602001612d54565b50506000910152565b60008151808452612d8d816020860160208601612d51565b601f01601f19169290920160200192915050565b602081526000612d136020830184612d75565b600060208284031215612dc657600080fd5b5035919050565b60008060408385031215612de057600080fd5b612de983612d1a565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b0380841115612e2757612e27612df7565b604051601f8501601f19908116603f01168101908282118183101715612e4f57612e4f612df7565b81604052809350858152868686011115612e6857600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112612e9357600080fd5b612d1383833560208501612e0d565b60008060408385031215612eb557600080fd5b8235915060208301356001600160401b03811115612ed257600080fd5b612ede85828601612e82565b9150509250929050565b60008060008060008060c08789031215612f0157600080fd5b86356001600160401b0380821115612f1857600080fd5b612f248a838b01612e82565b97506020890135915080821115612f3a57600080fd5b612f468a838b01612e82565b96506040890135915080821115612f5c57600080fd5b612f688a838b01612e82565b9550612f7660608a01612d1a565b94506080890135915080821115612f8c57600080fd5b50612f9989828a01612e82565b92505060a087013590509295509295509295565b600080600060608486031215612fc257600080fd5b612fcb84612d1a565b9250612fd960208501612d1a565b9150604084013590509250925092565b60008060408385031215612ffc57600080fd5b50508035926020909101359150565b60c08152600061301e60c0830189612d75565b82810360208401526130308189612d75565b905082810360408401526130448188612d75565b6001600160a01b0387166060850152838103608085015290506130678186612d75565b9150508260a0830152979650505050505050565b60006020828403121561308d57600080fd5b81356001600160401b038111156130a357600080fd5b6124b684828501612e82565b86815285602082015284604082015283606082015260c0608082015260006130da60c0830185612d75565b82810360a08401526130ec8185612d75565b9998505050505050505050565b6000806040838503121561310c57600080fd5b61311583612d1a565b91506020830135801515811461312a57600080fd5b809150509250929050565b60008060008060008060c0878903121561314e57600080fd5b86359550602087013594506040870135935061316c60608801612d1a565b925060808701356001600160401b038082111561318857600080fd5b6131948a838b01612e82565b935060a08901359150808211156131aa57600080fd5b506131b789828a01612e82565b9150509295509295509295565b600080600080608085870312156131da57600080fd5b6131e385612d1a565b93506131f160208601612d1a565b92506040850135915060608501356001600160401b0381111561321357600080fd5b8501601f8101871361322457600080fd5b61323387823560208401612e0d565b91505092959194509250565b6000806040838503121561325257600080fd5b61325b83612d1a565b915061326960208401612d1a565b90509250929050565b600181811c9082168061328657607f821691505b6020821081036132a657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601c908201527b185c9d1ddbdc9ac819591a5d1a5bdb881a5cc81b9bdd08199bdd5b9960221b604082015260600190565b600082516132f4818460208701612d51565b9190910192915050565b6020808252601690820152751a5c199cc81a59081a185cc81c9959da5cdd195c995960521b604082015260600190565b601f82111561075957600081815260208120601f850160051c810160208610156133555750805b601f850160051c820191505b8181101561337457828155600101613361565b505050505050565b81516001600160401b0381111561339557613395612df7565b6133a9816133a38454613272565b8461332e565b602080601f8311600181146133de57600084156133c65750858301515b600019600386901b1c1916600185901b178555613374565b600085815260208120601f198616915b8281101561340d578886015182559484019460019091019084016133ee565b508582101561342b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000826134bc57634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761055c5761055c613489565b634e487b7160e01b600052603260045260246000fd5b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b8082018082111561055c5761055c613489565b60008351613545818460208801612d51565b835190830190613559818360208801612d51565b6d17b6b2ba30b230ba30973539b7b760911b9101908152600e01949350505050565b8181038181111561055c5761055c613489565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061361390830184612d75565b9695505050505050565b60006020828403121561362f57600080fd5b8151612d1381612ce0565b634e487b7160e01b600052603160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220aaf13d39e11d454043884572df9874d0fa3818b81a75c0e5af5625b62292de8a64736f6c63430008110033",
}

// FeralfileExhibitionV3ABI is the input ABI used to generate the binding from.
// Deprecated: Use FeralfileExhibitionV3MetaData.ABI instead.
var FeralfileExhibitionV3ABI = FeralfileExhibitionV3MetaData.ABI

// FeralfileExhibitionV3Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FeralfileExhibitionV3MetaData.Bin instead.
var FeralfileExhibitionV3Bin = FeralfileExhibitionV3MetaData.Bin

// DeployFeralfileExhibitionV3 deploys a new Ethereum contract, binding an instance of FeralfileExhibitionV3 to it.
func DeployFeralfileExhibitionV3(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string, secondarySaleRoyaltyBPS_ *big.Int, royaltyPayoutAddress_ common.Address, contractURI_ string, tokenBaseURI_ string, isBurnable_ bool, isBridgeable_ bool) (common.Address, *types.Transaction, *FeralfileExhibitionV3, error) {
	parsed, err := FeralfileExhibitionV3MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FeralfileExhibitionV3Bin), backend, name_, symbol_, secondarySaleRoyaltyBPS_, royaltyPayoutAddress_, contractURI_, tokenBaseURI_, isBurnable_, isBridgeable_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FeralfileExhibitionV3{FeralfileExhibitionV3Caller: FeralfileExhibitionV3Caller{contract: contract}, FeralfileExhibitionV3Transactor: FeralfileExhibitionV3Transactor{contract: contract}, FeralfileExhibitionV3Filterer: FeralfileExhibitionV3Filterer{contract: contract}}, nil
}

// FeralfileExhibitionV3 is an auto generated Go binding around an Ethereum contract.
type FeralfileExhibitionV3 struct {
	FeralfileExhibitionV3Caller     // Read-only binding to the contract
	FeralfileExhibitionV3Transactor // Write-only binding to the contract
	FeralfileExhibitionV3Filterer   // Log filterer for contract events
}

// FeralfileExhibitionV3Caller is an auto generated read-only Go binding around an Ethereum contract.
type FeralfileExhibitionV3Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionV3Transactor is an auto generated write-only Go binding around an Ethereum contract.
type FeralfileExhibitionV3Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionV3Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FeralfileExhibitionV3Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionV3Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FeralfileExhibitionV3Session struct {
	Contract     *FeralfileExhibitionV3 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// FeralfileExhibitionV3CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FeralfileExhibitionV3CallerSession struct {
	Contract *FeralfileExhibitionV3Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// FeralfileExhibitionV3TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FeralfileExhibitionV3TransactorSession struct {
	Contract     *FeralfileExhibitionV3Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// FeralfileExhibitionV3Raw is an auto generated low-level Go binding around an Ethereum contract.
type FeralfileExhibitionV3Raw struct {
	Contract *FeralfileExhibitionV3 // Generic contract binding to access the raw methods on
}

// FeralfileExhibitionV3CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FeralfileExhibitionV3CallerRaw struct {
	Contract *FeralfileExhibitionV3Caller // Generic read-only contract binding to access the raw methods on
}

// FeralfileExhibitionV3TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FeralfileExhibitionV3TransactorRaw struct {
	Contract *FeralfileExhibitionV3Transactor // Generic write-only contract binding to access the raw methods on
}

// NewFeralfileExhibitionV3 creates a new instance of FeralfileExhibitionV3, bound to a specific deployed contract.
func NewFeralfileExhibitionV3(address common.Address, backend bind.ContractBackend) (*FeralfileExhibitionV3, error) {
	contract, err := bindFeralfileExhibitionV3(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3{FeralfileExhibitionV3Caller: FeralfileExhibitionV3Caller{contract: contract}, FeralfileExhibitionV3Transactor: FeralfileExhibitionV3Transactor{contract: contract}, FeralfileExhibitionV3Filterer: FeralfileExhibitionV3Filterer{contract: contract}}, nil
}

// NewFeralfileExhibitionV3Caller creates a new read-only instance of FeralfileExhibitionV3, bound to a specific deployed contract.
func NewFeralfileExhibitionV3Caller(address common.Address, caller bind.ContractCaller) (*FeralfileExhibitionV3Caller, error) {
	contract, err := bindFeralfileExhibitionV3(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3Caller{contract: contract}, nil
}

// NewFeralfileExhibitionV3Transactor creates a new write-only instance of FeralfileExhibitionV3, bound to a specific deployed contract.
func NewFeralfileExhibitionV3Transactor(address common.Address, transactor bind.ContractTransactor) (*FeralfileExhibitionV3Transactor, error) {
	contract, err := bindFeralfileExhibitionV3(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3Transactor{contract: contract}, nil
}

// NewFeralfileExhibitionV3Filterer creates a new log filterer instance of FeralfileExhibitionV3, bound to a specific deployed contract.
func NewFeralfileExhibitionV3Filterer(address common.Address, filterer bind.ContractFilterer) (*FeralfileExhibitionV3Filterer, error) {
	contract, err := bindFeralfileExhibitionV3(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3Filterer{contract: contract}, nil
}

// bindFeralfileExhibitionV3 binds a generic wrapper to an already deployed contract.
func bindFeralfileExhibitionV3(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FeralfileExhibitionV3ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeralfileExhibitionV3.Contract.FeralfileExhibitionV3Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.FeralfileExhibitionV3Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.FeralfileExhibitionV3Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeralfileExhibitionV3.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.contract.Transact(opts, method, params...)
}

// MAXROYALITYBPS is a free data retrieval call binding the contract method 0xec9cbb44.
//
// Solidity: function MAX_ROYALITY_BPS() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) MAXROYALITYBPS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "MAX_ROYALITY_BPS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXROYALITYBPS is a free data retrieval call binding the contract method 0xec9cbb44.
//
// Solidity: function MAX_ROYALITY_BPS() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) MAXROYALITYBPS() (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.MAXROYALITYBPS(&_FeralfileExhibitionV3.CallOpts)
}

// MAXROYALITYBPS is a free data retrieval call binding the contract method 0xec9cbb44.
//
// Solidity: function MAX_ROYALITY_BPS() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) MAXROYALITYBPS() (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.MAXROYALITYBPS(&_FeralfileExhibitionV3.CallOpts)
}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, string ipfsCID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) ArtworkEditions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	EditionID *big.Int
	IpfsCID   string
}, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "artworkEditions", arg0)

	outstruct := new(struct {
		EditionID *big.Int
		IpfsCID   string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.EditionID = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.IpfsCID = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, string ipfsCID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) ArtworkEditions(arg0 *big.Int) (struct {
	EditionID *big.Int
	IpfsCID   string
}, error) {
	return _FeralfileExhibitionV3.Contract.ArtworkEditions(&_FeralfileExhibitionV3.CallOpts, arg0)
}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, string ipfsCID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) ArtworkEditions(arg0 *big.Int) (struct {
	EditionID *big.Int
	IpfsCID   string
}, error) {
	return _FeralfileExhibitionV3.Contract.ArtworkEditions(&_FeralfileExhibitionV3.CallOpts, arg0)
}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string title, string artistName, string fingerprint, uint256 editionSize, uint256 AEAmount, uint256 PPAmount)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) Artworks(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Title       string
	ArtistName  string
	Fingerprint string
	EditionSize *big.Int
	AEAmount    *big.Int
	PPAmount    *big.Int
}, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "artworks", arg0)

	outstruct := new(struct {
		Title       string
		ArtistName  string
		Fingerprint string
		EditionSize *big.Int
		AEAmount    *big.Int
		PPAmount    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Title = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.ArtistName = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Fingerprint = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.EditionSize = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.AEAmount = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.PPAmount = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string title, string artistName, string fingerprint, uint256 editionSize, uint256 AEAmount, uint256 PPAmount)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) Artworks(arg0 *big.Int) (struct {
	Title       string
	ArtistName  string
	Fingerprint string
	EditionSize *big.Int
	AEAmount    *big.Int
	PPAmount    *big.Int
}, error) {
	return _FeralfileExhibitionV3.Contract.Artworks(&_FeralfileExhibitionV3.CallOpts, arg0)
}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string title, string artistName, string fingerprint, uint256 editionSize, uint256 AEAmount, uint256 PPAmount)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) Artworks(arg0 *big.Int) (struct {
	Title       string
	ArtistName  string
	Fingerprint string
	EditionSize *big.Int
	AEAmount    *big.Int
	PPAmount    *big.Int
}, error) {
	return _FeralfileExhibitionV3.Contract.Artworks(&_FeralfileExhibitionV3.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.BalanceOf(&_FeralfileExhibitionV3.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.BalanceOf(&_FeralfileExhibitionV3.CallOpts, owner)
}

// CodeVersion is a free data retrieval call binding the contract method 0x63e60230.
//
// Solidity: function codeVersion() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) CodeVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "codeVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CodeVersion is a free data retrieval call binding the contract method 0x63e60230.
//
// Solidity: function codeVersion() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) CodeVersion() (string, error) {
	return _FeralfileExhibitionV3.Contract.CodeVersion(&_FeralfileExhibitionV3.CallOpts)
}

// CodeVersion is a free data retrieval call binding the contract method 0x63e60230.
//
// Solidity: function codeVersion() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) CodeVersion() (string, error) {
	return _FeralfileExhibitionV3.Contract.CodeVersion(&_FeralfileExhibitionV3.CallOpts)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) ContractURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "contractURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) ContractURI() (string, error) {
	return _FeralfileExhibitionV3.Contract.ContractURI(&_FeralfileExhibitionV3.CallOpts)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) ContractURI() (string, error) {
	return _FeralfileExhibitionV3.Contract.ContractURI(&_FeralfileExhibitionV3.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV3.Contract.GetApproved(&_FeralfileExhibitionV3.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV3.Contract.GetApproved(&_FeralfileExhibitionV3.CallOpts, tokenId)
}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) GetArtworkByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "getArtworkByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) GetArtworkByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.GetArtworkByIndex(&_FeralfileExhibitionV3.CallOpts, index)
}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) GetArtworkByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.GetArtworkByIndex(&_FeralfileExhibitionV3.CallOpts, index)
}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) GetArtworkEditionByIndex(opts *bind.CallOpts, artworkID *big.Int, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "getArtworkEditionByIndex", artworkID, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) GetArtworkEditionByIndex(artworkID *big.Int, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.GetArtworkEditionByIndex(&_FeralfileExhibitionV3.CallOpts, artworkID, index)
}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) GetArtworkEditionByIndex(artworkID *big.Int, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.GetArtworkEditionByIndex(&_FeralfileExhibitionV3.CallOpts, artworkID, index)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _FeralfileExhibitionV3.Contract.IsApprovedForAll(&_FeralfileExhibitionV3.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _FeralfileExhibitionV3.Contract.IsApprovedForAll(&_FeralfileExhibitionV3.CallOpts, owner, operator)
}

// IsBridgeable is a free data retrieval call binding the contract method 0x7ca5ea89.
//
// Solidity: function isBridgeable() view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) IsBridgeable(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "isBridgeable")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBridgeable is a free data retrieval call binding the contract method 0x7ca5ea89.
//
// Solidity: function isBridgeable() view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) IsBridgeable() (bool, error) {
	return _FeralfileExhibitionV3.Contract.IsBridgeable(&_FeralfileExhibitionV3.CallOpts)
}

// IsBridgeable is a free data retrieval call binding the contract method 0x7ca5ea89.
//
// Solidity: function isBridgeable() view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) IsBridgeable() (bool, error) {
	return _FeralfileExhibitionV3.Contract.IsBridgeable(&_FeralfileExhibitionV3.CallOpts)
}

// IsBurnable is a free data retrieval call binding the contract method 0x883356d9.
//
// Solidity: function isBurnable() view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) IsBurnable(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "isBurnable")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBurnable is a free data retrieval call binding the contract method 0x883356d9.
//
// Solidity: function isBurnable() view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) IsBurnable() (bool, error) {
	return _FeralfileExhibitionV3.Contract.IsBurnable(&_FeralfileExhibitionV3.CallOpts)
}

// IsBurnable is a free data retrieval call binding the contract method 0x883356d9.
//
// Solidity: function isBurnable() view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) IsBurnable() (bool, error) {
	return _FeralfileExhibitionV3.Contract.IsBurnable(&_FeralfileExhibitionV3.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) Name() (string, error) {
	return _FeralfileExhibitionV3.Contract.Name(&_FeralfileExhibitionV3.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) Name() (string, error) {
	return _FeralfileExhibitionV3.Contract.Name(&_FeralfileExhibitionV3.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) Owner() (common.Address, error) {
	return _FeralfileExhibitionV3.Contract.Owner(&_FeralfileExhibitionV3.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) Owner() (common.Address, error) {
	return _FeralfileExhibitionV3.Contract.Owner(&_FeralfileExhibitionV3.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV3.Contract.OwnerOf(&_FeralfileExhibitionV3.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV3.Contract.OwnerOf(&_FeralfileExhibitionV3.CallOpts, tokenId)
}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 tokenId, uint256 salePrice) view returns(address receiver, uint256 royaltyAmount)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) RoyaltyInfo(opts *bind.CallOpts, tokenId *big.Int, salePrice *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "royaltyInfo", tokenId, salePrice)

	outstruct := new(struct {
		Receiver      common.Address
		RoyaltyAmount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Receiver = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.RoyaltyAmount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 tokenId, uint256 salePrice) view returns(address receiver, uint256 royaltyAmount)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) RoyaltyInfo(tokenId *big.Int, salePrice *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	return _FeralfileExhibitionV3.Contract.RoyaltyInfo(&_FeralfileExhibitionV3.CallOpts, tokenId, salePrice)
}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 tokenId, uint256 salePrice) view returns(address receiver, uint256 royaltyAmount)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) RoyaltyInfo(tokenId *big.Int, salePrice *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	return _FeralfileExhibitionV3.Contract.RoyaltyInfo(&_FeralfileExhibitionV3.CallOpts, tokenId, salePrice)
}

// RoyaltyPayoutAddress is a free data retrieval call binding the contract method 0x3f6805ba.
//
// Solidity: function royaltyPayoutAddress() view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) RoyaltyPayoutAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "royaltyPayoutAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RoyaltyPayoutAddress is a free data retrieval call binding the contract method 0x3f6805ba.
//
// Solidity: function royaltyPayoutAddress() view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) RoyaltyPayoutAddress() (common.Address, error) {
	return _FeralfileExhibitionV3.Contract.RoyaltyPayoutAddress(&_FeralfileExhibitionV3.CallOpts)
}

// RoyaltyPayoutAddress is a free data retrieval call binding the contract method 0x3f6805ba.
//
// Solidity: function royaltyPayoutAddress() view returns(address)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) RoyaltyPayoutAddress() (common.Address, error) {
	return _FeralfileExhibitionV3.Contract.RoyaltyPayoutAddress(&_FeralfileExhibitionV3.CallOpts)
}

// SecondarySaleRoyaltyBPS is a free data retrieval call binding the contract method 0xea211d7c.
//
// Solidity: function secondarySaleRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) SecondarySaleRoyaltyBPS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "secondarySaleRoyaltyBPS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SecondarySaleRoyaltyBPS is a free data retrieval call binding the contract method 0xea211d7c.
//
// Solidity: function secondarySaleRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) SecondarySaleRoyaltyBPS() (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.SecondarySaleRoyaltyBPS(&_FeralfileExhibitionV3.CallOpts)
}

// SecondarySaleRoyaltyBPS is a free data retrieval call binding the contract method 0xea211d7c.
//
// Solidity: function secondarySaleRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) SecondarySaleRoyaltyBPS() (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.SecondarySaleRoyaltyBPS(&_FeralfileExhibitionV3.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeralfileExhibitionV3.Contract.SupportsInterface(&_FeralfileExhibitionV3.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeralfileExhibitionV3.Contract.SupportsInterface(&_FeralfileExhibitionV3.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) Symbol() (string, error) {
	return _FeralfileExhibitionV3.Contract.Symbol(&_FeralfileExhibitionV3.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) Symbol() (string, error) {
	return _FeralfileExhibitionV3.Contract.Symbol(&_FeralfileExhibitionV3.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TokenByIndex(&_FeralfileExhibitionV3.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TokenByIndex(&_FeralfileExhibitionV3.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TokenOfOwnerByIndex(&_FeralfileExhibitionV3.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TokenOfOwnerByIndex(&_FeralfileExhibitionV3.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) TokenURI(tokenId *big.Int) (string, error) {
	return _FeralfileExhibitionV3.Contract.TokenURI(&_FeralfileExhibitionV3.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _FeralfileExhibitionV3.Contract.TokenURI(&_FeralfileExhibitionV3.CallOpts, tokenId)
}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) TotalArtworks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "totalArtworks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) TotalArtworks() (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TotalArtworks(&_FeralfileExhibitionV3.CallOpts)
}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) TotalArtworks() (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TotalArtworks(&_FeralfileExhibitionV3.CallOpts)
}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) TotalEditionOfArtwork(opts *bind.CallOpts, artworkID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "totalEditionOfArtwork", artworkID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) TotalEditionOfArtwork(artworkID *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TotalEditionOfArtwork(&_FeralfileExhibitionV3.CallOpts, artworkID)
}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) TotalEditionOfArtwork(artworkID *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TotalEditionOfArtwork(&_FeralfileExhibitionV3.CallOpts, artworkID)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) TotalSupply() (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TotalSupply(&_FeralfileExhibitionV3.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) TotalSupply() (*big.Int, error) {
	return _FeralfileExhibitionV3.Contract.TotalSupply(&_FeralfileExhibitionV3.CallOpts)
}

// Trustees is a free data retrieval call binding the contract method 0xeee608a4.
//
// Solidity: function trustees(address ) view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Caller) Trustees(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibitionV3.contract.Call(opts, &out, "trustees", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Trustees is a free data retrieval call binding the contract method 0xeee608a4.
//
// Solidity: function trustees(address ) view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) Trustees(arg0 common.Address) (bool, error) {
	return _FeralfileExhibitionV3.Contract.Trustees(&_FeralfileExhibitionV3.CallOpts, arg0)
}

// Trustees is a free data retrieval call binding the contract method 0xeee608a4.
//
// Solidity: function trustees(address ) view returns(bool)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3CallerSession) Trustees(arg0 common.Address) (bool, error) {
	return _FeralfileExhibitionV3.Contract.Trustees(&_FeralfileExhibitionV3.CallOpts, arg0)
}

// AddTrustee is a paid mutator transaction binding the contract method 0xdc78ac1c.
//
// Solidity: function addTrustee(address _trustee) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) AddTrustee(opts *bind.TransactOpts, _trustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "addTrustee", _trustee)
}

// AddTrustee is a paid mutator transaction binding the contract method 0xdc78ac1c.
//
// Solidity: function addTrustee(address _trustee) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) AddTrustee(_trustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.AddTrustee(&_FeralfileExhibitionV3.TransactOpts, _trustee)
}

// AddTrustee is a paid mutator transaction binding the contract method 0xdc78ac1c.
//
// Solidity: function addTrustee(address _trustee) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) AddTrustee(_trustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.AddTrustee(&_FeralfileExhibitionV3.TransactOpts, _trustee)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.Approve(&_FeralfileExhibitionV3.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.Approve(&_FeralfileExhibitionV3.TransactOpts, to, tokenId)
}

// AuthorizedTransfer is a paid mutator transaction binding the contract method 0x9fbf39cd.
//
// Solidity: function authorizedTransfer((address,address,uint256,uint256,bytes32,bytes32,uint8)[] transferParams_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) AuthorizedTransfer(opts *bind.TransactOpts, transferParams_ []FeralfileExhibitionV3TransferArtworkParam) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "authorizedTransfer", transferParams_)
}

// AuthorizedTransfer is a paid mutator transaction binding the contract method 0x9fbf39cd.
//
// Solidity: function authorizedTransfer((address,address,uint256,uint256,bytes32,bytes32,uint8)[] transferParams_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) AuthorizedTransfer(transferParams_ []FeralfileExhibitionV3TransferArtworkParam) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.AuthorizedTransfer(&_FeralfileExhibitionV3.TransactOpts, transferParams_)
}

// AuthorizedTransfer is a paid mutator transaction binding the contract method 0x9fbf39cd.
//
// Solidity: function authorizedTransfer((address,address,uint256,uint256,bytes32,bytes32,uint8)[] transferParams_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) AuthorizedTransfer(transferParams_ []FeralfileExhibitionV3TransferArtworkParam) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.AuthorizedTransfer(&_FeralfileExhibitionV3.TransactOpts, transferParams_)
}

// BatchMint is a paid mutator transaction binding the contract method 0x12d907b9.
//
// Solidity: function batchMint((uint256,uint256,address,address,string)[] mintParams_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) BatchMint(opts *bind.TransactOpts, mintParams_ []FeralfileExhibitionV3MintArtworkParam) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "batchMint", mintParams_)
}

// BatchMint is a paid mutator transaction binding the contract method 0x12d907b9.
//
// Solidity: function batchMint((uint256,uint256,address,address,string)[] mintParams_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) BatchMint(mintParams_ []FeralfileExhibitionV3MintArtworkParam) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.BatchMint(&_FeralfileExhibitionV3.TransactOpts, mintParams_)
}

// BatchMint is a paid mutator transaction binding the contract method 0x12d907b9.
//
// Solidity: function batchMint((uint256,uint256,address,address,string)[] mintParams_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) BatchMint(mintParams_ []FeralfileExhibitionV3MintArtworkParam) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.BatchMint(&_FeralfileExhibitionV3.TransactOpts, mintParams_)
}

// BurnEditions is a paid mutator transaction binding the contract method 0xfc05ea68.
//
// Solidity: function burnEditions(uint256[] editionIDs_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) BurnEditions(opts *bind.TransactOpts, editionIDs_ []*big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "burnEditions", editionIDs_)
}

// BurnEditions is a paid mutator transaction binding the contract method 0xfc05ea68.
//
// Solidity: function burnEditions(uint256[] editionIDs_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) BurnEditions(editionIDs_ []*big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.BurnEditions(&_FeralfileExhibitionV3.TransactOpts, editionIDs_)
}

// BurnEditions is a paid mutator transaction binding the contract method 0xfc05ea68.
//
// Solidity: function burnEditions(uint256[] editionIDs_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) BurnEditions(editionIDs_ []*big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.BurnEditions(&_FeralfileExhibitionV3.TransactOpts, editionIDs_)
}

// CreateArtworks is a paid mutator transaction binding the contract method 0x43deaf76.
//
// Solidity: function createArtworks((string,string,string,uint256,uint256,uint256)[] artworks_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) CreateArtworks(opts *bind.TransactOpts, artworks_ []FeralfileExhibitionV3Artwork) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "createArtworks", artworks_)
}

// CreateArtworks is a paid mutator transaction binding the contract method 0x43deaf76.
//
// Solidity: function createArtworks((string,string,string,uint256,uint256,uint256)[] artworks_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) CreateArtworks(artworks_ []FeralfileExhibitionV3Artwork) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.CreateArtworks(&_FeralfileExhibitionV3.TransactOpts, artworks_)
}

// CreateArtworks is a paid mutator transaction binding the contract method 0x43deaf76.
//
// Solidity: function createArtworks((string,string,string,uint256,uint256,uint256)[] artworks_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) CreateArtworks(artworks_ []FeralfileExhibitionV3Artwork) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.CreateArtworks(&_FeralfileExhibitionV3.TransactOpts, artworks_)
}

// RemoveTrustee is a paid mutator transaction binding the contract method 0x03120506.
//
// Solidity: function removeTrustee(address _trustee) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) RemoveTrustee(opts *bind.TransactOpts, _trustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "removeTrustee", _trustee)
}

// RemoveTrustee is a paid mutator transaction binding the contract method 0x03120506.
//
// Solidity: function removeTrustee(address _trustee) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) RemoveTrustee(_trustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.RemoveTrustee(&_FeralfileExhibitionV3.TransactOpts, _trustee)
}

// RemoveTrustee is a paid mutator transaction binding the contract method 0x03120506.
//
// Solidity: function removeTrustee(address _trustee) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) RemoveTrustee(_trustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.RemoveTrustee(&_FeralfileExhibitionV3.TransactOpts, _trustee)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) RenounceOwnership() (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.RenounceOwnership(&_FeralfileExhibitionV3.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.RenounceOwnership(&_FeralfileExhibitionV3.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SafeTransferFrom(&_FeralfileExhibitionV3.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SafeTransferFrom(&_FeralfileExhibitionV3.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SafeTransferFrom0(&_FeralfileExhibitionV3.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SafeTransferFrom0(&_FeralfileExhibitionV3.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SetApprovalForAll(&_FeralfileExhibitionV3.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SetApprovalForAll(&_FeralfileExhibitionV3.TransactOpts, operator, approved)
}

// SetRoyaltyPayoutAddress is a paid mutator transaction binding the contract method 0x45aeefde.
//
// Solidity: function setRoyaltyPayoutAddress(address royaltyPayoutAddress_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) SetRoyaltyPayoutAddress(opts *bind.TransactOpts, royaltyPayoutAddress_ common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "setRoyaltyPayoutAddress", royaltyPayoutAddress_)
}

// SetRoyaltyPayoutAddress is a paid mutator transaction binding the contract method 0x45aeefde.
//
// Solidity: function setRoyaltyPayoutAddress(address royaltyPayoutAddress_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) SetRoyaltyPayoutAddress(royaltyPayoutAddress_ common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SetRoyaltyPayoutAddress(&_FeralfileExhibitionV3.TransactOpts, royaltyPayoutAddress_)
}

// SetRoyaltyPayoutAddress is a paid mutator transaction binding the contract method 0x45aeefde.
//
// Solidity: function setRoyaltyPayoutAddress(address royaltyPayoutAddress_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) SetRoyaltyPayoutAddress(royaltyPayoutAddress_ common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SetRoyaltyPayoutAddress(&_FeralfileExhibitionV3.TransactOpts, royaltyPayoutAddress_)
}

// SetTokenBaseURI is a paid mutator transaction binding the contract method 0x8ef79e91.
//
// Solidity: function setTokenBaseURI(string baseURI_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) SetTokenBaseURI(opts *bind.TransactOpts, baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "setTokenBaseURI", baseURI_)
}

// SetTokenBaseURI is a paid mutator transaction binding the contract method 0x8ef79e91.
//
// Solidity: function setTokenBaseURI(string baseURI_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) SetTokenBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SetTokenBaseURI(&_FeralfileExhibitionV3.TransactOpts, baseURI_)
}

// SetTokenBaseURI is a paid mutator transaction binding the contract method 0x8ef79e91.
//
// Solidity: function setTokenBaseURI(string baseURI_) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) SetTokenBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.SetTokenBaseURI(&_FeralfileExhibitionV3.TransactOpts, baseURI_)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.TransferFrom(&_FeralfileExhibitionV3.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.TransferFrom(&_FeralfileExhibitionV3.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.TransferOwnership(&_FeralfileExhibitionV3.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.TransferOwnership(&_FeralfileExhibitionV3.TransactOpts, newOwner)
}

// UpdateArtworkEditionIPFSCid is a paid mutator transaction binding the contract method 0x0cfcb5f1.
//
// Solidity: function updateArtworkEditionIPFSCid(uint256 tokenId, string ipfsCID) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Transactor) UpdateArtworkEditionIPFSCid(opts *bind.TransactOpts, tokenId *big.Int, ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.contract.Transact(opts, "updateArtworkEditionIPFSCid", tokenId, ipfsCID)
}

// UpdateArtworkEditionIPFSCid is a paid mutator transaction binding the contract method 0x0cfcb5f1.
//
// Solidity: function updateArtworkEditionIPFSCid(uint256 tokenId, string ipfsCID) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Session) UpdateArtworkEditionIPFSCid(tokenId *big.Int, ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.UpdateArtworkEditionIPFSCid(&_FeralfileExhibitionV3.TransactOpts, tokenId, ipfsCID)
}

// UpdateArtworkEditionIPFSCid is a paid mutator transaction binding the contract method 0x0cfcb5f1.
//
// Solidity: function updateArtworkEditionIPFSCid(uint256 tokenId, string ipfsCID) returns()
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3TransactorSession) UpdateArtworkEditionIPFSCid(tokenId *big.Int, ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV3.Contract.UpdateArtworkEditionIPFSCid(&_FeralfileExhibitionV3.TransactOpts, tokenId, ipfsCID)
}

// FeralfileExhibitionV3ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3ApprovalIterator struct {
	Event *FeralfileExhibitionV3Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV3ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV3Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV3Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV3ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV3ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV3Approval represents a Approval event raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*FeralfileExhibitionV3ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3ApprovalIterator{contract: _FeralfileExhibitionV3.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV3Approval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV3Approval)
				if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) ParseApproval(log types.Log) (*FeralfileExhibitionV3Approval, error) {
	event := new(FeralfileExhibitionV3Approval)
	if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV3ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3ApprovalForAllIterator struct {
	Event *FeralfileExhibitionV3ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV3ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV3ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV3ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV3ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV3ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV3ApprovalForAll represents a ApprovalForAll event raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*FeralfileExhibitionV3ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3ApprovalForAllIterator{contract: _FeralfileExhibitionV3.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV3ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV3ApprovalForAll)
				if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) ParseApprovalForAll(log types.Log) (*FeralfileExhibitionV3ApprovalForAll, error) {
	event := new(FeralfileExhibitionV3ApprovalForAll)
	if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV3BurnArtworkEditionIterator is returned from FilterBurnArtworkEdition and is used to iterate over the raw logs and unpacked data for BurnArtworkEdition events raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3BurnArtworkEditionIterator struct {
	Event *FeralfileExhibitionV3BurnArtworkEdition // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV3BurnArtworkEditionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV3BurnArtworkEdition)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV3BurnArtworkEdition)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV3BurnArtworkEditionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV3BurnArtworkEditionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV3BurnArtworkEdition represents a BurnArtworkEdition event raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3BurnArtworkEdition struct {
	EditionID *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterBurnArtworkEdition is a free log retrieval operation binding the contract event 0xa5a44c7ed36966786612323ee2cb0cb453d4a9282b90c6befe72cde41d83f488.
//
// Solidity: event BurnArtworkEdition(uint256 indexed editionID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) FilterBurnArtworkEdition(opts *bind.FilterOpts, editionID []*big.Int) (*FeralfileExhibitionV3BurnArtworkEditionIterator, error) {

	var editionIDRule []interface{}
	for _, editionIDItem := range editionID {
		editionIDRule = append(editionIDRule, editionIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.FilterLogs(opts, "BurnArtworkEdition", editionIDRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3BurnArtworkEditionIterator{contract: _FeralfileExhibitionV3.contract, event: "BurnArtworkEdition", logs: logs, sub: sub}, nil
}

// WatchBurnArtworkEdition is a free log subscription operation binding the contract event 0xa5a44c7ed36966786612323ee2cb0cb453d4a9282b90c6befe72cde41d83f488.
//
// Solidity: event BurnArtworkEdition(uint256 indexed editionID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) WatchBurnArtworkEdition(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV3BurnArtworkEdition, editionID []*big.Int) (event.Subscription, error) {

	var editionIDRule []interface{}
	for _, editionIDItem := range editionID {
		editionIDRule = append(editionIDRule, editionIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.WatchLogs(opts, "BurnArtworkEdition", editionIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV3BurnArtworkEdition)
				if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "BurnArtworkEdition", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurnArtworkEdition is a log parse operation binding the contract event 0xa5a44c7ed36966786612323ee2cb0cb453d4a9282b90c6befe72cde41d83f488.
//
// Solidity: event BurnArtworkEdition(uint256 indexed editionID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) ParseBurnArtworkEdition(log types.Log) (*FeralfileExhibitionV3BurnArtworkEdition, error) {
	event := new(FeralfileExhibitionV3BurnArtworkEdition)
	if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "BurnArtworkEdition", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV3NewArtworkIterator is returned from FilterNewArtwork and is used to iterate over the raw logs and unpacked data for NewArtwork events raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3NewArtworkIterator struct {
	Event *FeralfileExhibitionV3NewArtwork // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV3NewArtworkIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV3NewArtwork)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV3NewArtwork)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV3NewArtworkIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV3NewArtworkIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV3NewArtwork represents a NewArtwork event raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3NewArtwork struct {
	ArtworkID *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewArtwork is a free log retrieval operation binding the contract event 0x22350b25f1b72bb3621199a79abefeb4fcd77bb1e65638cd09350666e4db0891.
//
// Solidity: event NewArtwork(uint256 indexed artworkID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) FilterNewArtwork(opts *bind.FilterOpts, artworkID []*big.Int) (*FeralfileExhibitionV3NewArtworkIterator, error) {

	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.FilterLogs(opts, "NewArtwork", artworkIDRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3NewArtworkIterator{contract: _FeralfileExhibitionV3.contract, event: "NewArtwork", logs: logs, sub: sub}, nil
}

// WatchNewArtwork is a free log subscription operation binding the contract event 0x22350b25f1b72bb3621199a79abefeb4fcd77bb1e65638cd09350666e4db0891.
//
// Solidity: event NewArtwork(uint256 indexed artworkID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) WatchNewArtwork(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV3NewArtwork, artworkID []*big.Int) (event.Subscription, error) {

	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.WatchLogs(opts, "NewArtwork", artworkIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV3NewArtwork)
				if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "NewArtwork", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewArtwork is a log parse operation binding the contract event 0x22350b25f1b72bb3621199a79abefeb4fcd77bb1e65638cd09350666e4db0891.
//
// Solidity: event NewArtwork(uint256 indexed artworkID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) ParseNewArtwork(log types.Log) (*FeralfileExhibitionV3NewArtwork, error) {
	event := new(FeralfileExhibitionV3NewArtwork)
	if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "NewArtwork", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV3NewArtworkEditionIterator is returned from FilterNewArtworkEdition and is used to iterate over the raw logs and unpacked data for NewArtworkEdition events raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3NewArtworkEditionIterator struct {
	Event *FeralfileExhibitionV3NewArtworkEdition // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV3NewArtworkEditionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV3NewArtworkEdition)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV3NewArtworkEdition)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV3NewArtworkEditionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV3NewArtworkEditionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV3NewArtworkEdition represents a NewArtworkEdition event raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3NewArtworkEdition struct {
	Owner     common.Address
	ArtworkID *big.Int
	EditionID *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewArtworkEdition is a free log retrieval operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) FilterNewArtworkEdition(opts *bind.FilterOpts, owner []common.Address, artworkID []*big.Int, editionID []*big.Int) (*FeralfileExhibitionV3NewArtworkEditionIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}
	var editionIDRule []interface{}
	for _, editionIDItem := range editionID {
		editionIDRule = append(editionIDRule, editionIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.FilterLogs(opts, "NewArtworkEdition", ownerRule, artworkIDRule, editionIDRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3NewArtworkEditionIterator{contract: _FeralfileExhibitionV3.contract, event: "NewArtworkEdition", logs: logs, sub: sub}, nil
}

// WatchNewArtworkEdition is a free log subscription operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) WatchNewArtworkEdition(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV3NewArtworkEdition, owner []common.Address, artworkID []*big.Int, editionID []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}
	var editionIDRule []interface{}
	for _, editionIDItem := range editionID {
		editionIDRule = append(editionIDRule, editionIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.WatchLogs(opts, "NewArtworkEdition", ownerRule, artworkIDRule, editionIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV3NewArtworkEdition)
				if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "NewArtworkEdition", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewArtworkEdition is a log parse operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) ParseNewArtworkEdition(log types.Log) (*FeralfileExhibitionV3NewArtworkEdition, error) {
	event := new(FeralfileExhibitionV3NewArtworkEdition)
	if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "NewArtworkEdition", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV3OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3OwnershipTransferredIterator struct {
	Event *FeralfileExhibitionV3OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV3OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV3OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV3OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV3OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV3OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV3OwnershipTransferred represents a OwnershipTransferred event raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FeralfileExhibitionV3OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3OwnershipTransferredIterator{contract: _FeralfileExhibitionV3.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV3OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV3OwnershipTransferred)
				if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) ParseOwnershipTransferred(log types.Log) (*FeralfileExhibitionV3OwnershipTransferred, error) {
	event := new(FeralfileExhibitionV3OwnershipTransferred)
	if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV3TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3TransferIterator struct {
	Event *FeralfileExhibitionV3Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV3TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV3Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV3Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV3TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV3TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV3Transfer represents a Transfer event raised by the FeralfileExhibitionV3 contract.
type FeralfileExhibitionV3Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*FeralfileExhibitionV3TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV3TransferIterator{contract: _FeralfileExhibitionV3.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV3Transfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV3.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV3Transfer)
				if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibitionV3 *FeralfileExhibitionV3Filterer) ParseTransfer(log types.Log) (*FeralfileExhibitionV3Transfer, error) {
	event := new(FeralfileExhibitionV3Transfer)
	if err := _FeralfileExhibitionV3.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
