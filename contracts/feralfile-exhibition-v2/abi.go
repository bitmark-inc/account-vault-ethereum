// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package feralfilev2

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// FeralfileExhibitionV2ABI is the input ABI used to generate the binding from.
const FeralfileExhibitionV2ABI = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_exhibitionTitle\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maxEditionPerArtwork\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondarySaleRoyaltyBPS\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_royaltyPayoutAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenBaseURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"}],\"name\":\"NewArtwork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionID\",\"type\":\"uint256\"}],\"name\":\"NewArtworkEdition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ROYALITY_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworkEditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"editionID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsCID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fingerprint\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exhibitionTitle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEditionPerArtwork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyPayoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondarySaleRoyaltyBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTrustee\",\"type\":\"address\"}],\"name\":\"setTrustee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_fingerprint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_artistName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_editionSize\",\"type\":\"uint256\"}],\"name\":\"createArtwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalArtworks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getArtworkByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_artworkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bitmarkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ipfsCID\",\"type\":\"string\"}],\"name\":\"swapArtworkFromBitmark\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ipfsCID\",\"type\":\"string\"}],\"name\":\"updateArtworkEditionIPFSCid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"}],\"name\":\"setRoyaltyPayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"}],\"name\":\"totalEditionOfArtwork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getArtworkEditionByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setTokenBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// FeralfileExhibitionV2Bin is the compiled bytecode used for deploying new contracts.
var FeralfileExhibitionV2Bin = ""

// DeployFeralfileExhibitionV2 deploys a new Ethereum contract, binding an instance of FeralfileExhibitionV2 to it.
func DeployFeralfileExhibitionV2(auth *bind.TransactOpts, backend bind.ContractBackend, _name string, _symbol string, _exhibitionTitle string, _maxEditionPerArtwork *big.Int, _secondarySaleRoyaltyBPS *big.Int, _royaltyPayoutAddress common.Address, contractURI_ string, tokenBaseURI_ string) (common.Address, *types.Transaction, *FeralfileExhibitionV2, error) {
	parsed, err := abi.JSON(strings.NewReader(FeralfileExhibitionV2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(FeralfileExhibitionV2Bin), backend, _name, _symbol, _exhibitionTitle, _maxEditionPerArtwork, _secondarySaleRoyaltyBPS, _royaltyPayoutAddress, contractURI_, tokenBaseURI_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FeralfileExhibitionV2{FeralfileExhibitionV2Caller: FeralfileExhibitionV2Caller{contract: contract}, FeralfileExhibitionV2Transactor: FeralfileExhibitionV2Transactor{contract: contract}, FeralfileExhibitionV2Filterer: FeralfileExhibitionV2Filterer{contract: contract}}, nil
}

// FeralfileExhibitionV2 is an auto generated Go binding around an Ethereum contract.
type FeralfileExhibitionV2 struct {
	FeralfileExhibitionV2Caller     // Read-only binding to the contract
	FeralfileExhibitionV2Transactor // Write-only binding to the contract
	FeralfileExhibitionV2Filterer   // Log filterer for contract events
}

// FeralfileExhibitionV2Caller is an auto generated read-only Go binding around an Ethereum contract.
type FeralfileExhibitionV2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionV2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type FeralfileExhibitionV2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionV2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FeralfileExhibitionV2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionV2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FeralfileExhibitionV2Session struct {
	Contract     *FeralfileExhibitionV2 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// FeralfileExhibitionV2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FeralfileExhibitionV2CallerSession struct {
	Contract *FeralfileExhibitionV2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// FeralfileExhibitionV2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FeralfileExhibitionV2TransactorSession struct {
	Contract     *FeralfileExhibitionV2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// FeralfileExhibitionV2Raw is an auto generated low-level Go binding around an Ethereum contract.
type FeralfileExhibitionV2Raw struct {
	Contract *FeralfileExhibitionV2 // Generic contract binding to access the raw methods on
}

// FeralfileExhibitionV2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FeralfileExhibitionV2CallerRaw struct {
	Contract *FeralfileExhibitionV2Caller // Generic read-only contract binding to access the raw methods on
}

// FeralfileExhibitionV2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FeralfileExhibitionV2TransactorRaw struct {
	Contract *FeralfileExhibitionV2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewFeralfileExhibitionV2 creates a new instance of FeralfileExhibitionV2, bound to a specific deployed contract.
func NewFeralfileExhibitionV2(address common.Address, backend bind.ContractBackend) (*FeralfileExhibitionV2, error) {
	contract, err := bindFeralfileExhibitionV2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2{FeralfileExhibitionV2Caller: FeralfileExhibitionV2Caller{contract: contract}, FeralfileExhibitionV2Transactor: FeralfileExhibitionV2Transactor{contract: contract}, FeralfileExhibitionV2Filterer: FeralfileExhibitionV2Filterer{contract: contract}}, nil
}

// NewFeralfileExhibitionV2Caller creates a new read-only instance of FeralfileExhibitionV2, bound to a specific deployed contract.
func NewFeralfileExhibitionV2Caller(address common.Address, caller bind.ContractCaller) (*FeralfileExhibitionV2Caller, error) {
	contract, err := bindFeralfileExhibitionV2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2Caller{contract: contract}, nil
}

// NewFeralfileExhibitionV2Transactor creates a new write-only instance of FeralfileExhibitionV2, bound to a specific deployed contract.
func NewFeralfileExhibitionV2Transactor(address common.Address, transactor bind.ContractTransactor) (*FeralfileExhibitionV2Transactor, error) {
	contract, err := bindFeralfileExhibitionV2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2Transactor{contract: contract}, nil
}

// NewFeralfileExhibitionV2Filterer creates a new log filterer instance of FeralfileExhibitionV2, bound to a specific deployed contract.
func NewFeralfileExhibitionV2Filterer(address common.Address, filterer bind.ContractFilterer) (*FeralfileExhibitionV2Filterer, error) {
	contract, err := bindFeralfileExhibitionV2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2Filterer{contract: contract}, nil
}

// bindFeralfileExhibitionV2 binds a generic wrapper to an already deployed contract.
func bindFeralfileExhibitionV2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FeralfileExhibitionV2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeralfileExhibitionV2.Contract.FeralfileExhibitionV2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.FeralfileExhibitionV2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.FeralfileExhibitionV2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeralfileExhibitionV2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.contract.Transact(opts, method, params...)
}

// MAXROYALITYBPS is a free data retrieval call binding the contract method 0xec9cbb44.
//
// Solidity: function MAX_ROYALITY_BPS() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) MAXROYALITYBPS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "MAX_ROYALITY_BPS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXROYALITYBPS is a free data retrieval call binding the contract method 0xec9cbb44.
//
// Solidity: function MAX_ROYALITY_BPS() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) MAXROYALITYBPS() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.MAXROYALITYBPS(&_FeralfileExhibitionV2.CallOpts)
}

// MAXROYALITYBPS is a free data retrieval call binding the contract method 0xec9cbb44.
//
// Solidity: function MAX_ROYALITY_BPS() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) MAXROYALITYBPS() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.MAXROYALITYBPS(&_FeralfileExhibitionV2.CallOpts)
}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, string ipfsCID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) ArtworkEditions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	EditionID *big.Int
	IpfsCID   string
}, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "artworkEditions", arg0)

	outstruct := new(struct {
		EditionID *big.Int
		IpfsCID   string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.EditionID = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.IpfsCID = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, string ipfsCID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) ArtworkEditions(arg0 *big.Int) (struct {
	EditionID *big.Int
	IpfsCID   string
}, error) {
	return _FeralfileExhibitionV2.Contract.ArtworkEditions(&_FeralfileExhibitionV2.CallOpts, arg0)
}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, string ipfsCID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) ArtworkEditions(arg0 *big.Int) (struct {
	EditionID *big.Int
	IpfsCID   string
}, error) {
	return _FeralfileExhibitionV2.Contract.ArtworkEditions(&_FeralfileExhibitionV2.CallOpts, arg0)
}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string title, string artistName, string fingerprint, uint256 editionSize)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) Artworks(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Title       string
	ArtistName  string
	Fingerprint string
	EditionSize *big.Int
}, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "artworks", arg0)

	outstruct := new(struct {
		Title       string
		ArtistName  string
		Fingerprint string
		EditionSize *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Title = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.ArtistName = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Fingerprint = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.EditionSize = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string title, string artistName, string fingerprint, uint256 editionSize)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) Artworks(arg0 *big.Int) (struct {
	Title       string
	ArtistName  string
	Fingerprint string
	EditionSize *big.Int
}, error) {
	return _FeralfileExhibitionV2.Contract.Artworks(&_FeralfileExhibitionV2.CallOpts, arg0)
}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string title, string artistName, string fingerprint, uint256 editionSize)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) Artworks(arg0 *big.Int) (struct {
	Title       string
	ArtistName  string
	Fingerprint string
	EditionSize *big.Int
}, error) {
	return _FeralfileExhibitionV2.Contract.Artworks(&_FeralfileExhibitionV2.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.BalanceOf(&_FeralfileExhibitionV2.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.BalanceOf(&_FeralfileExhibitionV2.CallOpts, owner)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) ContractURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "contractURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) ContractURI() (string, error) {
	return _FeralfileExhibitionV2.Contract.ContractURI(&_FeralfileExhibitionV2.CallOpts)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) ContractURI() (string, error) {
	return _FeralfileExhibitionV2.Contract.ContractURI(&_FeralfileExhibitionV2.CallOpts)
}

// ExhibitionTitle is a free data retrieval call binding the contract method 0x69d43943.
//
// Solidity: function exhibitionTitle() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) ExhibitionTitle(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "exhibitionTitle")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ExhibitionTitle is a free data retrieval call binding the contract method 0x69d43943.
//
// Solidity: function exhibitionTitle() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) ExhibitionTitle() (string, error) {
	return _FeralfileExhibitionV2.Contract.ExhibitionTitle(&_FeralfileExhibitionV2.CallOpts)
}

// ExhibitionTitle is a free data retrieval call binding the contract method 0x69d43943.
//
// Solidity: function exhibitionTitle() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) ExhibitionTitle() (string, error) {
	return _FeralfileExhibitionV2.Contract.ExhibitionTitle(&_FeralfileExhibitionV2.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.GetApproved(&_FeralfileExhibitionV2.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.GetApproved(&_FeralfileExhibitionV2.CallOpts, tokenId)
}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) GetArtworkByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "getArtworkByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) GetArtworkByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.GetArtworkByIndex(&_FeralfileExhibitionV2.CallOpts, index)
}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) GetArtworkByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.GetArtworkByIndex(&_FeralfileExhibitionV2.CallOpts, index)
}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) GetArtworkEditionByIndex(opts *bind.CallOpts, artworkID *big.Int, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "getArtworkEditionByIndex", artworkID, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) GetArtworkEditionByIndex(artworkID *big.Int, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.GetArtworkEditionByIndex(&_FeralfileExhibitionV2.CallOpts, artworkID, index)
}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) GetArtworkEditionByIndex(artworkID *big.Int, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.GetArtworkEditionByIndex(&_FeralfileExhibitionV2.CallOpts, artworkID, index)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _FeralfileExhibitionV2.Contract.IsApprovedForAll(&_FeralfileExhibitionV2.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _FeralfileExhibitionV2.Contract.IsApprovedForAll(&_FeralfileExhibitionV2.CallOpts, owner, operator)
}

// MaxEditionPerArtwork is a free data retrieval call binding the contract method 0x84ad61af.
//
// Solidity: function maxEditionPerArtwork() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) MaxEditionPerArtwork(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "maxEditionPerArtwork")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxEditionPerArtwork is a free data retrieval call binding the contract method 0x84ad61af.
//
// Solidity: function maxEditionPerArtwork() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) MaxEditionPerArtwork() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.MaxEditionPerArtwork(&_FeralfileExhibitionV2.CallOpts)
}

// MaxEditionPerArtwork is a free data retrieval call binding the contract method 0x84ad61af.
//
// Solidity: function maxEditionPerArtwork() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) MaxEditionPerArtwork() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.MaxEditionPerArtwork(&_FeralfileExhibitionV2.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) Name() (string, error) {
	return _FeralfileExhibitionV2.Contract.Name(&_FeralfileExhibitionV2.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) Name() (string, error) {
	return _FeralfileExhibitionV2.Contract.Name(&_FeralfileExhibitionV2.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) Owner() (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.Owner(&_FeralfileExhibitionV2.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) Owner() (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.Owner(&_FeralfileExhibitionV2.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.OwnerOf(&_FeralfileExhibitionV2.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.OwnerOf(&_FeralfileExhibitionV2.CallOpts, tokenId)
}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 _tokenId, uint256 _salePrice) view returns(address receiver, uint256 royaltyAmount)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) RoyaltyInfo(opts *bind.CallOpts, _tokenId *big.Int, _salePrice *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "royaltyInfo", _tokenId, _salePrice)

	outstruct := new(struct {
		Receiver      common.Address
		RoyaltyAmount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Receiver = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.RoyaltyAmount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 _tokenId, uint256 _salePrice) view returns(address receiver, uint256 royaltyAmount)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) RoyaltyInfo(_tokenId *big.Int, _salePrice *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	return _FeralfileExhibitionV2.Contract.RoyaltyInfo(&_FeralfileExhibitionV2.CallOpts, _tokenId, _salePrice)
}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 _tokenId, uint256 _salePrice) view returns(address receiver, uint256 royaltyAmount)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) RoyaltyInfo(_tokenId *big.Int, _salePrice *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	return _FeralfileExhibitionV2.Contract.RoyaltyInfo(&_FeralfileExhibitionV2.CallOpts, _tokenId, _salePrice)
}

// RoyaltyPayoutAddress is a free data retrieval call binding the contract method 0x3f6805ba.
//
// Solidity: function royaltyPayoutAddress() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) RoyaltyPayoutAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "royaltyPayoutAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RoyaltyPayoutAddress is a free data retrieval call binding the contract method 0x3f6805ba.
//
// Solidity: function royaltyPayoutAddress() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) RoyaltyPayoutAddress() (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.RoyaltyPayoutAddress(&_FeralfileExhibitionV2.CallOpts)
}

// RoyaltyPayoutAddress is a free data retrieval call binding the contract method 0x3f6805ba.
//
// Solidity: function royaltyPayoutAddress() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) RoyaltyPayoutAddress() (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.RoyaltyPayoutAddress(&_FeralfileExhibitionV2.CallOpts)
}

// SecondarySaleRoyaltyBPS is a free data retrieval call binding the contract method 0xea211d7c.
//
// Solidity: function secondarySaleRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) SecondarySaleRoyaltyBPS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "secondarySaleRoyaltyBPS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SecondarySaleRoyaltyBPS is a free data retrieval call binding the contract method 0xea211d7c.
//
// Solidity: function secondarySaleRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SecondarySaleRoyaltyBPS() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.SecondarySaleRoyaltyBPS(&_FeralfileExhibitionV2.CallOpts)
}

// SecondarySaleRoyaltyBPS is a free data retrieval call binding the contract method 0xea211d7c.
//
// Solidity: function secondarySaleRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) SecondarySaleRoyaltyBPS() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.SecondarySaleRoyaltyBPS(&_FeralfileExhibitionV2.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeralfileExhibitionV2.Contract.SupportsInterface(&_FeralfileExhibitionV2.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeralfileExhibitionV2.Contract.SupportsInterface(&_FeralfileExhibitionV2.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) Symbol() (string, error) {
	return _FeralfileExhibitionV2.Contract.Symbol(&_FeralfileExhibitionV2.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) Symbol() (string, error) {
	return _FeralfileExhibitionV2.Contract.Symbol(&_FeralfileExhibitionV2.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TokenByIndex(&_FeralfileExhibitionV2.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TokenByIndex(&_FeralfileExhibitionV2.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TokenOfOwnerByIndex(&_FeralfileExhibitionV2.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TokenOfOwnerByIndex(&_FeralfileExhibitionV2.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TokenURI(tokenId *big.Int) (string, error) {
	return _FeralfileExhibitionV2.Contract.TokenURI(&_FeralfileExhibitionV2.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _FeralfileExhibitionV2.Contract.TokenURI(&_FeralfileExhibitionV2.CallOpts, tokenId)
}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) TotalArtworks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "totalArtworks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TotalArtworks() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TotalArtworks(&_FeralfileExhibitionV2.CallOpts)
}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) TotalArtworks() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TotalArtworks(&_FeralfileExhibitionV2.CallOpts)
}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) TotalEditionOfArtwork(opts *bind.CallOpts, artworkID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "totalEditionOfArtwork", artworkID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TotalEditionOfArtwork(artworkID *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TotalEditionOfArtwork(&_FeralfileExhibitionV2.CallOpts, artworkID)
}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) TotalEditionOfArtwork(artworkID *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TotalEditionOfArtwork(&_FeralfileExhibitionV2.CallOpts, artworkID)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TotalSupply() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TotalSupply(&_FeralfileExhibitionV2.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) TotalSupply() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TotalSupply(&_FeralfileExhibitionV2.CallOpts)
}

// Trustee is a free data retrieval call binding the contract method 0xfdf97cb2.
//
// Solidity: function trustee() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) Trustee(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "trustee")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Trustee is a free data retrieval call binding the contract method 0xfdf97cb2.
//
// Solidity: function trustee() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) Trustee() (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.Trustee(&_FeralfileExhibitionV2.CallOpts)
}

// Trustee is a free data retrieval call binding the contract method 0xfdf97cb2.
//
// Solidity: function trustee() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) Trustee() (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.Trustee(&_FeralfileExhibitionV2.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.Approve(&_FeralfileExhibitionV2.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.Approve(&_FeralfileExhibitionV2.TransactOpts, to, tokenId)
}

// CreateArtwork is a paid mutator transaction binding the contract method 0x3afb021a.
//
// Solidity: function createArtwork(string _fingerprint, string _title, string _artistName, uint256 _editionSize) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) CreateArtwork(opts *bind.TransactOpts, _fingerprint string, _title string, _artistName string, _editionSize *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "createArtwork", _fingerprint, _title, _artistName, _editionSize)
}

// CreateArtwork is a paid mutator transaction binding the contract method 0x3afb021a.
//
// Solidity: function createArtwork(string _fingerprint, string _title, string _artistName, uint256 _editionSize) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) CreateArtwork(_fingerprint string, _title string, _artistName string, _editionSize *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.CreateArtwork(&_FeralfileExhibitionV2.TransactOpts, _fingerprint, _title, _artistName, _editionSize)
}

// CreateArtwork is a paid mutator transaction binding the contract method 0x3afb021a.
//
// Solidity: function createArtwork(string _fingerprint, string _title, string _artistName, uint256 _editionSize) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) CreateArtwork(_fingerprint string, _title string, _artistName string, _editionSize *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.CreateArtwork(&_FeralfileExhibitionV2.TransactOpts, _fingerprint, _title, _artistName, _editionSize)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) RenounceOwnership() (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.RenounceOwnership(&_FeralfileExhibitionV2.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.RenounceOwnership(&_FeralfileExhibitionV2.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SafeTransferFrom(&_FeralfileExhibitionV2.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SafeTransferFrom(&_FeralfileExhibitionV2.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SafeTransferFrom0(&_FeralfileExhibitionV2.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SafeTransferFrom0(&_FeralfileExhibitionV2.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetApprovalForAll(&_FeralfileExhibitionV2.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetApprovalForAll(&_FeralfileExhibitionV2.TransactOpts, operator, approved)
}

// SetRoyaltyPayoutAddress is a paid mutator transaction binding the contract method 0x45aeefde.
//
// Solidity: function setRoyaltyPayoutAddress(address payoutAddress) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SetRoyaltyPayoutAddress(opts *bind.TransactOpts, payoutAddress common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "setRoyaltyPayoutAddress", payoutAddress)
}

// SetRoyaltyPayoutAddress is a paid mutator transaction binding the contract method 0x45aeefde.
//
// Solidity: function setRoyaltyPayoutAddress(address payoutAddress) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SetRoyaltyPayoutAddress(payoutAddress common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetRoyaltyPayoutAddress(&_FeralfileExhibitionV2.TransactOpts, payoutAddress)
}

// SetRoyaltyPayoutAddress is a paid mutator transaction binding the contract method 0x45aeefde.
//
// Solidity: function setRoyaltyPayoutAddress(address payoutAddress) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SetRoyaltyPayoutAddress(payoutAddress common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetRoyaltyPayoutAddress(&_FeralfileExhibitionV2.TransactOpts, payoutAddress)
}

// SetTokenBaseURI is a paid mutator transaction binding the contract method 0x8ef79e91.
//
// Solidity: function setTokenBaseURI(string baseURI_) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SetTokenBaseURI(opts *bind.TransactOpts, baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "setTokenBaseURI", baseURI_)
}

// SetTokenBaseURI is a paid mutator transaction binding the contract method 0x8ef79e91.
//
// Solidity: function setTokenBaseURI(string baseURI_) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SetTokenBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetTokenBaseURI(&_FeralfileExhibitionV2.TransactOpts, baseURI_)
}

// SetTokenBaseURI is a paid mutator transaction binding the contract method 0x8ef79e91.
//
// Solidity: function setTokenBaseURI(string baseURI_) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SetTokenBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetTokenBaseURI(&_FeralfileExhibitionV2.TransactOpts, baseURI_)
}

// SetTrustee is a paid mutator transaction binding the contract method 0xd0d1ea70.
//
// Solidity: function setTrustee(address _newTrustee) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SetTrustee(opts *bind.TransactOpts, _newTrustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "setTrustee", _newTrustee)
}

// SetTrustee is a paid mutator transaction binding the contract method 0xd0d1ea70.
//
// Solidity: function setTrustee(address _newTrustee) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SetTrustee(_newTrustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetTrustee(&_FeralfileExhibitionV2.TransactOpts, _newTrustee)
}

// SetTrustee is a paid mutator transaction binding the contract method 0xd0d1ea70.
//
// Solidity: function setTrustee(address _newTrustee) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SetTrustee(_newTrustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetTrustee(&_FeralfileExhibitionV2.TransactOpts, _newTrustee)
}

// SwapArtworkFromBitmark is a paid mutator transaction binding the contract method 0x7f34c0dd.
//
// Solidity: function swapArtworkFromBitmark(uint256 _artworkID, uint256 _bitmarkID, uint256 _editionNumber, address _owner, string _ipfsCID) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SwapArtworkFromBitmark(opts *bind.TransactOpts, _artworkID *big.Int, _bitmarkID *big.Int, _editionNumber *big.Int, _owner common.Address, _ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "swapArtworkFromBitmark", _artworkID, _bitmarkID, _editionNumber, _owner, _ipfsCID)
}

// SwapArtworkFromBitmark is a paid mutator transaction binding the contract method 0x7f34c0dd.
//
// Solidity: function swapArtworkFromBitmark(uint256 _artworkID, uint256 _bitmarkID, uint256 _editionNumber, address _owner, string _ipfsCID) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SwapArtworkFromBitmark(_artworkID *big.Int, _bitmarkID *big.Int, _editionNumber *big.Int, _owner common.Address, _ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SwapArtworkFromBitmark(&_FeralfileExhibitionV2.TransactOpts, _artworkID, _bitmarkID, _editionNumber, _owner, _ipfsCID)
}

// SwapArtworkFromBitmark is a paid mutator transaction binding the contract method 0x7f34c0dd.
//
// Solidity: function swapArtworkFromBitmark(uint256 _artworkID, uint256 _bitmarkID, uint256 _editionNumber, address _owner, string _ipfsCID) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SwapArtworkFromBitmark(_artworkID *big.Int, _bitmarkID *big.Int, _editionNumber *big.Int, _owner common.Address, _ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SwapArtworkFromBitmark(&_FeralfileExhibitionV2.TransactOpts, _artworkID, _bitmarkID, _editionNumber, _owner, _ipfsCID)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.TransferFrom(&_FeralfileExhibitionV2.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.TransferFrom(&_FeralfileExhibitionV2.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.TransferOwnership(&_FeralfileExhibitionV2.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.TransferOwnership(&_FeralfileExhibitionV2.TransactOpts, newOwner)
}

// UpdateArtworkEditionIPFSCid is a paid mutator transaction binding the contract method 0x0cfcb5f1.
//
// Solidity: function updateArtworkEditionIPFSCid(uint256 _tokenId, string _ipfsCID) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) UpdateArtworkEditionIPFSCid(opts *bind.TransactOpts, _tokenId *big.Int, _ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "updateArtworkEditionIPFSCid", _tokenId, _ipfsCID)
}

// UpdateArtworkEditionIPFSCid is a paid mutator transaction binding the contract method 0x0cfcb5f1.
//
// Solidity: function updateArtworkEditionIPFSCid(uint256 _tokenId, string _ipfsCID) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) UpdateArtworkEditionIPFSCid(_tokenId *big.Int, _ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.UpdateArtworkEditionIPFSCid(&_FeralfileExhibitionV2.TransactOpts, _tokenId, _ipfsCID)
}

// UpdateArtworkEditionIPFSCid is a paid mutator transaction binding the contract method 0x0cfcb5f1.
//
// Solidity: function updateArtworkEditionIPFSCid(uint256 _tokenId, string _ipfsCID) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) UpdateArtworkEditionIPFSCid(_tokenId *big.Int, _ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.UpdateArtworkEditionIPFSCid(&_FeralfileExhibitionV2.TransactOpts, _tokenId, _ipfsCID)
}

// FeralfileExhibitionV2ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2ApprovalIterator struct {
	Event *FeralfileExhibitionV2Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV2ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV2Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV2Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV2ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV2ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV2Approval represents a Approval event raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*FeralfileExhibitionV2ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2ApprovalIterator{contract: _FeralfileExhibitionV2.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV2Approval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV2Approval)
				if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) ParseApproval(log types.Log) (*FeralfileExhibitionV2Approval, error) {
	event := new(FeralfileExhibitionV2Approval)
	if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV2ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2ApprovalForAllIterator struct {
	Event *FeralfileExhibitionV2ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV2ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV2ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV2ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV2ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV2ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV2ApprovalForAll represents a ApprovalForAll event raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*FeralfileExhibitionV2ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2ApprovalForAllIterator{contract: _FeralfileExhibitionV2.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV2ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV2ApprovalForAll)
				if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) ParseApprovalForAll(log types.Log) (*FeralfileExhibitionV2ApprovalForAll, error) {
	event := new(FeralfileExhibitionV2ApprovalForAll)
	if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV2NewArtworkIterator is returned from FilterNewArtwork and is used to iterate over the raw logs and unpacked data for NewArtwork events raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2NewArtworkIterator struct {
	Event *FeralfileExhibitionV2NewArtwork // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV2NewArtworkIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV2NewArtwork)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV2NewArtwork)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV2NewArtworkIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV2NewArtworkIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV2NewArtwork represents a NewArtwork event raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2NewArtwork struct {
	ArtworkID *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewArtwork is a free log retrieval operation binding the contract event 0x22350b25f1b72bb3621199a79abefeb4fcd77bb1e65638cd09350666e4db0891.
//
// Solidity: event NewArtwork(uint256 indexed artworkID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) FilterNewArtwork(opts *bind.FilterOpts, artworkID []*big.Int) (*FeralfileExhibitionV2NewArtworkIterator, error) {

	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.FilterLogs(opts, "NewArtwork", artworkIDRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2NewArtworkIterator{contract: _FeralfileExhibitionV2.contract, event: "NewArtwork", logs: logs, sub: sub}, nil
}

// WatchNewArtwork is a free log subscription operation binding the contract event 0x22350b25f1b72bb3621199a79abefeb4fcd77bb1e65638cd09350666e4db0891.
//
// Solidity: event NewArtwork(uint256 indexed artworkID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) WatchNewArtwork(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV2NewArtwork, artworkID []*big.Int) (event.Subscription, error) {

	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.WatchLogs(opts, "NewArtwork", artworkIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV2NewArtwork)
				if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "NewArtwork", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewArtwork is a log parse operation binding the contract event 0x22350b25f1b72bb3621199a79abefeb4fcd77bb1e65638cd09350666e4db0891.
//
// Solidity: event NewArtwork(uint256 indexed artworkID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) ParseNewArtwork(log types.Log) (*FeralfileExhibitionV2NewArtwork, error) {
	event := new(FeralfileExhibitionV2NewArtwork)
	if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "NewArtwork", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV2NewArtworkEditionIterator is returned from FilterNewArtworkEdition and is used to iterate over the raw logs and unpacked data for NewArtworkEdition events raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2NewArtworkEditionIterator struct {
	Event *FeralfileExhibitionV2NewArtworkEdition // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV2NewArtworkEditionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV2NewArtworkEdition)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV2NewArtworkEdition)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV2NewArtworkEditionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV2NewArtworkEditionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV2NewArtworkEdition represents a NewArtworkEdition event raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2NewArtworkEdition struct {
	Owner     common.Address
	ArtworkID *big.Int
	EditionID *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewArtworkEdition is a free log retrieval operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) FilterNewArtworkEdition(opts *bind.FilterOpts, owner []common.Address, artworkID []*big.Int, editionID []*big.Int) (*FeralfileExhibitionV2NewArtworkEditionIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}
	var editionIDRule []interface{}
	for _, editionIDItem := range editionID {
		editionIDRule = append(editionIDRule, editionIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.FilterLogs(opts, "NewArtworkEdition", ownerRule, artworkIDRule, editionIDRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2NewArtworkEditionIterator{contract: _FeralfileExhibitionV2.contract, event: "NewArtworkEdition", logs: logs, sub: sub}, nil
}

// WatchNewArtworkEdition is a free log subscription operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) WatchNewArtworkEdition(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV2NewArtworkEdition, owner []common.Address, artworkID []*big.Int, editionID []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}
	var editionIDRule []interface{}
	for _, editionIDItem := range editionID {
		editionIDRule = append(editionIDRule, editionIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.WatchLogs(opts, "NewArtworkEdition", ownerRule, artworkIDRule, editionIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV2NewArtworkEdition)
				if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "NewArtworkEdition", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewArtworkEdition is a log parse operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) ParseNewArtworkEdition(log types.Log) (*FeralfileExhibitionV2NewArtworkEdition, error) {
	event := new(FeralfileExhibitionV2NewArtworkEdition)
	if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "NewArtworkEdition", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV2OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2OwnershipTransferredIterator struct {
	Event *FeralfileExhibitionV2OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV2OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV2OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV2OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV2OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV2OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV2OwnershipTransferred represents a OwnershipTransferred event raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FeralfileExhibitionV2OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2OwnershipTransferredIterator{contract: _FeralfileExhibitionV2.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV2OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV2OwnershipTransferred)
				if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) ParseOwnershipTransferred(log types.Log) (*FeralfileExhibitionV2OwnershipTransferred, error) {
	event := new(FeralfileExhibitionV2OwnershipTransferred)
	if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV2TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2TransferIterator struct {
	Event *FeralfileExhibitionV2Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV2TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV2Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV2Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV2TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV2TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV2Transfer represents a Transfer event raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*FeralfileExhibitionV2TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2TransferIterator{contract: _FeralfileExhibitionV2.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV2Transfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV2Transfer)
				if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) ParseTransfer(log types.Log) (*FeralfileExhibitionV2Transfer, error) {
	event := new(FeralfileExhibitionV2Transfer)
	if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
