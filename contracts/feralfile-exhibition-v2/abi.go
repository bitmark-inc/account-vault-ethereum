// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package feralfile

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// FeralfileExhibitionV2ABI is the input ABI used to generate the binding from.
const FeralfileExhibitionV2ABI = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxEditionPerArtwork_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondarySaleRoyaltyBPS_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltyPayoutAddress_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenBaseURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"}],\"name\":\"NewArtwork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionID\",\"type\":\"uint256\"}],\"name\":\"NewArtworkEdition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ROYALITY_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworkEditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"editionID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsCID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fingerprint\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"maxEditionPerArtwork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyPayoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondarySaleRoyaltyBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTrustee\",\"type\":\"address\"}],\"name\":\"setTrustee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fingerprint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"}],\"name\":\"createArtwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalArtworks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getArtworkByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bitmarkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ipfsCID\",\"type\":\"string\"}],\"name\":\"swapArtworkFromBitmark\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsCID\",\"type\":\"string\"}],\"name\":\"updateArtworkEditionIPFSCid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"royaltyPayoutAddress_\",\"type\":\"address\"}],\"name\":\"setRoyaltyPayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"}],\"name\":\"totalEditionOfArtwork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getArtworkEditionByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setTokenBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true}]"

// FeralfileExhibitionV2Bin is the compiled bytecode used for deploying new contracts.
var FeralfileExhibitionV2Bin = "0x60c06040523480156200001157600080fd5b5060405162005c0338038062005c0383398181016040528101906200003791906200047e565b86868160009080519060200190620000519291906200032e565b5080600190805190602001906200006a9291906200032e565b5050506200008d620000816200026060201b60201c565b6200026860201b60201c565b6000600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000851162000115576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200010c90620006ed565b60405180910390fd5b6127108411156200015d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001549062000731565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415620001d0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001c7906200070f565b60405180910390fd5b84608081815250508360a0818152505082600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600e9080519060200190620002399291906200032e565b5080600d9080519060200190620002529291906200032e565b505050505050505062000907565b600033905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200033c906200083f565b90600052602060002090601f016020900481019282620003605760008555620003ac565b82601f106200037b57805160ff1916838001178555620003ac565b82800160010185558215620003ac579182015b82811115620003ab5782518255916020019190600101906200038e565b5b509050620003bb9190620003bf565b5090565b5b80821115620003da576000816000905550600101620003c0565b5090565b6000620003f5620003ef8462000787565b62000753565b9050828152602081018484840111156200040e57600080fd5b6200041b84828562000809565b509392505050565b6000815190506200043481620008d3565b92915050565b600082601f8301126200044c57600080fd5b81516200045e848260208601620003de565b91505092915050565b6000815190506200047881620008ed565b92915050565b600080600080600080600060e0888a0312156200049a57600080fd5b600088015167ffffffffffffffff811115620004b557600080fd5b620004c38a828b016200043a565b975050602088015167ffffffffffffffff811115620004e157600080fd5b620004ef8a828b016200043a565b9650506040620005028a828b0162000467565b9550506060620005158a828b0162000467565b9450506080620005288a828b0162000423565b93505060a088015167ffffffffffffffff8111156200054657600080fd5b620005548a828b016200043a565b92505060c088015167ffffffffffffffff8111156200057257600080fd5b620005808a828b016200043a565b91505092959891949750929550565b60006200059e604983620007ba565b91507f6d617845646974696f6e206f66206561636820617274776f726b20696e20616e60008301527f2065786869626974696f6e206e6565647320746f20626520677265617465722060208301527f7468616e207a65726f00000000000000000000000000000000000000000000006040830152606082019050919050565b60006200062c601e83620007ba565b91507f696e76616c696420726f79616c7479207061796f7574206164647265737300006000830152602082019050919050565b60006200066e604f83620007ba565b91507f726f79616c74792042505320666f72207365636f6e646172792073616c65732060008301527f63616e206e6f742062652067726561746572207468616e20746865206d61786960208301527f6d756d20726f79616c74792042505300000000000000000000000000000000006040830152606082019050919050565b6000602082019050818103600083015262000708816200058f565b9050919050565b600060208201905081810360008301526200072a816200061d565b9050919050565b600060208201905081810360008301526200074c816200065f565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156200077d576200077c620008a4565b5b8060405250919050565b600067ffffffffffffffff821115620007a557620007a4620008a4565b5b601f19601f8301169050602081019050919050565b600082825260208201905092915050565b6000620007d882620007df565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620008295780820151818401526020810190506200080c565b8381111562000839576000848401525b50505050565b600060028204905060018216806200085857607f821691505b602082108114156200086f576200086e62000875565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620008de81620007cb565b8114620008ea57600080fd5b50565b620008f881620007ff565b81146200090457600080fd5b50565b60805160a0516152c86200093b60003960008181610cf30152612407015260008181610f800152611cae01526152c86000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c8063715018a611610130578063c87b56dd116100b8578063ea211d7c1161007c578063ea211d7c146106da578063ec9cbb44146106f8578063f2fde38b14610716578063fdf97cb214610732578063fe2a3bf31461075057610232565b8063c87b56dd14610622578063d0d1ea7014610652578063e4a233e11461066e578063e8a3d4851461068c578063e985e9c5146106aa57610232565b80638ef79e91116100ff5780638ef79e911461058057806395d89b411461059c578063a22cb465146105ba578063b4883703146105d6578063b88d4fde1461060657610232565b8063715018a61461051e5780637f34c0dd1461052857806384ad61af146105445780638da5cb5b1461056257610232565b80633afb021a116101be5780634f6ccce7116101825780634f6ccce71461042d57806362fe21311461045d5780636352211e1461048e578063641b18e9146104be57806370a08231146104ee57610232565b80633afb021a146103885780633f6805ba146103a457806342842e0e146103c257806345aeefde146103de5780634b602673146103fa57610232565b80630cfcb5f1116102055780630cfcb5f1146102d157806318160ddd146102ed57806323b872dd1461030b5780632a55205a146103275780632f745c591461035857610232565b806301ffc9a71461023757806306fdde0314610267578063081812fc14610285578063095ea7b3146102b5575b600080fd5b610251600480360381019061024c91906138c1565b610780565b60405161025e9190614961565b60405180910390f35b61026f6107fa565b60405161027c919061497c565b60405180910390f35b61029f600480360381019061029a91906139ff565b61088c565b6040516102ac91906148d1565b60405180910390f35b6102cf60048036038101906102ca9190613885565b610911565b005b6102eb60048036038101906102e69190613a28565b610a29565b005b6102f5610c11565b6040516103029190614e38565b60405180910390f35b6103256004803603810190610320919061377f565b610c1e565b005b610341600480360381019061033c9190613a7c565b610c7e565b60405161034f929190614938565b60405180910390f35b610372600480360381019061036d9190613885565b610d30565b60405161037f9190614e38565b60405180910390f35b6103a2600480360381019061039d9190613954565b610dd5565b005b6103ac61116f565b6040516103b991906148d1565b60405180910390f35b6103dc60048036038101906103d7919061377f565b611195565b005b6103f860048036038101906103f3919061371a565b6111b5565b005b610414600480360381019061040f91906139ff565b611300565b604051610424949392919061499e565b60405180910390f35b610447600480360381019061044291906139ff565b6114c8565b6040516104549190614e38565b60405180910390f35b610477600480360381019061047291906139ff565b61155f565b604051610485929190614e53565b60405180910390f35b6104a860048036038101906104a391906139ff565b61160b565b6040516104b591906148d1565b60405180910390f35b6104d860048036038101906104d39190613a7c565b6116bd565b6040516104e59190614e38565b60405180910390f35b6105086004803603810190610503919061371a565b611731565b6040516105159190614e38565b60405180910390f35b6105266117e9565b005b610542600480360381019061053d9190613ab8565b611871565b005b61054c611cac565b6040516105599190614e38565b60405180910390f35b61056a611cd0565b60405161057791906148d1565b60405180910390f35b61059a60048036038101906105959190613913565b611cfa565b005b6105a4611dab565b6040516105b1919061497c565b60405180910390f35b6105d460048036038101906105cf9190613849565b611e3d565b005b6105f060048036038101906105eb91906139ff565b611fbe565b6040516105fd9190614e38565b60405180910390f35b610620600480360381019061061b91906137ce565b612055565b005b61063c600480360381019061063791906139ff565b6120b7565b604051610649919061497c565b60405180910390f35b61066c6004803603810190610667919061371a565b612212565b005b6106766122d2565b6040516106839190614e38565b60405180910390f35b6106946122df565b6040516106a1919061497c565b60405180910390f35b6106c460048036038101906106bf9190613743565b612371565b6040516106d19190614961565b60405180910390f35b6106e2612405565b6040516106ef9190614e38565b60405180910390f35b610700612429565b60405161070d9190614e38565b60405180910390f35b610730600480360381019061072b919061371a565b61242f565b005b61073a612527565b60405161074791906148d1565b60405180910390f35b61076a600480360381019061076591906139ff565b61254d565b6040516107779190614e38565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107f357506107f28261256d565b5b9050919050565b60606000805461080990615137565b80601f016020809104026020016040519081016040528092919081815260200182805461083590615137565b80156108825780601f1061085757610100808354040283529160200191610882565b820191906000526020600020905b81548152906001019060200180831161086557829003601f168201915b5050505050905090565b6000610897826125e7565b6108d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cd90614c78565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061091c8261160b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561098d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098490614d58565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109ac612653565b73ffffffffffffffffffffffffffffffffffffffff1614806109db57506109da816109d5612653565b612371565b5b610a1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1190614bd8565b60405180910390fd5b610a24838361265b565b505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ab75750610a88611cd0565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610ac057600080fd5b610ac9826125e7565b610b08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aff90614bb8565b60405180910390fd5b601481604051610b189190614874565b908152602001604051809103902060009054906101000a900460ff1615610b74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6b90614df8565b60405180910390fd5b6000601160008481526020019081526020016000209050601481600101604051610b9e91906148ba565b908152602001604051809103902060006101000a81549060ff02191690556001601483604051610bce9190614874565b908152602001604051809103902060006101000a81548160ff02191690831515021790555081816001019080519060200190610c0b92919061353e565b50505050565b6000600880549050905090565b610c2f610c29612653565b82612714565b610c6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6590614d78565b60405180910390fd5b610c798383836127f2565b505050565b600080610c8a846125e7565b610cc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc090614a58565b60405180910390fd5b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506127107f000000000000000000000000000000000000000000000000000000000000000084610d1d9190614ff3565b610d279190614fc2565b90509250929050565b6000610d3b83611731565b8210610d7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7390614a18565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610e635750610e34611cd0565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610e6c57600080fd5b600083511415610eb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea890614b98565b60405180910390fd5b600082511415610ef6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eed90614b58565b60405180910390fd5b600084511415610f3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3290614dd8565b60405180910390fd5b60008111610f7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7590614e18565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000811115610fe1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd890614a78565b60405180910390fd5b600084604051602001610ff4919061497c565b6040516020818303038152906040528051906020012060001c9050600060106000838152602001908152602001600020600201805461103290615137565b905014611074576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106b90614cd8565b60405180910390fd5b60006040518060800160405280878152602001868152602001858152602001848152509050600f829080600181540180825580915050600190039060005260206000200160009091909190915055806010600084815260200190815260200160002060008201518160000190805190602001906110f292919061353e565b50602082015181600101908051906020019061110f92919061353e565b50604082015181600201908051906020019061112c92919061353e565b5060608201518160030155905050817f22350b25f1b72bb3621199a79abefeb4fcd77bb1e65638cd09350666e4db089160405160405180910390a2505050505050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6111b083838360405180602001604052806000815250612055565b505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806112435750611214611cd0565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61124c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b390614ad8565b60405180910390fd5b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b601060205280600052604060002060009150905080600001805461132390615137565b80601f016020809104026020016040519081016040528092919081815260200182805461134f90615137565b801561139c5780601f106113715761010080835404028352916020019161139c565b820191906000526020600020905b81548152906001019060200180831161137f57829003601f168201915b5050505050908060010180546113b190615137565b80601f01602080910402602001604051908101604052809291908181526020018280546113dd90615137565b801561142a5780601f106113ff5761010080835404028352916020019161142a565b820191906000526020600020905b81548152906001019060200180831161140d57829003601f168201915b50505050509080600201805461143f90615137565b80601f016020809104026020016040519081016040528092919081815260200182805461146b90615137565b80156114b85780601f1061148d576101008083540402835291602001916114b8565b820191906000526020600020905b81548152906001019060200180831161149b57829003601f168201915b5050505050908060030154905084565b60006114d2610c11565b8210611513576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150a90614d98565b60405180910390fd5b6008828154811061154d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b601160205280600052604060002060009150905080600001549080600101805461158890615137565b80601f01602080910402602001604051908101604052809291908181526020018280546115b490615137565b80156116015780601f106115d657610100808354040283529160200191611601565b820191906000526020600020905b8154815290600101906020018083116115e457829003601f168201915b5050505050905082565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ab90614c18565b60405180910390fd5b80915050919050565b60006116c88361254d565b82106116d357600080fd5b60126000848152602001908152602001600020828154811061171e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179990614bf8565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6117f1612653565b73ffffffffffffffffffffffffffffffffffffffff1661180f611cd0565b73ffffffffffffffffffffffffffffffffffffffff1614611865576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185c90614c98565b60405180910390fd5b61186f6000612a4e565b565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806118ff57506118d0611cd0565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61190857600080fd5b6000601060008781526020019081526020016000206003015411611961576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195890614af8565b60405180910390fd5b60106000868152602001908152602001600020600301548311156119ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b190614d18565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a21906149f8565b60405180910390fd5b6013600085815260200190815260200160002060009054906101000a900460ff1615611a8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8290614d38565b60405180910390fd5b601481604051611a9b9190614874565b908152602001604051809103902060009054906101000a900460ff1615611af7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aee90614df8565b60405180910390fd5b60008386611b059190614f6c565b90506000601160008381526020019081526020016000206000015414611b60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5790614c38565b60405180910390fd5b600060405180604001604052808381526020018481525090508060116000848152602001908152602001600020600082015181600001556020820151816001019080519060200190611bb392919061353e565b509050506012600088815260200190815260200160002082908060018154018082558091505060019003906000526020600020016000909190919091505560016013600088815260200190815260200160002060006101000a81548160ff0219169083151502179055506001601484604051611c2f9190614874565b908152602001604051809103902060006101000a81548160ff021916908315150217905550611c5e8483612b14565b81878573ffffffffffffffffffffffffffffffffffffffff167f4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd460405160405180910390a450505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611d885750611d59611cd0565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611d9157600080fd5b80600d9080519060200190611da792919061353e565b5050565b606060018054611dba90615137565b80601f0160208091040260200160405190810160405280929190818152602001828054611de690615137565b8015611e335780601f10611e0857610100808354040283529160200191611e33565b820191906000526020600020905b815481529060010190602001808311611e1657829003601f168201915b5050505050905090565b611e45612653565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611eb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eaa90614b38565b60405180910390fd5b8060056000611ec0612653565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611f6d612653565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611fb29190614961565b60405180910390a35050565b6000611fc86122d2565b8210612009576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200090614db8565b60405180910390fd5b600f8281548110612043577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b612066612060612653565b83612714565b6120a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209c90614d78565b60405180910390fd5b6120b184848484612b32565b50505050565b60606120c2826125e7565b612101576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f890614cf8565b60405180910390fd5b6000600d805461211090615137565b80601f016020809104026020016040519081016040528092919081815260200182805461213c90615137565b80156121895780601f1061215e57610100808354040283529160200191612189565b820191906000526020600020905b81548152906001019060200180831161216c57829003601f168201915b505050505090506000815114156121d3576040518060400160405280600781526020017f697066733a2f2f0000000000000000000000000000000000000000000000000081525090505b80601160008581526020019081526020016000206001016040516020016121fb92919061488b565b604051602081830303815290604052915050919050565b61221a612653565b73ffffffffffffffffffffffffffffffffffffffff16612238611cd0565b73ffffffffffffffffffffffffffffffffffffffff161461228e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161228590614c98565b60405180910390fd5b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600f80549050905090565b6060600e80546122ee90615137565b80601f016020809104026020016040519081016040528092919081815260200182805461231a90615137565b80156123675780601f1061233c57610100808354040283529160200191612367565b820191906000526020600020905b81548152906001019060200180831161234a57829003601f168201915b5050505050905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61271081565b612437612653565b73ffffffffffffffffffffffffffffffffffffffff16612455611cd0565b73ffffffffffffffffffffffffffffffffffffffff16146124ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a290614c98565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561251b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251290614a98565b60405180910390fd5b61252481612a4e565b50565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060126000838152602001908152602001600020805490509050919050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806125e057506125df82612b8e565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166126ce8361160b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061271f826125e7565b61275e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275590614b78565b60405180910390fd5b60006127698361160b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806127d857508373ffffffffffffffffffffffffffffffffffffffff166127c08461088c565b73ffffffffffffffffffffffffffffffffffffffff16145b806127e957506127e88185612371565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166128128261160b565b73ffffffffffffffffffffffffffffffffffffffff1614612868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285f90614cb8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156128d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128cf90614b18565b60405180910390fd5b6128e3838383612c70565b6128ee60008261265b565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461293e919061504d565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546129959190614f6c565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612b2e828260405180602001604052806000815250612d84565b5050565b612b3d8484846127f2565b612b4984848484612ddf565b612b88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b7f90614a38565b60405180910390fd5b50505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612c5957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612c695750612c6882612f76565b5b9050919050565b612c7b838383612fe0565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612cbe57612cb981612fe5565b612cfd565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612cfc57612cfb838261302e565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612d4057612d3b8161319b565b612d7f565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612d7e57612d7d82826132de565b5b5b505050565b612d8e838361335d565b612d9b6000848484612ddf565b612dda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dd190614a38565b60405180910390fd5b505050565b6000612e008473ffffffffffffffffffffffffffffffffffffffff1661352b565b15612f69578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612e29612653565b8786866040518563ffffffff1660e01b8152600401612e4b94939291906148ec565b602060405180830381600087803b158015612e6557600080fd5b505af1925050508015612e9657506040513d601f19601f82011682018060405250810190612e9391906138ea565b60015b612f19573d8060008114612ec6576040519150601f19603f3d011682016040523d82523d6000602084013e612ecb565b606091505b50600081511415612f11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f0890614a38565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612f6e565b600190505b949350505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161303b84611731565b613045919061504d565b905060006007600084815260200190815260200160002054905081811461312a576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506131af919061504d565b9050600060096000848152602001908152602001600020549050600060088381548110613205577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050806008838154811061324d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200181905550816009600083815260200190815260200160002081905550600960008581526020019081526020016000206000905560088054806132c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006132e983611731565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156133cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133c490614c58565b60405180910390fd5b6133d6816125e7565b15613416576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161340d90614ab8565b60405180910390fd5b61342260008383612c70565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546134729190614f6c565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b82805461354a90615137565b90600052602060002090601f01602090048101928261356c57600085556135b3565b82601f1061358557805160ff19168380011785556135b3565b828001600101855582156135b3579182015b828111156135b2578251825591602001919060010190613597565b5b5090506135c091906135c4565b5090565b5b808211156135dd5760008160009055506001016135c5565b5090565b60006135f46135ef84614eb4565b614e83565b90508281526020810184848401111561360c57600080fd5b6136178482856150f5565b509392505050565b600061363261362d84614ee4565b614e83565b90508281526020810184848401111561364a57600080fd5b6136558482856150f5565b509392505050565b60008135905061366c81615236565b92915050565b6000813590506136818161524d565b92915050565b60008135905061369681615264565b92915050565b6000815190506136ab81615264565b92915050565b600082601f8301126136c257600080fd5b81356136d28482602086016135e1565b91505092915050565b600082601f8301126136ec57600080fd5b81356136fc84826020860161361f565b91505092915050565b6000813590506137148161527b565b92915050565b60006020828403121561372c57600080fd5b600061373a8482850161365d565b91505092915050565b6000806040838503121561375657600080fd5b60006137648582860161365d565b92505060206137758582860161365d565b9150509250929050565b60008060006060848603121561379457600080fd5b60006137a28682870161365d565b93505060206137b38682870161365d565b92505060406137c486828701613705565b9150509250925092565b600080600080608085870312156137e457600080fd5b60006137f28782880161365d565b94505060206138038782880161365d565b935050604061381487828801613705565b925050606085013567ffffffffffffffff81111561383157600080fd5b61383d878288016136b1565b91505092959194509250565b6000806040838503121561385c57600080fd5b600061386a8582860161365d565b925050602061387b85828601613672565b9150509250929050565b6000806040838503121561389857600080fd5b60006138a68582860161365d565b92505060206138b785828601613705565b9150509250929050565b6000602082840312156138d357600080fd5b60006138e184828501613687565b91505092915050565b6000602082840312156138fc57600080fd5b600061390a8482850161369c565b91505092915050565b60006020828403121561392557600080fd5b600082013567ffffffffffffffff81111561393f57600080fd5b61394b848285016136db565b91505092915050565b6000806000806080858703121561396a57600080fd5b600085013567ffffffffffffffff81111561398457600080fd5b613990878288016136db565b945050602085013567ffffffffffffffff8111156139ad57600080fd5b6139b9878288016136db565b935050604085013567ffffffffffffffff8111156139d657600080fd5b6139e2878288016136db565b92505060606139f387828801613705565b91505092959194509250565b600060208284031215613a1157600080fd5b6000613a1f84828501613705565b91505092915050565b60008060408385031215613a3b57600080fd5b6000613a4985828601613705565b925050602083013567ffffffffffffffff811115613a6657600080fd5b613a72858286016136db565b9150509250929050565b60008060408385031215613a8f57600080fd5b6000613a9d85828601613705565b9250506020613aae85828601613705565b9150509250929050565b600080600080600060a08688031215613ad057600080fd5b6000613ade88828901613705565b9550506020613aef88828901613705565b9450506040613b0088828901613705565b9350506060613b118882890161365d565b925050608086013567ffffffffffffffff811115613b2e57600080fd5b613b3a888289016136db565b9150509295509295909350565b613b5081615081565b82525050565b613b5f81615093565b82525050565b6000613b7082614f29565b613b7a8185614f3f565b9350613b8a818560208601615104565b613b9381615225565b840191505092915050565b6000613ba982614f34565b613bb38185614f50565b9350613bc3818560208601615104565b613bcc81615225565b840191505092915050565b6000613be282614f34565b613bec8185614f61565b9350613bfc818560208601615104565b80840191505092915050565b60008154613c1581615137565b613c1f8186614f61565b94506001821660008114613c3a5760018114613c4b57613c7e565b60ff19831686528186019350613c7e565b613c5485614f14565b60005b83811015613c7657815481890152600182019150602081019050613c57565b838801955050505b50505092915050565b6000613c94601583614f50565b91507f696e76616c6964206f776e6572206164647265737300000000000000000000006000830152602082019050919050565b6000613cd4602b83614f50565b91507f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008301527f74206f6620626f756e64730000000000000000000000000000000000000000006020830152604082019050919050565b6000613d3a603283614f50565b91507f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008301527f63656976657220696d706c656d656e74657200000000000000000000000000006020830152604082019050919050565b6000613da0603183614f50565b91507f455243323938313a20717565727920726f79616c747920696e666f20666f722060008301527f6e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006020830152604082019050919050565b6000613e06604783614f50565b91507f617274776f726b2065646974696f6e2073697a6520657863656564732074686560008301527f206d6178696d756d2065646974696f6e2073697a65206f66207468652065786860208301527f69626974696f6e000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000613e92602683614f50565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613ef8601c83614f50565b91507f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006000830152602082019050919050565b6000613f38600e83614f61565b91507f2f6d657461646174612e6a736f6e0000000000000000000000000000000000006000830152600e82019050919050565b6000613f78601e83614f50565b91507f696e76616c696420726f79616c7479207061796f7574206164647265737300006000830152602082019050919050565b6000613fb8601483614f50565b91507f617274776f726b206973206e6f7420666f756e640000000000000000000000006000830152602082019050919050565b6000613ff8602483614f50565b91507f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061405e601983614f50565b91507f4552433732313a20617070726f766520746f2063616c6c6572000000000000006000830152602082019050919050565b600061409e601783614f50565b91507f6172746973742063616e206e6f7420626520656d7074790000000000000000006000830152602082019050919050565b60006140de602c83614f50565b91507f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b6000614144601683614f50565b91507f7469746c652063616e206e6f7420626520656d707479000000000000000000006000830152602082019050919050565b6000614184601c83614f50565b91507f617274776f726b2065646974696f6e206973206e6f7420666f756e64000000006000830152602082019050919050565b60006141c4603883614f50565b91507f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020830152604082019050919050565b600061422a602a83614f50565b91507f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b6000614290602983614f50565b91507f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008301527f656e7420746f6b656e00000000000000000000000000000000000000000000006020830152604082019050919050565b60006142f6601783614f50565b91507f7468652065646974696f6e206973206578697374656e740000000000000000006000830152602082019050919050565b6000614336602083614f50565b91507f4552433732313a206d696e7420746f20746865207a65726f20616464726573736000830152602082019050919050565b6000614376602c83614f50565b91507f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b60006143dc602083614f50565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600061441c602983614f50565b91507f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008301527f73206e6f74206f776e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000614482603b83614f50565b91507f616e20617274776f726b2077697468207468652073616d652066696e6765727060008301527f72696e742068617320616c7265616479207265676973746572656400000000006020830152604082019050919050565b60006144e8602f83614f50565b91507f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008301527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006020830152604082019050919050565b600061454e603583614f50565b91507f65646974696f6e206e756d62657220657863656564207468652065646974696f60008301527f6e2073697a65206f662074686520617274776f726b00000000000000000000006020830152604082019050919050565b60006145b4601983614f50565b91507f6269746d61726b206964206861732072656769737465726564000000000000006000830152602082019050919050565b60006145f4602183614f50565b91507f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061465a603183614f50565b91507f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020830152604082019050919050565b60006146c0602c83614f50565b91507f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008301527f7574206f6620626f756e647300000000000000000000000000000000000000006020830152604082019050919050565b6000614726602483614f50565b91507f617274776f726b733a20676c6f62616c20696e646578206f7574206f6620626f60008301527f756e6473000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061478c601c83614f50565b91507f66696e6765727072696e742063616e206e6f7420626520656d707479000000006000830152602082019050919050565b60006147cc601683614f50565b91507f69706673206964206861732072656769737465726564000000000000000000006000830152602082019050919050565b600061480c602383614f50565b91507f65646974696f6e2073697a65206e6565647320746f206265206174206c65617360008301527f74203100000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b61486e816150eb565b82525050565b60006148808284613bd7565b915081905092915050565b60006148978285613bd7565b91506148a38284613c08565b91506148ae82613f2b565b91508190509392505050565b60006148c68284613c08565b915081905092915050565b60006020820190506148e66000830184613b47565b92915050565b60006080820190506149016000830187613b47565b61490e6020830186613b47565b61491b6040830185614865565b818103606083015261492d8184613b65565b905095945050505050565b600060408201905061494d6000830185613b47565b61495a6020830184614865565b9392505050565b60006020820190506149766000830184613b56565b92915050565b600060208201905081810360008301526149968184613b9e565b905092915050565b600060808201905081810360008301526149b88187613b9e565b905081810360208301526149cc8186613b9e565b905081810360408301526149e08185613b9e565b90506149ef6060830184614865565b95945050505050565b60006020820190508181036000830152614a1181613c87565b9050919050565b60006020820190508181036000830152614a3181613cc7565b9050919050565b60006020820190508181036000830152614a5181613d2d565b9050919050565b60006020820190508181036000830152614a7181613d93565b9050919050565b60006020820190508181036000830152614a9181613df9565b9050919050565b60006020820190508181036000830152614ab181613e85565b9050919050565b60006020820190508181036000830152614ad181613eeb565b9050919050565b60006020820190508181036000830152614af181613f6b565b9050919050565b60006020820190508181036000830152614b1181613fab565b9050919050565b60006020820190508181036000830152614b3181613feb565b9050919050565b60006020820190508181036000830152614b5181614051565b9050919050565b60006020820190508181036000830152614b7181614091565b9050919050565b60006020820190508181036000830152614b91816140d1565b9050919050565b60006020820190508181036000830152614bb181614137565b9050919050565b60006020820190508181036000830152614bd181614177565b9050919050565b60006020820190508181036000830152614bf1816141b7565b9050919050565b60006020820190508181036000830152614c118161421d565b9050919050565b60006020820190508181036000830152614c3181614283565b9050919050565b60006020820190508181036000830152614c51816142e9565b9050919050565b60006020820190508181036000830152614c7181614329565b9050919050565b60006020820190508181036000830152614c9181614369565b9050919050565b60006020820190508181036000830152614cb1816143cf565b9050919050565b60006020820190508181036000830152614cd18161440f565b9050919050565b60006020820190508181036000830152614cf181614475565b9050919050565b60006020820190508181036000830152614d11816144db565b9050919050565b60006020820190508181036000830152614d3181614541565b9050919050565b60006020820190508181036000830152614d51816145a7565b9050919050565b60006020820190508181036000830152614d71816145e7565b9050919050565b60006020820190508181036000830152614d918161464d565b9050919050565b60006020820190508181036000830152614db1816146b3565b9050919050565b60006020820190508181036000830152614dd181614719565b9050919050565b60006020820190508181036000830152614df18161477f565b9050919050565b60006020820190508181036000830152614e11816147bf565b9050919050565b60006020820190508181036000830152614e31816147ff565b9050919050565b6000602082019050614e4d6000830184614865565b92915050565b6000604082019050614e686000830185614865565b8181036020830152614e7a8184613b9e565b90509392505050565b6000604051905081810181811067ffffffffffffffff82111715614eaa57614ea96151f6565b5b8060405250919050565b600067ffffffffffffffff821115614ecf57614ece6151f6565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115614eff57614efe6151f6565b5b601f19601f8301169050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614f77826150eb565b9150614f82836150eb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614fb757614fb6615169565b5b828201905092915050565b6000614fcd826150eb565b9150614fd8836150eb565b925082614fe857614fe7615198565b5b828204905092915050565b6000614ffe826150eb565b9150615009836150eb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561504257615041615169565b5b828202905092915050565b6000615058826150eb565b9150615063836150eb565b92508282101561507657615075615169565b5b828203905092915050565b600061508c826150cb565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015615122578082015181840152602081019050615107565b83811115615131576000848401525b50505050565b6000600282049050600182168061514f57607f821691505b60208210811415615163576151626151c7565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61523f81615081565b811461524a57600080fd5b50565b61525681615093565b811461526157600080fd5b50565b61526d8161509f565b811461527857600080fd5b50565b615284816150eb565b811461528f57600080fd5b5056fea26469706673582212201777040940f2ca923b2e178d0dae1411a802480a62ad5a4b19bf602f7a605ee064736f6c63430008000033"

// DeployFeralfileExhibitionV2 deploys a new Ethereum contract, binding an instance of FeralfileExhibitionV2 to it.
func DeployFeralfileExhibitionV2(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string, maxEditionPerArtwork_ *big.Int, secondarySaleRoyaltyBPS_ *big.Int, royaltyPayoutAddress_ common.Address, contractURI_ string, tokenBaseURI_ string) (common.Address, *types.Transaction, *FeralfileExhibitionV2, error) {
	parsed, err := abi.JSON(strings.NewReader(FeralfileExhibitionV2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(FeralfileExhibitionV2Bin), backend, name_, symbol_, maxEditionPerArtwork_, secondarySaleRoyaltyBPS_, royaltyPayoutAddress_, contractURI_, tokenBaseURI_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FeralfileExhibitionV2{FeralfileExhibitionV2Caller: FeralfileExhibitionV2Caller{contract: contract}, FeralfileExhibitionV2Transactor: FeralfileExhibitionV2Transactor{contract: contract}, FeralfileExhibitionV2Filterer: FeralfileExhibitionV2Filterer{contract: contract}}, nil
}

// FeralfileExhibitionV2 is an auto generated Go binding around an Ethereum contract.
type FeralfileExhibitionV2 struct {
	FeralfileExhibitionV2Caller     // Read-only binding to the contract
	FeralfileExhibitionV2Transactor // Write-only binding to the contract
	FeralfileExhibitionV2Filterer   // Log filterer for contract events
}

// FeralfileExhibitionV2Caller is an auto generated read-only Go binding around an Ethereum contract.
type FeralfileExhibitionV2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionV2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type FeralfileExhibitionV2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionV2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FeralfileExhibitionV2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionV2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FeralfileExhibitionV2Session struct {
	Contract     *FeralfileExhibitionV2 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// FeralfileExhibitionV2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FeralfileExhibitionV2CallerSession struct {
	Contract *FeralfileExhibitionV2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// FeralfileExhibitionV2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FeralfileExhibitionV2TransactorSession struct {
	Contract     *FeralfileExhibitionV2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// FeralfileExhibitionV2Raw is an auto generated low-level Go binding around an Ethereum contract.
type FeralfileExhibitionV2Raw struct {
	Contract *FeralfileExhibitionV2 // Generic contract binding to access the raw methods on
}

// FeralfileExhibitionV2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FeralfileExhibitionV2CallerRaw struct {
	Contract *FeralfileExhibitionV2Caller // Generic read-only contract binding to access the raw methods on
}

// FeralfileExhibitionV2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FeralfileExhibitionV2TransactorRaw struct {
	Contract *FeralfileExhibitionV2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewFeralfileExhibitionV2 creates a new instance of FeralfileExhibitionV2, bound to a specific deployed contract.
func NewFeralfileExhibitionV2(address common.Address, backend bind.ContractBackend) (*FeralfileExhibitionV2, error) {
	contract, err := bindFeralfileExhibitionV2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2{FeralfileExhibitionV2Caller: FeralfileExhibitionV2Caller{contract: contract}, FeralfileExhibitionV2Transactor: FeralfileExhibitionV2Transactor{contract: contract}, FeralfileExhibitionV2Filterer: FeralfileExhibitionV2Filterer{contract: contract}}, nil
}

// NewFeralfileExhibitionV2Caller creates a new read-only instance of FeralfileExhibitionV2, bound to a specific deployed contract.
func NewFeralfileExhibitionV2Caller(address common.Address, caller bind.ContractCaller) (*FeralfileExhibitionV2Caller, error) {
	contract, err := bindFeralfileExhibitionV2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2Caller{contract: contract}, nil
}

// NewFeralfileExhibitionV2Transactor creates a new write-only instance of FeralfileExhibitionV2, bound to a specific deployed contract.
func NewFeralfileExhibitionV2Transactor(address common.Address, transactor bind.ContractTransactor) (*FeralfileExhibitionV2Transactor, error) {
	contract, err := bindFeralfileExhibitionV2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2Transactor{contract: contract}, nil
}

// NewFeralfileExhibitionV2Filterer creates a new log filterer instance of FeralfileExhibitionV2, bound to a specific deployed contract.
func NewFeralfileExhibitionV2Filterer(address common.Address, filterer bind.ContractFilterer) (*FeralfileExhibitionV2Filterer, error) {
	contract, err := bindFeralfileExhibitionV2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2Filterer{contract: contract}, nil
}

// bindFeralfileExhibitionV2 binds a generic wrapper to an already deployed contract.
func bindFeralfileExhibitionV2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FeralfileExhibitionV2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeralfileExhibitionV2.Contract.FeralfileExhibitionV2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.FeralfileExhibitionV2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.FeralfileExhibitionV2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeralfileExhibitionV2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.contract.Transact(opts, method, params...)
}

// MAXROYALITYBPS is a free data retrieval call binding the contract method 0xec9cbb44.
//
// Solidity: function MAX_ROYALITY_BPS() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) MAXROYALITYBPS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "MAX_ROYALITY_BPS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXROYALITYBPS is a free data retrieval call binding the contract method 0xec9cbb44.
//
// Solidity: function MAX_ROYALITY_BPS() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) MAXROYALITYBPS() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.MAXROYALITYBPS(&_FeralfileExhibitionV2.CallOpts)
}

// MAXROYALITYBPS is a free data retrieval call binding the contract method 0xec9cbb44.
//
// Solidity: function MAX_ROYALITY_BPS() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) MAXROYALITYBPS() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.MAXROYALITYBPS(&_FeralfileExhibitionV2.CallOpts)
}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, string ipfsCID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) ArtworkEditions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	EditionID *big.Int
	IpfsCID   string
}, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "artworkEditions", arg0)

	outstruct := new(struct {
		EditionID *big.Int
		IpfsCID   string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.EditionID = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.IpfsCID = *abi.ConvertType(out[1], new(string)).(*string)

	return *outstruct, err

}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, string ipfsCID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) ArtworkEditions(arg0 *big.Int) (struct {
	EditionID *big.Int
	IpfsCID   string
}, error) {
	return _FeralfileExhibitionV2.Contract.ArtworkEditions(&_FeralfileExhibitionV2.CallOpts, arg0)
}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, string ipfsCID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) ArtworkEditions(arg0 *big.Int) (struct {
	EditionID *big.Int
	IpfsCID   string
}, error) {
	return _FeralfileExhibitionV2.Contract.ArtworkEditions(&_FeralfileExhibitionV2.CallOpts, arg0)
}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string title, string artistName, string fingerprint, uint256 editionSize)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) Artworks(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Title       string
	ArtistName  string
	Fingerprint string
	EditionSize *big.Int
}, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "artworks", arg0)

	outstruct := new(struct {
		Title       string
		ArtistName  string
		Fingerprint string
		EditionSize *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Title = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.ArtistName = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Fingerprint = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.EditionSize = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string title, string artistName, string fingerprint, uint256 editionSize)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) Artworks(arg0 *big.Int) (struct {
	Title       string
	ArtistName  string
	Fingerprint string
	EditionSize *big.Int
}, error) {
	return _FeralfileExhibitionV2.Contract.Artworks(&_FeralfileExhibitionV2.CallOpts, arg0)
}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string title, string artistName, string fingerprint, uint256 editionSize)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) Artworks(arg0 *big.Int) (struct {
	Title       string
	ArtistName  string
	Fingerprint string
	EditionSize *big.Int
}, error) {
	return _FeralfileExhibitionV2.Contract.Artworks(&_FeralfileExhibitionV2.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.BalanceOf(&_FeralfileExhibitionV2.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.BalanceOf(&_FeralfileExhibitionV2.CallOpts, owner)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) ContractURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "contractURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) ContractURI() (string, error) {
	return _FeralfileExhibitionV2.Contract.ContractURI(&_FeralfileExhibitionV2.CallOpts)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) ContractURI() (string, error) {
	return _FeralfileExhibitionV2.Contract.ContractURI(&_FeralfileExhibitionV2.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.GetApproved(&_FeralfileExhibitionV2.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.GetApproved(&_FeralfileExhibitionV2.CallOpts, tokenId)
}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) GetArtworkByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "getArtworkByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) GetArtworkByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.GetArtworkByIndex(&_FeralfileExhibitionV2.CallOpts, index)
}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) GetArtworkByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.GetArtworkByIndex(&_FeralfileExhibitionV2.CallOpts, index)
}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) GetArtworkEditionByIndex(opts *bind.CallOpts, artworkID *big.Int, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "getArtworkEditionByIndex", artworkID, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) GetArtworkEditionByIndex(artworkID *big.Int, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.GetArtworkEditionByIndex(&_FeralfileExhibitionV2.CallOpts, artworkID, index)
}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) GetArtworkEditionByIndex(artworkID *big.Int, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.GetArtworkEditionByIndex(&_FeralfileExhibitionV2.CallOpts, artworkID, index)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _FeralfileExhibitionV2.Contract.IsApprovedForAll(&_FeralfileExhibitionV2.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _FeralfileExhibitionV2.Contract.IsApprovedForAll(&_FeralfileExhibitionV2.CallOpts, owner, operator)
}

// MaxEditionPerArtwork is a free data retrieval call binding the contract method 0x84ad61af.
//
// Solidity: function maxEditionPerArtwork() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) MaxEditionPerArtwork(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "maxEditionPerArtwork")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxEditionPerArtwork is a free data retrieval call binding the contract method 0x84ad61af.
//
// Solidity: function maxEditionPerArtwork() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) MaxEditionPerArtwork() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.MaxEditionPerArtwork(&_FeralfileExhibitionV2.CallOpts)
}

// MaxEditionPerArtwork is a free data retrieval call binding the contract method 0x84ad61af.
//
// Solidity: function maxEditionPerArtwork() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) MaxEditionPerArtwork() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.MaxEditionPerArtwork(&_FeralfileExhibitionV2.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) Name() (string, error) {
	return _FeralfileExhibitionV2.Contract.Name(&_FeralfileExhibitionV2.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) Name() (string, error) {
	return _FeralfileExhibitionV2.Contract.Name(&_FeralfileExhibitionV2.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) Owner() (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.Owner(&_FeralfileExhibitionV2.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) Owner() (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.Owner(&_FeralfileExhibitionV2.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.OwnerOf(&_FeralfileExhibitionV2.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.OwnerOf(&_FeralfileExhibitionV2.CallOpts, tokenId)
}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 tokenId, uint256 salePrice) view returns(address receiver, uint256 royaltyAmount)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) RoyaltyInfo(opts *bind.CallOpts, tokenId *big.Int, salePrice *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "royaltyInfo", tokenId, salePrice)

	outstruct := new(struct {
		Receiver      common.Address
		RoyaltyAmount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Receiver = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.RoyaltyAmount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 tokenId, uint256 salePrice) view returns(address receiver, uint256 royaltyAmount)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) RoyaltyInfo(tokenId *big.Int, salePrice *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	return _FeralfileExhibitionV2.Contract.RoyaltyInfo(&_FeralfileExhibitionV2.CallOpts, tokenId, salePrice)
}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 tokenId, uint256 salePrice) view returns(address receiver, uint256 royaltyAmount)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) RoyaltyInfo(tokenId *big.Int, salePrice *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	return _FeralfileExhibitionV2.Contract.RoyaltyInfo(&_FeralfileExhibitionV2.CallOpts, tokenId, salePrice)
}

// RoyaltyPayoutAddress is a free data retrieval call binding the contract method 0x3f6805ba.
//
// Solidity: function royaltyPayoutAddress() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) RoyaltyPayoutAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "royaltyPayoutAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RoyaltyPayoutAddress is a free data retrieval call binding the contract method 0x3f6805ba.
//
// Solidity: function royaltyPayoutAddress() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) RoyaltyPayoutAddress() (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.RoyaltyPayoutAddress(&_FeralfileExhibitionV2.CallOpts)
}

// RoyaltyPayoutAddress is a free data retrieval call binding the contract method 0x3f6805ba.
//
// Solidity: function royaltyPayoutAddress() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) RoyaltyPayoutAddress() (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.RoyaltyPayoutAddress(&_FeralfileExhibitionV2.CallOpts)
}

// SecondarySaleRoyaltyBPS is a free data retrieval call binding the contract method 0xea211d7c.
//
// Solidity: function secondarySaleRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) SecondarySaleRoyaltyBPS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "secondarySaleRoyaltyBPS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SecondarySaleRoyaltyBPS is a free data retrieval call binding the contract method 0xea211d7c.
//
// Solidity: function secondarySaleRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SecondarySaleRoyaltyBPS() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.SecondarySaleRoyaltyBPS(&_FeralfileExhibitionV2.CallOpts)
}

// SecondarySaleRoyaltyBPS is a free data retrieval call binding the contract method 0xea211d7c.
//
// Solidity: function secondarySaleRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) SecondarySaleRoyaltyBPS() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.SecondarySaleRoyaltyBPS(&_FeralfileExhibitionV2.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeralfileExhibitionV2.Contract.SupportsInterface(&_FeralfileExhibitionV2.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeralfileExhibitionV2.Contract.SupportsInterface(&_FeralfileExhibitionV2.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) Symbol() (string, error) {
	return _FeralfileExhibitionV2.Contract.Symbol(&_FeralfileExhibitionV2.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) Symbol() (string, error) {
	return _FeralfileExhibitionV2.Contract.Symbol(&_FeralfileExhibitionV2.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TokenByIndex(&_FeralfileExhibitionV2.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TokenByIndex(&_FeralfileExhibitionV2.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TokenOfOwnerByIndex(&_FeralfileExhibitionV2.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TokenOfOwnerByIndex(&_FeralfileExhibitionV2.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TokenURI(tokenId *big.Int) (string, error) {
	return _FeralfileExhibitionV2.Contract.TokenURI(&_FeralfileExhibitionV2.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _FeralfileExhibitionV2.Contract.TokenURI(&_FeralfileExhibitionV2.CallOpts, tokenId)
}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) TotalArtworks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "totalArtworks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TotalArtworks() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TotalArtworks(&_FeralfileExhibitionV2.CallOpts)
}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) TotalArtworks() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TotalArtworks(&_FeralfileExhibitionV2.CallOpts)
}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) TotalEditionOfArtwork(opts *bind.CallOpts, artworkID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "totalEditionOfArtwork", artworkID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TotalEditionOfArtwork(artworkID *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TotalEditionOfArtwork(&_FeralfileExhibitionV2.CallOpts, artworkID)
}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) TotalEditionOfArtwork(artworkID *big.Int) (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TotalEditionOfArtwork(&_FeralfileExhibitionV2.CallOpts, artworkID)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TotalSupply() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TotalSupply(&_FeralfileExhibitionV2.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) TotalSupply() (*big.Int, error) {
	return _FeralfileExhibitionV2.Contract.TotalSupply(&_FeralfileExhibitionV2.CallOpts)
}

// Trustee is a free data retrieval call binding the contract method 0xfdf97cb2.
//
// Solidity: function trustee() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Caller) Trustee(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibitionV2.contract.Call(opts, &out, "trustee")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Trustee is a free data retrieval call binding the contract method 0xfdf97cb2.
//
// Solidity: function trustee() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) Trustee() (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.Trustee(&_FeralfileExhibitionV2.CallOpts)
}

// Trustee is a free data retrieval call binding the contract method 0xfdf97cb2.
//
// Solidity: function trustee() view returns(address)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2CallerSession) Trustee() (common.Address, error) {
	return _FeralfileExhibitionV2.Contract.Trustee(&_FeralfileExhibitionV2.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.Approve(&_FeralfileExhibitionV2.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.Approve(&_FeralfileExhibitionV2.TransactOpts, to, tokenId)
}

// CreateArtwork is a paid mutator transaction binding the contract method 0x3afb021a.
//
// Solidity: function createArtwork(string fingerprint, string title, string artistName, uint256 editionSize) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) CreateArtwork(opts *bind.TransactOpts, fingerprint string, title string, artistName string, editionSize *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "createArtwork", fingerprint, title, artistName, editionSize)
}

// CreateArtwork is a paid mutator transaction binding the contract method 0x3afb021a.
//
// Solidity: function createArtwork(string fingerprint, string title, string artistName, uint256 editionSize) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) CreateArtwork(fingerprint string, title string, artistName string, editionSize *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.CreateArtwork(&_FeralfileExhibitionV2.TransactOpts, fingerprint, title, artistName, editionSize)
}

// CreateArtwork is a paid mutator transaction binding the contract method 0x3afb021a.
//
// Solidity: function createArtwork(string fingerprint, string title, string artistName, uint256 editionSize) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) CreateArtwork(fingerprint string, title string, artistName string, editionSize *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.CreateArtwork(&_FeralfileExhibitionV2.TransactOpts, fingerprint, title, artistName, editionSize)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) RenounceOwnership() (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.RenounceOwnership(&_FeralfileExhibitionV2.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.RenounceOwnership(&_FeralfileExhibitionV2.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SafeTransferFrom(&_FeralfileExhibitionV2.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SafeTransferFrom(&_FeralfileExhibitionV2.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SafeTransferFrom0(&_FeralfileExhibitionV2.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SafeTransferFrom0(&_FeralfileExhibitionV2.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetApprovalForAll(&_FeralfileExhibitionV2.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetApprovalForAll(&_FeralfileExhibitionV2.TransactOpts, operator, approved)
}

// SetRoyaltyPayoutAddress is a paid mutator transaction binding the contract method 0x45aeefde.
//
// Solidity: function setRoyaltyPayoutAddress(address royaltyPayoutAddress_) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SetRoyaltyPayoutAddress(opts *bind.TransactOpts, royaltyPayoutAddress_ common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "setRoyaltyPayoutAddress", royaltyPayoutAddress_)
}

// SetRoyaltyPayoutAddress is a paid mutator transaction binding the contract method 0x45aeefde.
//
// Solidity: function setRoyaltyPayoutAddress(address royaltyPayoutAddress_) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SetRoyaltyPayoutAddress(royaltyPayoutAddress_ common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetRoyaltyPayoutAddress(&_FeralfileExhibitionV2.TransactOpts, royaltyPayoutAddress_)
}

// SetRoyaltyPayoutAddress is a paid mutator transaction binding the contract method 0x45aeefde.
//
// Solidity: function setRoyaltyPayoutAddress(address royaltyPayoutAddress_) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SetRoyaltyPayoutAddress(royaltyPayoutAddress_ common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetRoyaltyPayoutAddress(&_FeralfileExhibitionV2.TransactOpts, royaltyPayoutAddress_)
}

// SetTokenBaseURI is a paid mutator transaction binding the contract method 0x8ef79e91.
//
// Solidity: function setTokenBaseURI(string baseURI_) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SetTokenBaseURI(opts *bind.TransactOpts, baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "setTokenBaseURI", baseURI_)
}

// SetTokenBaseURI is a paid mutator transaction binding the contract method 0x8ef79e91.
//
// Solidity: function setTokenBaseURI(string baseURI_) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SetTokenBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetTokenBaseURI(&_FeralfileExhibitionV2.TransactOpts, baseURI_)
}

// SetTokenBaseURI is a paid mutator transaction binding the contract method 0x8ef79e91.
//
// Solidity: function setTokenBaseURI(string baseURI_) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SetTokenBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetTokenBaseURI(&_FeralfileExhibitionV2.TransactOpts, baseURI_)
}

// SetTrustee is a paid mutator transaction binding the contract method 0xd0d1ea70.
//
// Solidity: function setTrustee(address _newTrustee) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SetTrustee(opts *bind.TransactOpts, _newTrustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "setTrustee", _newTrustee)
}

// SetTrustee is a paid mutator transaction binding the contract method 0xd0d1ea70.
//
// Solidity: function setTrustee(address _newTrustee) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SetTrustee(_newTrustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetTrustee(&_FeralfileExhibitionV2.TransactOpts, _newTrustee)
}

// SetTrustee is a paid mutator transaction binding the contract method 0xd0d1ea70.
//
// Solidity: function setTrustee(address _newTrustee) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SetTrustee(_newTrustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SetTrustee(&_FeralfileExhibitionV2.TransactOpts, _newTrustee)
}

// SwapArtworkFromBitmark is a paid mutator transaction binding the contract method 0x7f34c0dd.
//
// Solidity: function swapArtworkFromBitmark(uint256 artworkID, uint256 bitmarkID, uint256 editionNumber, address owner, string ipfsCID) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) SwapArtworkFromBitmark(opts *bind.TransactOpts, artworkID *big.Int, bitmarkID *big.Int, editionNumber *big.Int, owner common.Address, ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "swapArtworkFromBitmark", artworkID, bitmarkID, editionNumber, owner, ipfsCID)
}

// SwapArtworkFromBitmark is a paid mutator transaction binding the contract method 0x7f34c0dd.
//
// Solidity: function swapArtworkFromBitmark(uint256 artworkID, uint256 bitmarkID, uint256 editionNumber, address owner, string ipfsCID) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) SwapArtworkFromBitmark(artworkID *big.Int, bitmarkID *big.Int, editionNumber *big.Int, owner common.Address, ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SwapArtworkFromBitmark(&_FeralfileExhibitionV2.TransactOpts, artworkID, bitmarkID, editionNumber, owner, ipfsCID)
}

// SwapArtworkFromBitmark is a paid mutator transaction binding the contract method 0x7f34c0dd.
//
// Solidity: function swapArtworkFromBitmark(uint256 artworkID, uint256 bitmarkID, uint256 editionNumber, address owner, string ipfsCID) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) SwapArtworkFromBitmark(artworkID *big.Int, bitmarkID *big.Int, editionNumber *big.Int, owner common.Address, ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.SwapArtworkFromBitmark(&_FeralfileExhibitionV2.TransactOpts, artworkID, bitmarkID, editionNumber, owner, ipfsCID)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.TransferFrom(&_FeralfileExhibitionV2.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.TransferFrom(&_FeralfileExhibitionV2.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.TransferOwnership(&_FeralfileExhibitionV2.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.TransferOwnership(&_FeralfileExhibitionV2.TransactOpts, newOwner)
}

// UpdateArtworkEditionIPFSCid is a paid mutator transaction binding the contract method 0x0cfcb5f1.
//
// Solidity: function updateArtworkEditionIPFSCid(uint256 tokenId, string ipfsCID) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Transactor) UpdateArtworkEditionIPFSCid(opts *bind.TransactOpts, tokenId *big.Int, ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.contract.Transact(opts, "updateArtworkEditionIPFSCid", tokenId, ipfsCID)
}

// UpdateArtworkEditionIPFSCid is a paid mutator transaction binding the contract method 0x0cfcb5f1.
//
// Solidity: function updateArtworkEditionIPFSCid(uint256 tokenId, string ipfsCID) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Session) UpdateArtworkEditionIPFSCid(tokenId *big.Int, ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.UpdateArtworkEditionIPFSCid(&_FeralfileExhibitionV2.TransactOpts, tokenId, ipfsCID)
}

// UpdateArtworkEditionIPFSCid is a paid mutator transaction binding the contract method 0x0cfcb5f1.
//
// Solidity: function updateArtworkEditionIPFSCid(uint256 tokenId, string ipfsCID) returns()
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2TransactorSession) UpdateArtworkEditionIPFSCid(tokenId *big.Int, ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibitionV2.Contract.UpdateArtworkEditionIPFSCid(&_FeralfileExhibitionV2.TransactOpts, tokenId, ipfsCID)
}

// FeralfileExhibitionV2ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2ApprovalIterator struct {
	Event *FeralfileExhibitionV2Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV2ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV2Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV2Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV2ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV2ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV2Approval represents a Approval event raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*FeralfileExhibitionV2ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2ApprovalIterator{contract: _FeralfileExhibitionV2.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV2Approval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV2Approval)
				if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) ParseApproval(log types.Log) (*FeralfileExhibitionV2Approval, error) {
	event := new(FeralfileExhibitionV2Approval)
	if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV2ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2ApprovalForAllIterator struct {
	Event *FeralfileExhibitionV2ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV2ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV2ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV2ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV2ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV2ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV2ApprovalForAll represents a ApprovalForAll event raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*FeralfileExhibitionV2ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2ApprovalForAllIterator{contract: _FeralfileExhibitionV2.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV2ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV2ApprovalForAll)
				if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) ParseApprovalForAll(log types.Log) (*FeralfileExhibitionV2ApprovalForAll, error) {
	event := new(FeralfileExhibitionV2ApprovalForAll)
	if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV2NewArtworkIterator is returned from FilterNewArtwork and is used to iterate over the raw logs and unpacked data for NewArtwork events raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2NewArtworkIterator struct {
	Event *FeralfileExhibitionV2NewArtwork // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV2NewArtworkIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV2NewArtwork)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV2NewArtwork)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV2NewArtworkIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV2NewArtworkIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV2NewArtwork represents a NewArtwork event raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2NewArtwork struct {
	ArtworkID *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewArtwork is a free log retrieval operation binding the contract event 0x22350b25f1b72bb3621199a79abefeb4fcd77bb1e65638cd09350666e4db0891.
//
// Solidity: event NewArtwork(uint256 indexed artworkID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) FilterNewArtwork(opts *bind.FilterOpts, artworkID []*big.Int) (*FeralfileExhibitionV2NewArtworkIterator, error) {

	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.FilterLogs(opts, "NewArtwork", artworkIDRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2NewArtworkIterator{contract: _FeralfileExhibitionV2.contract, event: "NewArtwork", logs: logs, sub: sub}, nil
}

// WatchNewArtwork is a free log subscription operation binding the contract event 0x22350b25f1b72bb3621199a79abefeb4fcd77bb1e65638cd09350666e4db0891.
//
// Solidity: event NewArtwork(uint256 indexed artworkID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) WatchNewArtwork(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV2NewArtwork, artworkID []*big.Int) (event.Subscription, error) {

	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.WatchLogs(opts, "NewArtwork", artworkIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV2NewArtwork)
				if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "NewArtwork", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewArtwork is a log parse operation binding the contract event 0x22350b25f1b72bb3621199a79abefeb4fcd77bb1e65638cd09350666e4db0891.
//
// Solidity: event NewArtwork(uint256 indexed artworkID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) ParseNewArtwork(log types.Log) (*FeralfileExhibitionV2NewArtwork, error) {
	event := new(FeralfileExhibitionV2NewArtwork)
	if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "NewArtwork", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV2NewArtworkEditionIterator is returned from FilterNewArtworkEdition and is used to iterate over the raw logs and unpacked data for NewArtworkEdition events raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2NewArtworkEditionIterator struct {
	Event *FeralfileExhibitionV2NewArtworkEdition // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV2NewArtworkEditionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV2NewArtworkEdition)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV2NewArtworkEdition)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV2NewArtworkEditionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV2NewArtworkEditionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV2NewArtworkEdition represents a NewArtworkEdition event raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2NewArtworkEdition struct {
	Owner     common.Address
	ArtworkID *big.Int
	EditionID *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewArtworkEdition is a free log retrieval operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) FilterNewArtworkEdition(opts *bind.FilterOpts, owner []common.Address, artworkID []*big.Int, editionID []*big.Int) (*FeralfileExhibitionV2NewArtworkEditionIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}
	var editionIDRule []interface{}
	for _, editionIDItem := range editionID {
		editionIDRule = append(editionIDRule, editionIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.FilterLogs(opts, "NewArtworkEdition", ownerRule, artworkIDRule, editionIDRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2NewArtworkEditionIterator{contract: _FeralfileExhibitionV2.contract, event: "NewArtworkEdition", logs: logs, sub: sub}, nil
}

// WatchNewArtworkEdition is a free log subscription operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) WatchNewArtworkEdition(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV2NewArtworkEdition, owner []common.Address, artworkID []*big.Int, editionID []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}
	var editionIDRule []interface{}
	for _, editionIDItem := range editionID {
		editionIDRule = append(editionIDRule, editionIDItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.WatchLogs(opts, "NewArtworkEdition", ownerRule, artworkIDRule, editionIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV2NewArtworkEdition)
				if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "NewArtworkEdition", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewArtworkEdition is a log parse operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) ParseNewArtworkEdition(log types.Log) (*FeralfileExhibitionV2NewArtworkEdition, error) {
	event := new(FeralfileExhibitionV2NewArtworkEdition)
	if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "NewArtworkEdition", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV2OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2OwnershipTransferredIterator struct {
	Event *FeralfileExhibitionV2OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV2OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV2OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV2OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV2OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV2OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV2OwnershipTransferred represents a OwnershipTransferred event raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FeralfileExhibitionV2OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2OwnershipTransferredIterator{contract: _FeralfileExhibitionV2.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV2OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV2OwnershipTransferred)
				if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) ParseOwnershipTransferred(log types.Log) (*FeralfileExhibitionV2OwnershipTransferred, error) {
	event := new(FeralfileExhibitionV2OwnershipTransferred)
	if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionV2TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2TransferIterator struct {
	Event *FeralfileExhibitionV2Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionV2TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionV2Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionV2Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionV2TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionV2TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionV2Transfer represents a Transfer event raised by the FeralfileExhibitionV2 contract.
type FeralfileExhibitionV2Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*FeralfileExhibitionV2TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionV2TransferIterator{contract: _FeralfileExhibitionV2.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionV2Transfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibitionV2.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionV2Transfer)
				if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibitionV2 *FeralfileExhibitionV2Filterer) ParseTransfer(log types.Log) (*FeralfileExhibitionV2Transfer, error) {
	event := new(FeralfileExhibitionV2Transfer)
	if err := _FeralfileExhibitionV2.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
