// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package feralfile

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// FeralfileExhibitionABI is the input ABI used to generate the binding from.
const FeralfileExhibitionABI = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_curator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxEdition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_basePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenBaseURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"}],\"name\":\"NewArtwork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionID\",\"type\":\"uint256\"}],\"name\":\"NewArtworkEdition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworkEditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"editionID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bitmarkID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prevProvenance\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsCID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"fingerprint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"medium\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEdition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTrustee\",\"type\":\"address\"}],\"name\":\"setTrustee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"title\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_fingerprint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_artist\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_medium\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_editionSize\",\"type\":\"uint256\"}],\"name\":\"createArtwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalArtworks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getArtworkByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_artworkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bitmarkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_prevProvenance\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ipfsCID\",\"type\":\"string\"}],\"name\":\"swapArtworkFromBitmarks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"}],\"name\":\"totalEditionOfArtwork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getArtworkEditionByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setArtworkBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// FeralfileExhibitionBin is the compiled bytecode used for deploying new contracts.
var FeralfileExhibitionBin = "0x60806040523480156200001157600080fd5b50604051620059cf380380620059cf833981810160405281019062000037919062000479565b858581600090805190602001906200005192919062000329565b5080600190805190602001906200006a92919062000329565b5050506200008d620000816200025b60201b60201c565b6200026360201b60201c565b6000600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141562000142576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000139906200068e565b60405180910390fd5b6000831162000188576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017f90620006b0565b60405180910390fd5b60008211620001ce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001c5906200066c565b60405180910390fd5b85600c9080519060200190620001e692919062000329565b5083600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600e8190555081600f8190555080601090805190602001906200024e92919062000329565b5050505050505062000886565b600033905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200033790620007be565b90600052602060002090601f0160209004810192826200035b5760008555620003a7565b82601f106200037657805160ff1916838001178555620003a7565b82800160010185558215620003a7579182015b82811115620003a657825182559160200191906001019062000389565b5b509050620003b69190620003ba565b5090565b5b80821115620003d5576000816000905550600101620003bb565b5090565b6000620003f0620003ea8462000706565b620006d2565b9050828152602081018484840111156200040957600080fd5b6200041684828562000788565b509392505050565b6000815190506200042f8162000852565b92915050565b600082601f8301126200044757600080fd5b815162000459848260208601620003d9565b91505092915050565b60008151905062000473816200086c565b92915050565b60008060008060008060c087890312156200049357600080fd5b600087015167ffffffffffffffff811115620004ae57600080fd5b620004bc89828a0162000435565b965050602087015167ffffffffffffffff811115620004da57600080fd5b620004e889828a0162000435565b9550506040620004fb89828a016200041e565b94505060606200050e89828a0162000462565b93505060806200052189828a0162000462565b92505060a087015167ffffffffffffffff8111156200053f57600080fd5b6200054d89828a0162000435565b9150509295509295509295565b60006200056960278362000739565b91507f626173655072696365206e6565647320746f206265206772656174657220746860008301527f616e207a65726f000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000620005d160178362000739565b91507f696e76616c69642063757261746f7220616464726573730000000000000000006000830152602082019050919050565b60006200061360288362000739565b91507f6d617845646974696f6e206e6565647320746f2062652067726561746572207460008301527f68616e207a65726f0000000000000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050818103600083015262000687816200055a565b9050919050565b60006020820190508181036000830152620006a981620005c2565b9050919050565b60006020820190508181036000830152620006cb8162000604565b9050919050565b6000604051905081810181811067ffffffffffffffff82111715620006fc57620006fb62000823565b5b8060405250919050565b600067ffffffffffffffff82111562000724576200072362000823565b5b601f19601f8301169050602081019050919050565b600082825260208201905092915050565b600062000757826200075e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620007a85780820151818401526020810190506200078b565b83811115620007b8576000848401525b50505050565b60006002820490506001821680620007d757607f821691505b60208210811415620007ee57620007ed620007f4565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200085d816200074a565b81146200086957600080fd5b50565b62000877816200077e565b81146200088357600080fd5b50565b61513980620008966000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80636af5170311610125578063c87b56dd116100ad578063e8a3d4851161007c578063e8a3d48514610644578063e985e9c514610662578063f2fde38b14610692578063fdf97cb2146106ae578063fe2a3bf3146106cc57610211565b8063c87b56dd146105bc578063d0d1ea70146105ec578063e4a233e114610608578063e66f53b71461062657610211565b806395d89b41116100f457806395d89b4114610518578063a22cb46514610536578063b488370314610552578063b88d4fde14610582578063c7876ea41461059e57610211565b80636af51703146104a257806370a08231146104c0578063715018a6146104f05780638da5cb5b146104fa57610211565b80632f745c59116101a85780634f6ccce7116101775780634f6ccce7146103c15780635bcdf74c146103f157806362fe21311461040d5780636352211e14610442578063641b18e91461047257610211565b80632f745c591461032257806342842e0e146103525780634a79d50c1461036e5780634b6026731461038c57610211565b80630dd62a0d116101e45780630dd62a0d146102b057806318160ddd146102cc5780631e734e4e146102ea57806323b872dd1461030657610211565b806301ffc9a71461021657806306fdde0314610246578063081812fc14610264578063095ea7b314610294575b600080fd5b610230600480360381019061022b919061396a565b6106fc565b60405161023d9190614853565b60405180910390f35b61024e610776565b60405161025b919061486e565b60405180910390f35b61027e60048036038101906102799190613ae6565b610808565b60405161028b91906147ec565b60405180910390f35b6102ae60048036038101906102a9919061392e565b61088d565b005b6102ca60048036038101906102c591906139fd565b6109a5565b005b6102d4610e70565b6040516102e19190614ced565b60405180910390f35b61030460048036038101906102ff9190613b4b565b610e7d565b005b610320600480360381019061031b9190613828565b6115e0565b005b61033c6004803603810190610337919061392e565b611640565b6040516103499190614ced565b60405180910390f35b61036c60048036038101906103679190613828565b6116e5565b005b610376611705565b604051610383919061486e565b60405180910390f35b6103a660048036038101906103a19190613ae6565b611793565b6040516103b896959493929190614890565b60405180910390f35b6103db60048036038101906103d69190613ae6565b611a0f565b6040516103e89190614ced565b60405180910390f35b61040b600480360381019061040691906139bc565b611aa6565b005b61042760048036038101906104229190613ae6565b611b57565b60405161043996959493929190614d08565b60405180910390f35b61045c60048036038101906104579190613ae6565b611ca3565b60405161046991906147ec565b60405180910390f35b61048c60048036038101906104879190613b0f565b611d55565b6040516104999190614ced565b60405180910390f35b6104aa611dc9565b6040516104b79190614ced565b60405180910390f35b6104da60048036038101906104d591906137c3565b611dcf565b6040516104e79190614ced565b60405180910390f35b6104f8611e87565b005b610502611f0f565b60405161050f91906147ec565b60405180910390f35b610520611f39565b60405161052d919061486e565b60405180910390f35b610550600480360381019061054b91906138f2565b611fcb565b005b61056c60048036038101906105679190613ae6565b61214c565b6040516105799190614ced565b60405180910390f35b61059c60048036038101906105979190613877565b6121e3565b005b6105a6612245565b6040516105b39190614ced565b60405180910390f35b6105d660048036038101906105d19190613ae6565b61224b565b6040516105e3919061486e565b60405180910390f35b610606600480360381019061060191906137c3565b612392565b005b610610612452565b60405161061d9190614ced565b60405180910390f35b61062e61245f565b60405161063b91906147ec565b60405180910390f35b61064c612485565b604051610659919061486e565b60405180910390f35b61067c600480360381019061067791906137ec565b6124a5565b6040516106899190614853565b60405180910390f35b6106ac60048036038101906106a791906137c3565b612539565b005b6106b6612631565b6040516106c391906147ec565b60405180910390f35b6106e660048036038101906106e19190613ae6565b612657565b6040516106f39190614ced565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061076f575061076e82612677565b5b9050919050565b60606000805461078590614f8b565b80601f01602080910402602001604051908101604052809291908181526020018280546107b190614f8b565b80156107fe5780601f106107d3576101008083540402835291602001916107fe565b820191906000526020600020905b8154815290600101906020018083116107e157829003601f168201915b5050505050905090565b600061081382612759565b610852576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084990614aed565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061089882611ca3565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610909576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090090614bcd565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109286127c5565b73ffffffffffffffffffffffffffffffffffffffff1614806109575750610956816109516127c5565b6124a5565b5b610996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098d90614a4d565b60405180910390fd5b6109a083836127cd565b505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610a335750610a04611f0f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610a3c57600080fd5b600086511415610a81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7890614c6d565b60405180910390fd5b600085511415610ac6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abd90614a0d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2d90614ccd565b60405180910390fd5b600082511415610b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7290614a2d565b60405180910390fd5b60008111610bbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb590614cad565b60405180910390fd5b600e54811115610c03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfa90614c4d565b60405180910390fd5b600086604051602001610c16919061486e565b6040516020818303038152906040528051906020012060001c9050600073ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610cd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccd90614b4d565b60405180910390fd5b60006040518060c001604052808981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152509050601182908060018154018082558091505060019003906000526020600020016000909190919091505580601260008481526020019081526020016000206000820151816000019080519060200190610d769291906135e7565b506020820151816001019080519060200190610d939291906135e7565b506040820151816002019080519060200190610db09291906135e7565b5060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004019080519060200190610e149291906135e7565b5060a08201518160050155905050818573ffffffffffffffffffffffffffffffffffffffff167f997bc5bd0747442b15dc8315d11d6dad5b3afd0a1504a6882f57d988dfe9845160405160405180910390a35050505050505050565b6000600880549050905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610f0b5750610edc611f0f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610f1457600080fd5b6000601260008881526020019081526020016000206040518060c0016040529081600082018054610f4490614f8b565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7090614f8b565b8015610fbd5780601f10610f9257610100808354040283529160200191610fbd565b820191906000526020600020905b815481529060010190602001808311610fa057829003601f168201915b50505050508152602001600182018054610fd690614f8b565b80601f016020809104026020016040519081016040528092919081815260200182805461100290614f8b565b801561104f5780601f106110245761010080835404028352916020019161104f565b820191906000526020600020905b81548152906001019060200180831161103257829003601f168201915b5050505050815260200160028201805461106890614f8b565b80601f016020809104026020016040519081016040528092919081815260200182805461109490614f8b565b80156110e15780601f106110b6576101008083540402835291602001916110e1565b820191906000526020600020905b8154815290600101906020018083116110c457829003601f168201915b505050505081526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201805461115090614f8b565b80601f016020809104026020016040519081016040528092919081815260200182805461117c90614f8b565b80156111c95780601f1061119e576101008083540402835291602001916111c9565b820191906000526020600020905b8154815290600101906020018083116111ac57829003601f168201915b505050505081526020016005820154815250509050600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff161415611252576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112499061498d565b60405180910390fd5b8060a00151851115611299576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129090614b8d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611309576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130090614ccd565b60405180910390fd5b600085886113179190614e4b565b90506000601360008381526020019081526020016000206000015414611372576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136990614aad565b60405180910390fd5b6015600088815260200190815260200160002060009054906101000a900460ff16156113d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ca90614bad565b60405180910390fd5b6016836040516113e391906147a6565b908152602001604051809103902060009054906101000a900460ff161561143f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143690614c8d565b60405180910390fd5b60006040518060c001604052808381526020018881526020018a815260200189815260200186815260200185815250905080601360008481526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040190805190602001906114c89291906135e7565b5060a08201518160050190805190602001906114e59291906135e7565b50905050601460008a81526020019081526020016000208290806001815401808255809150506001900390600052602060002001600090919091909150556001601560008a815260200190815260200160002060006101000a81548160ff021916908315150217905550600160168560405161156191906147a6565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506115908683612886565b81898773ffffffffffffffffffffffffffffffffffffffff167f4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd460405160405180910390a4505050505050505050565b6115f16115eb6127c5565b82612a54565b611630576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162790614bed565b60405180910390fd5b61163b838383612b32565b505050565b600061164b83611dcf565b821061168c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116839061490d565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b611700838383604051806020016040528060008152506121e3565b505050565b600c805461171290614f8b565b80601f016020809104026020016040519081016040528092919081815260200182805461173e90614f8b565b801561178b5780601f106117605761010080835404028352916020019161178b565b820191906000526020600020905b81548152906001019060200180831161176e57829003601f168201915b505050505081565b60126020528060005260406000206000915090508060000180546117b690614f8b565b80601f01602080910402602001604051908101604052809291908181526020018280546117e290614f8b565b801561182f5780601f106118045761010080835404028352916020019161182f565b820191906000526020600020905b81548152906001019060200180831161181257829003601f168201915b50505050509080600101805461184490614f8b565b80601f016020809104026020016040519081016040528092919081815260200182805461187090614f8b565b80156118bd5780601f10611892576101008083540402835291602001916118bd565b820191906000526020600020905b8154815290600101906020018083116118a057829003601f168201915b5050505050908060020180546118d290614f8b565b80601f01602080910402602001604051908101604052809291908181526020018280546118fe90614f8b565b801561194b5780601f106119205761010080835404028352916020019161194b565b820191906000526020600020905b81548152906001019060200180831161192e57829003601f168201915b5050505050908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600401805461198690614f8b565b80601f01602080910402602001604051908101604052809291908181526020018280546119b290614f8b565b80156119ff5780601f106119d4576101008083540402835291602001916119ff565b820191906000526020600020905b8154815290600101906020018083116119e257829003601f168201915b5050505050908060050154905086565b6000611a19610e70565b8210611a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5190614c0d565b60405180910390fd5b60088281548110611a94577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611b345750611b05611f0f565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611b3d57600080fd5b8060109080519060200190611b539291906135e7565b5050565b6013602052806000526040600020600091509050806000015490806001015490806002015490806003015490806004018054611b9290614f8b565b80601f0160208091040260200160405190810160405280929190818152602001828054611bbe90614f8b565b8015611c0b5780601f10611be057610100808354040283529160200191611c0b565b820191906000526020600020905b815481529060010190602001808311611bee57829003601f168201915b505050505090806005018054611c2090614f8b565b80601f0160208091040260200160405190810160405280929190818152602001828054611c4c90614f8b565b8015611c995780601f10611c6e57610100808354040283529160200191611c99565b820191906000526020600020905b815481529060010190602001808311611c7c57829003601f168201915b5050505050905086565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4390614a8d565b60405180910390fd5b80915050919050565b6000611d6083612657565b8210611d6b57600080fd5b601460008481526020019081526020016000208281548110611db6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b600e5481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3790614a6d565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611e8f6127c5565b73ffffffffffffffffffffffffffffffffffffffff16611ead611f0f565b73ffffffffffffffffffffffffffffffffffffffff1614611f03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611efa90614b0d565b60405180910390fd5b611f0d6000612d8e565b565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054611f4890614f8b565b80601f0160208091040260200160405190810160405280929190818152602001828054611f7490614f8b565b8015611fc15780601f10611f9657610100808354040283529160200191611fc1565b820191906000526020600020905b815481529060010190602001808311611fa457829003601f168201915b5050505050905090565b611fd36127c5565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612041576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612038906149cd565b60405180910390fd5b806005600061204e6127c5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166120fb6127c5565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516121409190614853565b60405180910390a35050565b6000612156612452565b8210612197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218e90614c2d565b60405180910390fd5b601182815481106121d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b6121f46121ee6127c5565b83612a54565b612233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222a90614bed565b60405180910390fd5b61223f84848484612e54565b50505050565b600f5481565b606061225682612759565b612295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161228c90614b6d565b60405180910390fd5b600061229f612eb0565b90506000815114156122c3576040518060200160405280600081525091505061238d565b60006013600085815260200190815260200160002060050180546122e690614f8b565b80601f016020809104026020016040519081016040528092919081815260200182805461231290614f8b565b801561235f5780601f106123345761010080835404028352916020019161235f565b820191906000526020600020905b81548152906001019060200180831161234257829003601f168201915b5050505050905081816040516020016123799291906147bd565b604051602081830303815290604052925050505b919050565b61239a6127c5565b73ffffffffffffffffffffffffffffffffffffffff166123b8611f0f565b73ffffffffffffffffffffffffffffffffffffffff161461240e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240590614b0d565b60405180910390fd5b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000601180549050905090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606040518060800160405280604c81526020016150b8604c9139905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6125416127c5565b73ffffffffffffffffffffffffffffffffffffffff1661255f611f0f565b73ffffffffffffffffffffffffffffffffffffffff16146125b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ac90614b0d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161261c9061494d565b60405180910390fd5b61262e81612d8e565b50565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060146000838152602001908152602001600020805490509050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061274257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612752575061275182612f42565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661284083611ca3565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156128f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128ed90614acd565b60405180910390fd5b6128ff81612759565b1561293f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129369061496d565b60405180910390fd5b61294b60008383612fac565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461299b9190614e4b565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000612a5f82612759565b612a9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a95906149ed565b60405180910390fd5b6000612aa983611ca3565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612b1857508373ffffffffffffffffffffffffffffffffffffffff16612b0084610808565b73ffffffffffffffffffffffffffffffffffffffff16145b80612b295750612b2881856124a5565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612b5282611ca3565b73ffffffffffffffffffffffffffffffffffffffff1614612ba8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b9f90614b2d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612c18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c0f906149ad565b60405180910390fd5b612c23838383612fac565b612c2e6000826127cd565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612c7e9190614ea1565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612cd59190614e4b565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612e5f848484612b32565b612e6b848484846130c0565b612eaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ea19061492d565b60405180910390fd5b50505050565b606060108054612ebf90614f8b565b80601f0160208091040260200160405190810160405280929190818152602001828054612eeb90614f8b565b8015612f385780601f10612f0d57610100808354040283529160200191612f38565b820191906000526020600020905b815481529060010190602001808311612f1b57829003601f168201915b5050505050905090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612fb7838383613257565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612ffa57612ff58161325c565b613039565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146130385761303783826132a5565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561307c5761307781613412565b6130bb565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146130ba576130b98282613555565b5b5b505050565b60006130e18473ffffffffffffffffffffffffffffffffffffffff166135d4565b1561324a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261310a6127c5565b8786866040518563ffffffff1660e01b815260040161312c9493929190614807565b602060405180830381600087803b15801561314657600080fd5b505af192505050801561317757506040513d601f19601f820116820180604052508101906131749190613993565b60015b6131fa573d80600081146131a7576040519150601f19603f3d011682016040523d82523d6000602084013e6131ac565b606091505b506000815114156131f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131e99061492d565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061324f565b600190505b949350505050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016132b284611dcf565b6132bc9190614ea1565b90506000600760008481526020019081526020016000205490508181146133a1576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506134269190614ea1565b905060006009600084815260200190815260200160002054905060006008838154811061347c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080600883815481106134c4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480613539577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061356083611dcf565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600080823b905060008111915050919050565b8280546135f390614f8b565b90600052602060002090601f016020900481019282613615576000855561365c565b82601f1061362e57805160ff191683800117855561365c565b8280016001018555821561365c579182015b8281111561365b578251825591602001919060010190613640565b5b509050613669919061366d565b5090565b5b8082111561368657600081600090555060010161366e565b5090565b600061369d61369884614da8565b614d77565b9050828152602081018484840111156136b557600080fd5b6136c0848285614f49565b509392505050565b60006136db6136d684614dd8565b614d77565b9050828152602081018484840111156136f357600080fd5b6136fe848285614f49565b509392505050565b6000813590506137158161505b565b92915050565b60008135905061372a81615072565b92915050565b60008135905061373f81615089565b92915050565b60008151905061375481615089565b92915050565b600082601f83011261376b57600080fd5b813561377b84826020860161368a565b91505092915050565b600082601f83011261379557600080fd5b81356137a58482602086016136c8565b91505092915050565b6000813590506137bd816150a0565b92915050565b6000602082840312156137d557600080fd5b60006137e384828501613706565b91505092915050565b600080604083850312156137ff57600080fd5b600061380d85828601613706565b925050602061381e85828601613706565b9150509250929050565b60008060006060848603121561383d57600080fd5b600061384b86828701613706565b935050602061385c86828701613706565b925050604061386d868287016137ae565b9150509250925092565b6000806000806080858703121561388d57600080fd5b600061389b87828801613706565b94505060206138ac87828801613706565b93505060406138bd878288016137ae565b925050606085013567ffffffffffffffff8111156138da57600080fd5b6138e68782880161375a565b91505092959194509250565b6000806040838503121561390557600080fd5b600061391385828601613706565b92505060206139248582860161371b565b9150509250929050565b6000806040838503121561394157600080fd5b600061394f85828601613706565b9250506020613960858286016137ae565b9150509250929050565b60006020828403121561397c57600080fd5b600061398a84828501613730565b91505092915050565b6000602082840312156139a557600080fd5b60006139b384828501613745565b91505092915050565b6000602082840312156139ce57600080fd5b600082013567ffffffffffffffff8111156139e857600080fd5b6139f484828501613784565b91505092915050565b60008060008060008060c08789031215613a1657600080fd5b600087013567ffffffffffffffff811115613a3057600080fd5b613a3c89828a01613784565b965050602087013567ffffffffffffffff811115613a5957600080fd5b613a6589828a01613784565b955050604087013567ffffffffffffffff811115613a8257600080fd5b613a8e89828a01613784565b9450506060613a9f89828a01613706565b935050608087013567ffffffffffffffff811115613abc57600080fd5b613ac889828a01613784565b92505060a0613ad989828a016137ae565b9150509295509295509295565b600060208284031215613af857600080fd5b6000613b06848285016137ae565b91505092915050565b60008060408385031215613b2257600080fd5b6000613b30858286016137ae565b9250506020613b41858286016137ae565b9150509250929050565b60008060008060008060c08789031215613b6457600080fd5b6000613b7289828a016137ae565b9650506020613b8389828a016137ae565b9550506040613b9489828a016137ae565b9450506060613ba589828a01613706565b935050608087013567ffffffffffffffff811115613bc257600080fd5b613bce89828a01613784565b92505060a087013567ffffffffffffffff811115613beb57600080fd5b613bf789828a01613784565b9150509295509295509295565b613c0d81614ed5565b82525050565b613c1c81614ee7565b82525050565b6000613c2d82614e08565b613c378185614e1e565b9350613c47818560208601614f58565b613c508161504a565b840191505092915050565b6000613c6682614e13565b613c708185614e2f565b9350613c80818560208601614f58565b613c898161504a565b840191505092915050565b6000613c9f82614e13565b613ca98185614e40565b9350613cb9818560208601614f58565b80840191505092915050565b6000613cd2602b83614e2f565b91507f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008301527f74206f6620626f756e64730000000000000000000000000000000000000000006020830152604082019050919050565b6000613d38603283614e2f565b91507f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008301527f63656976657220696d706c656d656e74657200000000000000000000000000006020830152604082019050919050565b6000613d9e602683614e2f565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613e04601c83614e2f565b91507f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006000830152602082019050919050565b6000613e44600e83614e40565b91507f2f6d657461646174612e6a736f6e0000000000000000000000000000000000006000830152600e82019050919050565b6000613e84601483614e2f565b91507f617274776f726b206973206e6f7420666f756e640000000000000000000000006000830152602082019050919050565b6000613ec4602483614e2f565b91507f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613f2a601983614e2f565b91507f4552433732313a20617070726f766520746f2063616c6c6572000000000000006000830152602082019050919050565b6000613f6a602c83614e2f565b91507f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b6000613fd0601683614e2f565b91507f7469746c652063616e206e6f7420626520656d707479000000000000000000006000830152602082019050919050565b6000614010601783614e2f565b91507f6d656469756d2063616e206e6f7420626520656d7074790000000000000000006000830152602082019050919050565b6000614050603883614e2f565b91507f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020830152604082019050919050565b60006140b6602a83614e2f565b91507f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b600061411c602983614e2f565b91507f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008301527f656e7420746f6b656e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000614182601783614e2f565b91507f7468652065646974696f6e206973206578697374656e740000000000000000006000830152602082019050919050565b60006141c2602083614e2f565b91507f4552433732313a206d696e7420746f20746865207a65726f20616464726573736000830152602082019050919050565b6000614202602c83614e2f565b91507f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b6000614268602083614e2f565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b60006142a8602983614e2f565b91507f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008301527f73206e6f74206f776e00000000000000000000000000000000000000000000006020830152604082019050919050565b600061430e603b83614e2f565b91507f616e20617274776f726b2077697468207468652073616d652066696e6765727060008301527f72696e742068617320616c7265616479207265676973746572656400000000006020830152604082019050919050565b6000614374602f83614e2f565b91507f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008301527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006020830152604082019050919050565b60006143da603583614e2f565b91507f65646974696f6e206e756d62657220657863656564207468652065646974696f60008301527f6e2073697a65206f662074686520617274776f726b00000000000000000000006020830152604082019050919050565b6000614440601983614e2f565b91507f6269746d61726b206964206861732072656769737465726564000000000000006000830152602082019050919050565b6000614480602183614e2f565b91507f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006144e6603183614e2f565b91507f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020830152604082019050919050565b600061454c602c83614e2f565b91507f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008301527f7574206f6620626f756e647300000000000000000000000000000000000000006020830152604082019050919050565b60006145b2602483614e2f565b91507f617274776f726b733a20676c6f62616c20696e646578206f7574206f6620626f60008301527f756e6473000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614618603f83614e2f565b91507f65646974696f6e2073697a65206578636565647320746865206d6178696d756d60008301527f2065646974696f6e2073697a65206f66207468652065786869626974696f6e006020830152604082019050919050565b600061467e601c83614e2f565b91507f66696e6765727072696e742063616e206e6f7420626520656d707479000000006000830152602082019050919050565b60006146be601683614e2f565b91507f69706673206964206861732072656769737465726564000000000000000000006000830152602082019050919050565b60006146fe602383614e2f565b91507f65646974696f6e2073697a65206e6565647320746f206265206174206c65617360008301527f74203100000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614764601683614e2f565b91507f696e76616c6964206172746973742061646472657373000000000000000000006000830152602082019050919050565b6147a081614f3f565b82525050565b60006147b28284613c94565b915081905092915050565b60006147c98285613c94565b91506147d58284613c94565b91506147e082613e37565b91508190509392505050565b60006020820190506148016000830184613c04565b92915050565b600060808201905061481c6000830187613c04565b6148296020830186613c04565b6148366040830185614797565b81810360608301526148488184613c22565b905095945050505050565b60006020820190506148686000830184613c13565b92915050565b600060208201905081810360008301526148888184613c5b565b905092915050565b600060c08201905081810360008301526148aa8189613c5b565b905081810360208301526148be8188613c5b565b905081810360408301526148d28187613c5b565b90506148e16060830186613c04565b81810360808301526148f38185613c5b565b905061490260a0830184614797565b979650505050505050565b6000602082019050818103600083015261492681613cc5565b9050919050565b6000602082019050818103600083015261494681613d2b565b9050919050565b6000602082019050818103600083015261496681613d91565b9050919050565b6000602082019050818103600083015261498681613df7565b9050919050565b600060208201905081810360008301526149a681613e77565b9050919050565b600060208201905081810360008301526149c681613eb7565b9050919050565b600060208201905081810360008301526149e681613f1d565b9050919050565b60006020820190508181036000830152614a0681613f5d565b9050919050565b60006020820190508181036000830152614a2681613fc3565b9050919050565b60006020820190508181036000830152614a4681614003565b9050919050565b60006020820190508181036000830152614a6681614043565b9050919050565b60006020820190508181036000830152614a86816140a9565b9050919050565b60006020820190508181036000830152614aa68161410f565b9050919050565b60006020820190508181036000830152614ac681614175565b9050919050565b60006020820190508181036000830152614ae6816141b5565b9050919050565b60006020820190508181036000830152614b06816141f5565b9050919050565b60006020820190508181036000830152614b268161425b565b9050919050565b60006020820190508181036000830152614b468161429b565b9050919050565b60006020820190508181036000830152614b6681614301565b9050919050565b60006020820190508181036000830152614b8681614367565b9050919050565b60006020820190508181036000830152614ba6816143cd565b9050919050565b60006020820190508181036000830152614bc681614433565b9050919050565b60006020820190508181036000830152614be681614473565b9050919050565b60006020820190508181036000830152614c06816144d9565b9050919050565b60006020820190508181036000830152614c268161453f565b9050919050565b60006020820190508181036000830152614c46816145a5565b9050919050565b60006020820190508181036000830152614c668161460b565b9050919050565b60006020820190508181036000830152614c8681614671565b9050919050565b60006020820190508181036000830152614ca6816146b1565b9050919050565b60006020820190508181036000830152614cc6816146f1565b9050919050565b60006020820190508181036000830152614ce681614757565b9050919050565b6000602082019050614d026000830184614797565b92915050565b600060c082019050614d1d6000830189614797565b614d2a6020830188614797565b614d376040830187614797565b614d446060830186614797565b8181036080830152614d568185613c5b565b905081810360a0830152614d6a8184613c5b565b9050979650505050505050565b6000604051905081810181811067ffffffffffffffff82111715614d9e57614d9d61501b565b5b8060405250919050565b600067ffffffffffffffff821115614dc357614dc261501b565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115614df357614df261501b565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614e5682614f3f565b9150614e6183614f3f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614e9657614e95614fbd565b5b828201905092915050565b6000614eac82614f3f565b9150614eb783614f3f565b925082821015614eca57614ec9614fbd565b5b828203905092915050565b6000614ee082614f1f565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614f76578082015181840152602081019050614f5b565b83811115614f85576000848401525b50505050565b60006002820490506001821680614fa357607f821691505b60208210811415614fb757614fb6614fec565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61506481614ed5565b811461506f57600080fd5b50565b61507b81614ee7565b811461508657600080fd5b50565b61509281614ef3565b811461509d57600080fd5b50565b6150a981614f3f565b81146150b457600080fd5b5056fe68747470733a2f2f697066732e6269746d61726b2e636f6d2f697066732f516d556e3935747836703958654a55664e796f41627156526d5061574d3355557a62764a4e765866636d45705662a2646970667358221220fa846f8908c5fd53a63ce239eed818d9a9be9c830771ffa78ac838a22959f39664736f6c63430008000033"

// DeployFeralfileExhibition deploys a new Ethereum contract, binding an instance of FeralfileExhibition to it.
func DeployFeralfileExhibition(auth *bind.TransactOpts, backend bind.ContractBackend, _title string, _symbol string, _curator common.Address, _maxEdition *big.Int, _basePrice *big.Int, tokenBaseURI_ string) (common.Address, *types.Transaction, *FeralfileExhibition, error) {
	parsed, err := abi.JSON(strings.NewReader(FeralfileExhibitionABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(FeralfileExhibitionBin), backend, _title, _symbol, _curator, _maxEdition, _basePrice, tokenBaseURI_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FeralfileExhibition{FeralfileExhibitionCaller: FeralfileExhibitionCaller{contract: contract}, FeralfileExhibitionTransactor: FeralfileExhibitionTransactor{contract: contract}, FeralfileExhibitionFilterer: FeralfileExhibitionFilterer{contract: contract}}, nil
}

// FeralfileExhibition is an auto generated Go binding around an Ethereum contract.
type FeralfileExhibition struct {
	FeralfileExhibitionCaller     // Read-only binding to the contract
	FeralfileExhibitionTransactor // Write-only binding to the contract
	FeralfileExhibitionFilterer   // Log filterer for contract events
}

// FeralfileExhibitionCaller is an auto generated read-only Go binding around an Ethereum contract.
type FeralfileExhibitionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FeralfileExhibitionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FeralfileExhibitionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FeralfileExhibitionSession struct {
	Contract     *FeralfileExhibition // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// FeralfileExhibitionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FeralfileExhibitionCallerSession struct {
	Contract *FeralfileExhibitionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// FeralfileExhibitionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FeralfileExhibitionTransactorSession struct {
	Contract     *FeralfileExhibitionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// FeralfileExhibitionRaw is an auto generated low-level Go binding around an Ethereum contract.
type FeralfileExhibitionRaw struct {
	Contract *FeralfileExhibition // Generic contract binding to access the raw methods on
}

// FeralfileExhibitionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FeralfileExhibitionCallerRaw struct {
	Contract *FeralfileExhibitionCaller // Generic read-only contract binding to access the raw methods on
}

// FeralfileExhibitionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FeralfileExhibitionTransactorRaw struct {
	Contract *FeralfileExhibitionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFeralfileExhibition creates a new instance of FeralfileExhibition, bound to a specific deployed contract.
func NewFeralfileExhibition(address common.Address, backend bind.ContractBackend) (*FeralfileExhibition, error) {
	contract, err := bindFeralfileExhibition(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibition{FeralfileExhibitionCaller: FeralfileExhibitionCaller{contract: contract}, FeralfileExhibitionTransactor: FeralfileExhibitionTransactor{contract: contract}, FeralfileExhibitionFilterer: FeralfileExhibitionFilterer{contract: contract}}, nil
}

// NewFeralfileExhibitionCaller creates a new read-only instance of FeralfileExhibition, bound to a specific deployed contract.
func NewFeralfileExhibitionCaller(address common.Address, caller bind.ContractCaller) (*FeralfileExhibitionCaller, error) {
	contract, err := bindFeralfileExhibition(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionCaller{contract: contract}, nil
}

// NewFeralfileExhibitionTransactor creates a new write-only instance of FeralfileExhibition, bound to a specific deployed contract.
func NewFeralfileExhibitionTransactor(address common.Address, transactor bind.ContractTransactor) (*FeralfileExhibitionTransactor, error) {
	contract, err := bindFeralfileExhibition(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionTransactor{contract: contract}, nil
}

// NewFeralfileExhibitionFilterer creates a new log filterer instance of FeralfileExhibition, bound to a specific deployed contract.
func NewFeralfileExhibitionFilterer(address common.Address, filterer bind.ContractFilterer) (*FeralfileExhibitionFilterer, error) {
	contract, err := bindFeralfileExhibition(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionFilterer{contract: contract}, nil
}

// bindFeralfileExhibition binds a generic wrapper to an already deployed contract.
func bindFeralfileExhibition(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FeralfileExhibitionABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeralfileExhibition *FeralfileExhibitionRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeralfileExhibition.Contract.FeralfileExhibitionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeralfileExhibition *FeralfileExhibitionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.FeralfileExhibitionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeralfileExhibition *FeralfileExhibitionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.FeralfileExhibitionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeralfileExhibition *FeralfileExhibitionCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeralfileExhibition.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeralfileExhibition *FeralfileExhibitionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeralfileExhibition *FeralfileExhibitionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.contract.Transact(opts, method, params...)
}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, uint256 editionNumber, uint256 artworkID, uint256 bitmarkID, string prevProvenance, string ipfsCID)
func (_FeralfileExhibition *FeralfileExhibitionCaller) ArtworkEditions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	EditionID      *big.Int
	EditionNumber  *big.Int
	ArtworkID      *big.Int
	BitmarkID      *big.Int
	PrevProvenance string
	IpfsCID        string
}, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "artworkEditions", arg0)

	outstruct := new(struct {
		EditionID      *big.Int
		EditionNumber  *big.Int
		ArtworkID      *big.Int
		BitmarkID      *big.Int
		PrevProvenance string
		IpfsCID        string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.EditionID = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.EditionNumber = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.ArtworkID = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.BitmarkID = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.PrevProvenance = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.IpfsCID = *abi.ConvertType(out[5], new(string)).(*string)

	return *outstruct, err

}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, uint256 editionNumber, uint256 artworkID, uint256 bitmarkID, string prevProvenance, string ipfsCID)
func (_FeralfileExhibition *FeralfileExhibitionSession) ArtworkEditions(arg0 *big.Int) (struct {
	EditionID      *big.Int
	EditionNumber  *big.Int
	ArtworkID      *big.Int
	BitmarkID      *big.Int
	PrevProvenance string
	IpfsCID        string
}, error) {
	return _FeralfileExhibition.Contract.ArtworkEditions(&_FeralfileExhibition.CallOpts, arg0)
}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, uint256 editionNumber, uint256 artworkID, uint256 bitmarkID, string prevProvenance, string ipfsCID)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) ArtworkEditions(arg0 *big.Int) (struct {
	EditionID      *big.Int
	EditionNumber  *big.Int
	ArtworkID      *big.Int
	BitmarkID      *big.Int
	PrevProvenance string
	IpfsCID        string
}, error) {
	return _FeralfileExhibition.Contract.ArtworkEditions(&_FeralfileExhibition.CallOpts, arg0)
}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string fingerprint, string title, string description, address artist, string medium, uint256 editionSize)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Artworks(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Fingerprint string
	Title       string
	Description string
	Artist      common.Address
	Medium      string
	EditionSize *big.Int
}, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "artworks", arg0)

	outstruct := new(struct {
		Fingerprint string
		Title       string
		Description string
		Artist      common.Address
		Medium      string
		EditionSize *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fingerprint = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Title = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Description = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.Artist = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.Medium = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.EditionSize = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string fingerprint, string title, string description, address artist, string medium, uint256 editionSize)
func (_FeralfileExhibition *FeralfileExhibitionSession) Artworks(arg0 *big.Int) (struct {
	Fingerprint string
	Title       string
	Description string
	Artist      common.Address
	Medium      string
	EditionSize *big.Int
}, error) {
	return _FeralfileExhibition.Contract.Artworks(&_FeralfileExhibition.CallOpts, arg0)
}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string fingerprint, string title, string description, address artist, string medium, uint256 editionSize)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Artworks(arg0 *big.Int) (struct {
	Fingerprint string
	Title       string
	Description string
	Artist      common.Address
	Medium      string
	EditionSize *big.Int
}, error) {
	return _FeralfileExhibition.Contract.Artworks(&_FeralfileExhibition.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _FeralfileExhibition.Contract.BalanceOf(&_FeralfileExhibition.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _FeralfileExhibition.Contract.BalanceOf(&_FeralfileExhibition.CallOpts, owner)
}

// BasePrice is a free data retrieval call binding the contract method 0xc7876ea4.
//
// Solidity: function basePrice() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) BasePrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "basePrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BasePrice is a free data retrieval call binding the contract method 0xc7876ea4.
//
// Solidity: function basePrice() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) BasePrice() (*big.Int, error) {
	return _FeralfileExhibition.Contract.BasePrice(&_FeralfileExhibition.CallOpts)
}

// BasePrice is a free data retrieval call binding the contract method 0xc7876ea4.
//
// Solidity: function basePrice() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) BasePrice() (*big.Int, error) {
	return _FeralfileExhibition.Contract.BasePrice(&_FeralfileExhibition.CallOpts)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() pure returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCaller) ContractURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "contractURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() pure returns(string)
func (_FeralfileExhibition *FeralfileExhibitionSession) ContractURI() (string, error) {
	return _FeralfileExhibition.Contract.ContractURI(&_FeralfileExhibition.CallOpts)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() pure returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) ContractURI() (string, error) {
	return _FeralfileExhibition.Contract.ContractURI(&_FeralfileExhibition.CallOpts)
}

// Curator is a free data retrieval call binding the contract method 0xe66f53b7.
//
// Solidity: function curator() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Curator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "curator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Curator is a free data retrieval call binding the contract method 0xe66f53b7.
//
// Solidity: function curator() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionSession) Curator() (common.Address, error) {
	return _FeralfileExhibition.Contract.Curator(&_FeralfileExhibition.CallOpts)
}

// Curator is a free data retrieval call binding the contract method 0xe66f53b7.
//
// Solidity: function curator() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Curator() (common.Address, error) {
	return _FeralfileExhibition.Contract.Curator(&_FeralfileExhibition.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibition.Contract.GetApproved(&_FeralfileExhibition.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibition.Contract.GetApproved(&_FeralfileExhibition.CallOpts, tokenId)
}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) GetArtworkByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "getArtworkByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) GetArtworkByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.GetArtworkByIndex(&_FeralfileExhibition.CallOpts, index)
}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) GetArtworkByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.GetArtworkByIndex(&_FeralfileExhibition.CallOpts, index)
}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) GetArtworkEditionByIndex(opts *bind.CallOpts, artworkID *big.Int, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "getArtworkEditionByIndex", artworkID, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) GetArtworkEditionByIndex(artworkID *big.Int, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.GetArtworkEditionByIndex(&_FeralfileExhibition.CallOpts, artworkID, index)
}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) GetArtworkEditionByIndex(artworkID *big.Int, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.GetArtworkEditionByIndex(&_FeralfileExhibition.CallOpts, artworkID, index)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _FeralfileExhibition.Contract.IsApprovedForAll(&_FeralfileExhibition.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _FeralfileExhibition.Contract.IsApprovedForAll(&_FeralfileExhibition.CallOpts, owner, operator)
}

// MaxEdition is a free data retrieval call binding the contract method 0x6af51703.
//
// Solidity: function maxEdition() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) MaxEdition(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "maxEdition")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxEdition is a free data retrieval call binding the contract method 0x6af51703.
//
// Solidity: function maxEdition() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) MaxEdition() (*big.Int, error) {
	return _FeralfileExhibition.Contract.MaxEdition(&_FeralfileExhibition.CallOpts)
}

// MaxEdition is a free data retrieval call binding the contract method 0x6af51703.
//
// Solidity: function maxEdition() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) MaxEdition() (*big.Int, error) {
	return _FeralfileExhibition.Contract.MaxEdition(&_FeralfileExhibition.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionSession) Name() (string, error) {
	return _FeralfileExhibition.Contract.Name(&_FeralfileExhibition.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Name() (string, error) {
	return _FeralfileExhibition.Contract.Name(&_FeralfileExhibition.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionSession) Owner() (common.Address, error) {
	return _FeralfileExhibition.Contract.Owner(&_FeralfileExhibition.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Owner() (common.Address, error) {
	return _FeralfileExhibition.Contract.Owner(&_FeralfileExhibition.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibition.Contract.OwnerOf(&_FeralfileExhibition.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibition.Contract.OwnerOf(&_FeralfileExhibition.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeralfileExhibition.Contract.SupportsInterface(&_FeralfileExhibition.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeralfileExhibition.Contract.SupportsInterface(&_FeralfileExhibition.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionSession) Symbol() (string, error) {
	return _FeralfileExhibition.Contract.Symbol(&_FeralfileExhibition.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Symbol() (string, error) {
	return _FeralfileExhibition.Contract.Symbol(&_FeralfileExhibition.CallOpts)
}

// Title is a free data retrieval call binding the contract method 0x4a79d50c.
//
// Solidity: function title() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Title(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "title")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Title is a free data retrieval call binding the contract method 0x4a79d50c.
//
// Solidity: function title() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionSession) Title() (string, error) {
	return _FeralfileExhibition.Contract.Title(&_FeralfileExhibition.CallOpts)
}

// Title is a free data retrieval call binding the contract method 0x4a79d50c.
//
// Solidity: function title() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Title() (string, error) {
	return _FeralfileExhibition.Contract.Title(&_FeralfileExhibition.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.TokenByIndex(&_FeralfileExhibition.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.TokenByIndex(&_FeralfileExhibition.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.TokenOfOwnerByIndex(&_FeralfileExhibition.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.TokenOfOwnerByIndex(&_FeralfileExhibition.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionSession) TokenURI(tokenId *big.Int) (string, error) {
	return _FeralfileExhibition.Contract.TokenURI(&_FeralfileExhibition.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _FeralfileExhibition.Contract.TokenURI(&_FeralfileExhibition.CallOpts, tokenId)
}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) TotalArtworks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "totalArtworks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) TotalArtworks() (*big.Int, error) {
	return _FeralfileExhibition.Contract.TotalArtworks(&_FeralfileExhibition.CallOpts)
}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) TotalArtworks() (*big.Int, error) {
	return _FeralfileExhibition.Contract.TotalArtworks(&_FeralfileExhibition.CallOpts)
}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) TotalEditionOfArtwork(opts *bind.CallOpts, artworkID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "totalEditionOfArtwork", artworkID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) TotalEditionOfArtwork(artworkID *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.TotalEditionOfArtwork(&_FeralfileExhibition.CallOpts, artworkID)
}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) TotalEditionOfArtwork(artworkID *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.TotalEditionOfArtwork(&_FeralfileExhibition.CallOpts, artworkID)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) TotalSupply() (*big.Int, error) {
	return _FeralfileExhibition.Contract.TotalSupply(&_FeralfileExhibition.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) TotalSupply() (*big.Int, error) {
	return _FeralfileExhibition.Contract.TotalSupply(&_FeralfileExhibition.CallOpts)
}

// Trustee is a free data retrieval call binding the contract method 0xfdf97cb2.
//
// Solidity: function trustee() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Trustee(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "trustee")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Trustee is a free data retrieval call binding the contract method 0xfdf97cb2.
//
// Solidity: function trustee() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionSession) Trustee() (common.Address, error) {
	return _FeralfileExhibition.Contract.Trustee(&_FeralfileExhibition.CallOpts)
}

// Trustee is a free data retrieval call binding the contract method 0xfdf97cb2.
//
// Solidity: function trustee() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Trustee() (common.Address, error) {
	return _FeralfileExhibition.Contract.Trustee(&_FeralfileExhibition.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.Approve(&_FeralfileExhibition.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.Approve(&_FeralfileExhibition.TransactOpts, to, tokenId)
}

// CreateArtwork is a paid mutator transaction binding the contract method 0x0dd62a0d.
//
// Solidity: function createArtwork(string _fingerprint, string _title, string _description, address _artist, string _medium, uint256 _editionSize) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) CreateArtwork(opts *bind.TransactOpts, _fingerprint string, _title string, _description string, _artist common.Address, _medium string, _editionSize *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "createArtwork", _fingerprint, _title, _description, _artist, _medium, _editionSize)
}

// CreateArtwork is a paid mutator transaction binding the contract method 0x0dd62a0d.
//
// Solidity: function createArtwork(string _fingerprint, string _title, string _description, address _artist, string _medium, uint256 _editionSize) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) CreateArtwork(_fingerprint string, _title string, _description string, _artist common.Address, _medium string, _editionSize *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.CreateArtwork(&_FeralfileExhibition.TransactOpts, _fingerprint, _title, _description, _artist, _medium, _editionSize)
}

// CreateArtwork is a paid mutator transaction binding the contract method 0x0dd62a0d.
//
// Solidity: function createArtwork(string _fingerprint, string _title, string _description, address _artist, string _medium, uint256 _editionSize) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) CreateArtwork(_fingerprint string, _title string, _description string, _artist common.Address, _medium string, _editionSize *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.CreateArtwork(&_FeralfileExhibition.TransactOpts, _fingerprint, _title, _description, _artist, _medium, _editionSize)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) RenounceOwnership() (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.RenounceOwnership(&_FeralfileExhibition.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.RenounceOwnership(&_FeralfileExhibition.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SafeTransferFrom(&_FeralfileExhibition.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SafeTransferFrom(&_FeralfileExhibition.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SafeTransferFrom0(&_FeralfileExhibition.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SafeTransferFrom0(&_FeralfileExhibition.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetApprovalForAll(&_FeralfileExhibition.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetApprovalForAll(&_FeralfileExhibition.TransactOpts, operator, approved)
}

// SetArtworkBaseURI is a paid mutator transaction binding the contract method 0x5bcdf74c.
//
// Solidity: function setArtworkBaseURI(string baseURI_) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) SetArtworkBaseURI(opts *bind.TransactOpts, baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "setArtworkBaseURI", baseURI_)
}

// SetArtworkBaseURI is a paid mutator transaction binding the contract method 0x5bcdf74c.
//
// Solidity: function setArtworkBaseURI(string baseURI_) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) SetArtworkBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetArtworkBaseURI(&_FeralfileExhibition.TransactOpts, baseURI_)
}

// SetArtworkBaseURI is a paid mutator transaction binding the contract method 0x5bcdf74c.
//
// Solidity: function setArtworkBaseURI(string baseURI_) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) SetArtworkBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetArtworkBaseURI(&_FeralfileExhibition.TransactOpts, baseURI_)
}

// SetTrustee is a paid mutator transaction binding the contract method 0xd0d1ea70.
//
// Solidity: function setTrustee(address _newTrustee) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) SetTrustee(opts *bind.TransactOpts, _newTrustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "setTrustee", _newTrustee)
}

// SetTrustee is a paid mutator transaction binding the contract method 0xd0d1ea70.
//
// Solidity: function setTrustee(address _newTrustee) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) SetTrustee(_newTrustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetTrustee(&_FeralfileExhibition.TransactOpts, _newTrustee)
}

// SetTrustee is a paid mutator transaction binding the contract method 0xd0d1ea70.
//
// Solidity: function setTrustee(address _newTrustee) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) SetTrustee(_newTrustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetTrustee(&_FeralfileExhibition.TransactOpts, _newTrustee)
}

// SwapArtworkFromBitmarks is a paid mutator transaction binding the contract method 0x1e734e4e.
//
// Solidity: function swapArtworkFromBitmarks(uint256 _artworkID, uint256 _bitmarkID, uint256 _editionNumber, address _owner, string _prevProvenance, string _ipfsCID) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) SwapArtworkFromBitmarks(opts *bind.TransactOpts, _artworkID *big.Int, _bitmarkID *big.Int, _editionNumber *big.Int, _owner common.Address, _prevProvenance string, _ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "swapArtworkFromBitmarks", _artworkID, _bitmarkID, _editionNumber, _owner, _prevProvenance, _ipfsCID)
}

// SwapArtworkFromBitmarks is a paid mutator transaction binding the contract method 0x1e734e4e.
//
// Solidity: function swapArtworkFromBitmarks(uint256 _artworkID, uint256 _bitmarkID, uint256 _editionNumber, address _owner, string _prevProvenance, string _ipfsCID) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) SwapArtworkFromBitmarks(_artworkID *big.Int, _bitmarkID *big.Int, _editionNumber *big.Int, _owner common.Address, _prevProvenance string, _ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SwapArtworkFromBitmarks(&_FeralfileExhibition.TransactOpts, _artworkID, _bitmarkID, _editionNumber, _owner, _prevProvenance, _ipfsCID)
}

// SwapArtworkFromBitmarks is a paid mutator transaction binding the contract method 0x1e734e4e.
//
// Solidity: function swapArtworkFromBitmarks(uint256 _artworkID, uint256 _bitmarkID, uint256 _editionNumber, address _owner, string _prevProvenance, string _ipfsCID) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) SwapArtworkFromBitmarks(_artworkID *big.Int, _bitmarkID *big.Int, _editionNumber *big.Int, _owner common.Address, _prevProvenance string, _ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SwapArtworkFromBitmarks(&_FeralfileExhibition.TransactOpts, _artworkID, _bitmarkID, _editionNumber, _owner, _prevProvenance, _ipfsCID)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.TransferFrom(&_FeralfileExhibition.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.TransferFrom(&_FeralfileExhibition.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.TransferOwnership(&_FeralfileExhibition.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.TransferOwnership(&_FeralfileExhibition.TransactOpts, newOwner)
}

// FeralfileExhibitionApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the FeralfileExhibition contract.
type FeralfileExhibitionApprovalIterator struct {
	Event *FeralfileExhibitionApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionApproval represents a Approval event raised by the FeralfileExhibition contract.
type FeralfileExhibitionApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*FeralfileExhibitionApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionApprovalIterator{contract: _FeralfileExhibition.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionApproval)
				if err := _FeralfileExhibition.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) ParseApproval(log types.Log) (*FeralfileExhibitionApproval, error) {
	event := new(FeralfileExhibitionApproval)
	if err := _FeralfileExhibition.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the FeralfileExhibition contract.
type FeralfileExhibitionApprovalForAllIterator struct {
	Event *FeralfileExhibitionApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionApprovalForAll represents a ApprovalForAll event raised by the FeralfileExhibition contract.
type FeralfileExhibitionApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*FeralfileExhibitionApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionApprovalForAllIterator{contract: _FeralfileExhibition.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionApprovalForAll)
				if err := _FeralfileExhibition.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) ParseApprovalForAll(log types.Log) (*FeralfileExhibitionApprovalForAll, error) {
	event := new(FeralfileExhibitionApprovalForAll)
	if err := _FeralfileExhibition.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionNewArtworkIterator is returned from FilterNewArtwork and is used to iterate over the raw logs and unpacked data for NewArtwork events raised by the FeralfileExhibition contract.
type FeralfileExhibitionNewArtworkIterator struct {
	Event *FeralfileExhibitionNewArtwork // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionNewArtworkIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionNewArtwork)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionNewArtwork)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionNewArtworkIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionNewArtworkIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionNewArtwork represents a NewArtwork event raised by the FeralfileExhibition contract.
type FeralfileExhibitionNewArtwork struct {
	Creator   common.Address
	ArtworkID *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewArtwork is a free log retrieval operation binding the contract event 0x997bc5bd0747442b15dc8315d11d6dad5b3afd0a1504a6882f57d988dfe98451.
//
// Solidity: event NewArtwork(address indexed creator, uint256 indexed artworkID)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) FilterNewArtwork(opts *bind.FilterOpts, creator []common.Address, artworkID []*big.Int) (*FeralfileExhibitionNewArtworkIterator, error) {

	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}
	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.FilterLogs(opts, "NewArtwork", creatorRule, artworkIDRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionNewArtworkIterator{contract: _FeralfileExhibition.contract, event: "NewArtwork", logs: logs, sub: sub}, nil
}

// WatchNewArtwork is a free log subscription operation binding the contract event 0x997bc5bd0747442b15dc8315d11d6dad5b3afd0a1504a6882f57d988dfe98451.
//
// Solidity: event NewArtwork(address indexed creator, uint256 indexed artworkID)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) WatchNewArtwork(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionNewArtwork, creator []common.Address, artworkID []*big.Int) (event.Subscription, error) {

	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}
	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.WatchLogs(opts, "NewArtwork", creatorRule, artworkIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionNewArtwork)
				if err := _FeralfileExhibition.contract.UnpackLog(event, "NewArtwork", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewArtwork is a log parse operation binding the contract event 0x997bc5bd0747442b15dc8315d11d6dad5b3afd0a1504a6882f57d988dfe98451.
//
// Solidity: event NewArtwork(address indexed creator, uint256 indexed artworkID)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) ParseNewArtwork(log types.Log) (*FeralfileExhibitionNewArtwork, error) {
	event := new(FeralfileExhibitionNewArtwork)
	if err := _FeralfileExhibition.contract.UnpackLog(event, "NewArtwork", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionNewArtworkEditionIterator is returned from FilterNewArtworkEdition and is used to iterate over the raw logs and unpacked data for NewArtworkEdition events raised by the FeralfileExhibition contract.
type FeralfileExhibitionNewArtworkEditionIterator struct {
	Event *FeralfileExhibitionNewArtworkEdition // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionNewArtworkEditionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionNewArtworkEdition)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionNewArtworkEdition)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionNewArtworkEditionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionNewArtworkEditionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionNewArtworkEdition represents a NewArtworkEdition event raised by the FeralfileExhibition contract.
type FeralfileExhibitionNewArtworkEdition struct {
	Owner     common.Address
	ArtworkID *big.Int
	EditionID *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewArtworkEdition is a free log retrieval operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) FilterNewArtworkEdition(opts *bind.FilterOpts, owner []common.Address, artworkID []*big.Int, editionID []*big.Int) (*FeralfileExhibitionNewArtworkEditionIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}
	var editionIDRule []interface{}
	for _, editionIDItem := range editionID {
		editionIDRule = append(editionIDRule, editionIDItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.FilterLogs(opts, "NewArtworkEdition", ownerRule, artworkIDRule, editionIDRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionNewArtworkEditionIterator{contract: _FeralfileExhibition.contract, event: "NewArtworkEdition", logs: logs, sub: sub}, nil
}

// WatchNewArtworkEdition is a free log subscription operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) WatchNewArtworkEdition(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionNewArtworkEdition, owner []common.Address, artworkID []*big.Int, editionID []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}
	var editionIDRule []interface{}
	for _, editionIDItem := range editionID {
		editionIDRule = append(editionIDRule, editionIDItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.WatchLogs(opts, "NewArtworkEdition", ownerRule, artworkIDRule, editionIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionNewArtworkEdition)
				if err := _FeralfileExhibition.contract.UnpackLog(event, "NewArtworkEdition", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewArtworkEdition is a log parse operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) ParseNewArtworkEdition(log types.Log) (*FeralfileExhibitionNewArtworkEdition, error) {
	event := new(FeralfileExhibitionNewArtworkEdition)
	if err := _FeralfileExhibition.contract.UnpackLog(event, "NewArtworkEdition", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the FeralfileExhibition contract.
type FeralfileExhibitionOwnershipTransferredIterator struct {
	Event *FeralfileExhibitionOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionOwnershipTransferred represents a OwnershipTransferred event raised by the FeralfileExhibition contract.
type FeralfileExhibitionOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FeralfileExhibitionOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionOwnershipTransferredIterator{contract: _FeralfileExhibition.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionOwnershipTransferred)
				if err := _FeralfileExhibition.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) ParseOwnershipTransferred(log types.Log) (*FeralfileExhibitionOwnershipTransferred, error) {
	event := new(FeralfileExhibitionOwnershipTransferred)
	if err := _FeralfileExhibition.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the FeralfileExhibition contract.
type FeralfileExhibitionTransferIterator struct {
	Event *FeralfileExhibitionTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionTransfer represents a Transfer event raised by the FeralfileExhibition contract.
type FeralfileExhibitionTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*FeralfileExhibitionTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionTransferIterator{contract: _FeralfileExhibition.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionTransfer)
				if err := _FeralfileExhibition.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) ParseTransfer(log types.Log) (*FeralfileExhibitionTransfer, error) {
	event := new(FeralfileExhibitionTransfer)
	if err := _FeralfileExhibition.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
