// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package feralfile

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// FeralfileExhibitionABI is the input ABI used to generate the binding from.
const FeralfileExhibitionABI = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_curator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxEditionPerArtwork\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondarySaleRoyaltyBPS\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenBaseURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"}],\"name\":\"NewArtwork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionID\",\"type\":\"uint256\"}],\"name\":\"NewArtworkEdition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MaxRoyaltyBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworkEditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"editionID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bitmarkID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prevProvenance\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsCID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"fingerprint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"medium\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEditionPerArtwork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multipleRoyaltySharingPayoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondarySaleRoyaltyBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTrustee\",\"type\":\"address\"}],\"name\":\"setTrustee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"title\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_fingerprint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_artist\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_medium\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_editionSize\",\"type\":\"uint256\"}],\"name\":\"createArtwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalArtworks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getArtworkByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_artworkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bitmarkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_prevProvenance\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ipfsCID\",\"type\":\"string\"}],\"name\":\"swapArtworkFromBitmark\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ipfsCID\",\"type\":\"string\"}],\"name\":\"updateArtworkEditionIPFSCid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"}],\"name\":\"setMultipleRoyaltySharingPayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"}],\"name\":\"totalEditionOfArtwork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getArtworkEditionByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setArtworkBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// FeralfileExhibitionBin is the compiled bytecode used for deploying new contracts.
var FeralfileExhibitionBin = ""

// DeployFeralfileExhibition deploys a new Ethereum contract, binding an instance of FeralfileExhibition to it.
func DeployFeralfileExhibition(auth *bind.TransactOpts, backend bind.ContractBackend, _title string, _symbol string, _curator common.Address, _maxEditionPerArtwork *big.Int, _basePrice *big.Int, _secondarySaleRoyaltyBPS *big.Int, contractURI_ string, tokenBaseURI_ string) (common.Address, *types.Transaction, *FeralfileExhibition, error) {
	parsed, err := abi.JSON(strings.NewReader(FeralfileExhibitionABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(FeralfileExhibitionBin), backend, _title, _symbol, _curator, _maxEditionPerArtwork, _basePrice, _secondarySaleRoyaltyBPS, contractURI_, tokenBaseURI_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FeralfileExhibition{FeralfileExhibitionCaller: FeralfileExhibitionCaller{contract: contract}, FeralfileExhibitionTransactor: FeralfileExhibitionTransactor{contract: contract}, FeralfileExhibitionFilterer: FeralfileExhibitionFilterer{contract: contract}}, nil
}

// FeralfileExhibition is an auto generated Go binding around an Ethereum contract.
type FeralfileExhibition struct {
	FeralfileExhibitionCaller     // Read-only binding to the contract
	FeralfileExhibitionTransactor // Write-only binding to the contract
	FeralfileExhibitionFilterer   // Log filterer for contract events
}

// FeralfileExhibitionCaller is an auto generated read-only Go binding around an Ethereum contract.
type FeralfileExhibitionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FeralfileExhibitionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FeralfileExhibitionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FeralfileExhibitionSession struct {
	Contract     *FeralfileExhibition // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// FeralfileExhibitionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FeralfileExhibitionCallerSession struct {
	Contract *FeralfileExhibitionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// FeralfileExhibitionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FeralfileExhibitionTransactorSession struct {
	Contract     *FeralfileExhibitionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// FeralfileExhibitionRaw is an auto generated low-level Go binding around an Ethereum contract.
type FeralfileExhibitionRaw struct {
	Contract *FeralfileExhibition // Generic contract binding to access the raw methods on
}

// FeralfileExhibitionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FeralfileExhibitionCallerRaw struct {
	Contract *FeralfileExhibitionCaller // Generic read-only contract binding to access the raw methods on
}

// FeralfileExhibitionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FeralfileExhibitionTransactorRaw struct {
	Contract *FeralfileExhibitionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFeralfileExhibition creates a new instance of FeralfileExhibition, bound to a specific deployed contract.
func NewFeralfileExhibition(address common.Address, backend bind.ContractBackend) (*FeralfileExhibition, error) {
	contract, err := bindFeralfileExhibition(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibition{FeralfileExhibitionCaller: FeralfileExhibitionCaller{contract: contract}, FeralfileExhibitionTransactor: FeralfileExhibitionTransactor{contract: contract}, FeralfileExhibitionFilterer: FeralfileExhibitionFilterer{contract: contract}}, nil
}

// NewFeralfileExhibitionCaller creates a new read-only instance of FeralfileExhibition, bound to a specific deployed contract.
func NewFeralfileExhibitionCaller(address common.Address, caller bind.ContractCaller) (*FeralfileExhibitionCaller, error) {
	contract, err := bindFeralfileExhibition(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionCaller{contract: contract}, nil
}

// NewFeralfileExhibitionTransactor creates a new write-only instance of FeralfileExhibition, bound to a specific deployed contract.
func NewFeralfileExhibitionTransactor(address common.Address, transactor bind.ContractTransactor) (*FeralfileExhibitionTransactor, error) {
	contract, err := bindFeralfileExhibition(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionTransactor{contract: contract}, nil
}

// NewFeralfileExhibitionFilterer creates a new log filterer instance of FeralfileExhibition, bound to a specific deployed contract.
func NewFeralfileExhibitionFilterer(address common.Address, filterer bind.ContractFilterer) (*FeralfileExhibitionFilterer, error) {
	contract, err := bindFeralfileExhibition(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionFilterer{contract: contract}, nil
}

// bindFeralfileExhibition binds a generic wrapper to an already deployed contract.
func bindFeralfileExhibition(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FeralfileExhibitionABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeralfileExhibition *FeralfileExhibitionRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeralfileExhibition.Contract.FeralfileExhibitionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeralfileExhibition *FeralfileExhibitionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.FeralfileExhibitionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeralfileExhibition *FeralfileExhibitionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.FeralfileExhibitionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeralfileExhibition *FeralfileExhibitionCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeralfileExhibition.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeralfileExhibition *FeralfileExhibitionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeralfileExhibition *FeralfileExhibitionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.contract.Transact(opts, method, params...)
}

// MaxRoyaltyBPS is a free data retrieval call binding the contract method 0x240804d9.
//
// Solidity: function MaxRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) MaxRoyaltyBPS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "MaxRoyaltyBPS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxRoyaltyBPS is a free data retrieval call binding the contract method 0x240804d9.
//
// Solidity: function MaxRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) MaxRoyaltyBPS() (*big.Int, error) {
	return _FeralfileExhibition.Contract.MaxRoyaltyBPS(&_FeralfileExhibition.CallOpts)
}

// MaxRoyaltyBPS is a free data retrieval call binding the contract method 0x240804d9.
//
// Solidity: function MaxRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) MaxRoyaltyBPS() (*big.Int, error) {
	return _FeralfileExhibition.Contract.MaxRoyaltyBPS(&_FeralfileExhibition.CallOpts)
}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, uint256 editionNumber, uint256 artworkID, uint256 bitmarkID, string prevProvenance, string ipfsCID)
func (_FeralfileExhibition *FeralfileExhibitionCaller) ArtworkEditions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	EditionID      *big.Int
	EditionNumber  *big.Int
	ArtworkID      *big.Int
	BitmarkID      *big.Int
	PrevProvenance string
	IpfsCID        string
}, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "artworkEditions", arg0)

	outstruct := new(struct {
		EditionID      *big.Int
		EditionNumber  *big.Int
		ArtworkID      *big.Int
		BitmarkID      *big.Int
		PrevProvenance string
		IpfsCID        string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.EditionID = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.EditionNumber = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.ArtworkID = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.BitmarkID = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.PrevProvenance = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.IpfsCID = *abi.ConvertType(out[5], new(string)).(*string)

	return *outstruct, err

}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, uint256 editionNumber, uint256 artworkID, uint256 bitmarkID, string prevProvenance, string ipfsCID)
func (_FeralfileExhibition *FeralfileExhibitionSession) ArtworkEditions(arg0 *big.Int) (struct {
	EditionID      *big.Int
	EditionNumber  *big.Int
	ArtworkID      *big.Int
	BitmarkID      *big.Int
	PrevProvenance string
	IpfsCID        string
}, error) {
	return _FeralfileExhibition.Contract.ArtworkEditions(&_FeralfileExhibition.CallOpts, arg0)
}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, uint256 editionNumber, uint256 artworkID, uint256 bitmarkID, string prevProvenance, string ipfsCID)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) ArtworkEditions(arg0 *big.Int) (struct {
	EditionID      *big.Int
	EditionNumber  *big.Int
	ArtworkID      *big.Int
	BitmarkID      *big.Int
	PrevProvenance string
	IpfsCID        string
}, error) {
	return _FeralfileExhibition.Contract.ArtworkEditions(&_FeralfileExhibition.CallOpts, arg0)
}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string fingerprint, string title, string description, address artist, string medium, uint256 editionSize)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Artworks(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Fingerprint string
	Title       string
	Description string
	Artist      common.Address
	Medium      string
	EditionSize *big.Int
}, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "artworks", arg0)

	outstruct := new(struct {
		Fingerprint string
		Title       string
		Description string
		Artist      common.Address
		Medium      string
		EditionSize *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fingerprint = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Title = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Description = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.Artist = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.Medium = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.EditionSize = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string fingerprint, string title, string description, address artist, string medium, uint256 editionSize)
func (_FeralfileExhibition *FeralfileExhibitionSession) Artworks(arg0 *big.Int) (struct {
	Fingerprint string
	Title       string
	Description string
	Artist      common.Address
	Medium      string
	EditionSize *big.Int
}, error) {
	return _FeralfileExhibition.Contract.Artworks(&_FeralfileExhibition.CallOpts, arg0)
}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(string fingerprint, string title, string description, address artist, string medium, uint256 editionSize)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Artworks(arg0 *big.Int) (struct {
	Fingerprint string
	Title       string
	Description string
	Artist      common.Address
	Medium      string
	EditionSize *big.Int
}, error) {
	return _FeralfileExhibition.Contract.Artworks(&_FeralfileExhibition.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _FeralfileExhibition.Contract.BalanceOf(&_FeralfileExhibition.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _FeralfileExhibition.Contract.BalanceOf(&_FeralfileExhibition.CallOpts, owner)
}

// BasePrice is a free data retrieval call binding the contract method 0xc7876ea4.
//
// Solidity: function basePrice() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) BasePrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "basePrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BasePrice is a free data retrieval call binding the contract method 0xc7876ea4.
//
// Solidity: function basePrice() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) BasePrice() (*big.Int, error) {
	return _FeralfileExhibition.Contract.BasePrice(&_FeralfileExhibition.CallOpts)
}

// BasePrice is a free data retrieval call binding the contract method 0xc7876ea4.
//
// Solidity: function basePrice() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) BasePrice() (*big.Int, error) {
	return _FeralfileExhibition.Contract.BasePrice(&_FeralfileExhibition.CallOpts)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCaller) ContractURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "contractURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionSession) ContractURI() (string, error) {
	return _FeralfileExhibition.Contract.ContractURI(&_FeralfileExhibition.CallOpts)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) ContractURI() (string, error) {
	return _FeralfileExhibition.Contract.ContractURI(&_FeralfileExhibition.CallOpts)
}

// Curator is a free data retrieval call binding the contract method 0xe66f53b7.
//
// Solidity: function curator() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Curator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "curator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Curator is a free data retrieval call binding the contract method 0xe66f53b7.
//
// Solidity: function curator() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionSession) Curator() (common.Address, error) {
	return _FeralfileExhibition.Contract.Curator(&_FeralfileExhibition.CallOpts)
}

// Curator is a free data retrieval call binding the contract method 0xe66f53b7.
//
// Solidity: function curator() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Curator() (common.Address, error) {
	return _FeralfileExhibition.Contract.Curator(&_FeralfileExhibition.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibition.Contract.GetApproved(&_FeralfileExhibition.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibition.Contract.GetApproved(&_FeralfileExhibition.CallOpts, tokenId)
}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) GetArtworkByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "getArtworkByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) GetArtworkByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.GetArtworkByIndex(&_FeralfileExhibition.CallOpts, index)
}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) GetArtworkByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.GetArtworkByIndex(&_FeralfileExhibition.CallOpts, index)
}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) GetArtworkEditionByIndex(opts *bind.CallOpts, artworkID *big.Int, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "getArtworkEditionByIndex", artworkID, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) GetArtworkEditionByIndex(artworkID *big.Int, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.GetArtworkEditionByIndex(&_FeralfileExhibition.CallOpts, artworkID, index)
}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) GetArtworkEditionByIndex(artworkID *big.Int, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.GetArtworkEditionByIndex(&_FeralfileExhibition.CallOpts, artworkID, index)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _FeralfileExhibition.Contract.IsApprovedForAll(&_FeralfileExhibition.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _FeralfileExhibition.Contract.IsApprovedForAll(&_FeralfileExhibition.CallOpts, owner, operator)
}

// MaxEditionPerArtwork is a free data retrieval call binding the contract method 0x84ad61af.
//
// Solidity: function maxEditionPerArtwork() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) MaxEditionPerArtwork(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "maxEditionPerArtwork")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxEditionPerArtwork is a free data retrieval call binding the contract method 0x84ad61af.
//
// Solidity: function maxEditionPerArtwork() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) MaxEditionPerArtwork() (*big.Int, error) {
	return _FeralfileExhibition.Contract.MaxEditionPerArtwork(&_FeralfileExhibition.CallOpts)
}

// MaxEditionPerArtwork is a free data retrieval call binding the contract method 0x84ad61af.
//
// Solidity: function maxEditionPerArtwork() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) MaxEditionPerArtwork() (*big.Int, error) {
	return _FeralfileExhibition.Contract.MaxEditionPerArtwork(&_FeralfileExhibition.CallOpts)
}

// MultipleRoyaltySharingPayoutAddress is a free data retrieval call binding the contract method 0x39ce3b02.
//
// Solidity: function multipleRoyaltySharingPayoutAddress() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCaller) MultipleRoyaltySharingPayoutAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "multipleRoyaltySharingPayoutAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MultipleRoyaltySharingPayoutAddress is a free data retrieval call binding the contract method 0x39ce3b02.
//
// Solidity: function multipleRoyaltySharingPayoutAddress() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionSession) MultipleRoyaltySharingPayoutAddress() (common.Address, error) {
	return _FeralfileExhibition.Contract.MultipleRoyaltySharingPayoutAddress(&_FeralfileExhibition.CallOpts)
}

// MultipleRoyaltySharingPayoutAddress is a free data retrieval call binding the contract method 0x39ce3b02.
//
// Solidity: function multipleRoyaltySharingPayoutAddress() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) MultipleRoyaltySharingPayoutAddress() (common.Address, error) {
	return _FeralfileExhibition.Contract.MultipleRoyaltySharingPayoutAddress(&_FeralfileExhibition.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionSession) Name() (string, error) {
	return _FeralfileExhibition.Contract.Name(&_FeralfileExhibition.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Name() (string, error) {
	return _FeralfileExhibition.Contract.Name(&_FeralfileExhibition.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionSession) Owner() (common.Address, error) {
	return _FeralfileExhibition.Contract.Owner(&_FeralfileExhibition.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Owner() (common.Address, error) {
	return _FeralfileExhibition.Contract.Owner(&_FeralfileExhibition.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibition.Contract.OwnerOf(&_FeralfileExhibition.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibition.Contract.OwnerOf(&_FeralfileExhibition.CallOpts, tokenId)
}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 _tokenId, uint256 _value) view returns(address _receiver, uint256 _royaltyAmount)
func (_FeralfileExhibition *FeralfileExhibitionCaller) RoyaltyInfo(opts *bind.CallOpts, _tokenId *big.Int, _value *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "royaltyInfo", _tokenId, _value)

	outstruct := new(struct {
		Receiver      common.Address
		RoyaltyAmount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Receiver = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.RoyaltyAmount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 _tokenId, uint256 _value) view returns(address _receiver, uint256 _royaltyAmount)
func (_FeralfileExhibition *FeralfileExhibitionSession) RoyaltyInfo(_tokenId *big.Int, _value *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	return _FeralfileExhibition.Contract.RoyaltyInfo(&_FeralfileExhibition.CallOpts, _tokenId, _value)
}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 _tokenId, uint256 _value) view returns(address _receiver, uint256 _royaltyAmount)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) RoyaltyInfo(_tokenId *big.Int, _value *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	return _FeralfileExhibition.Contract.RoyaltyInfo(&_FeralfileExhibition.CallOpts, _tokenId, _value)
}

// SecondarySaleRoyaltyBPS is a free data retrieval call binding the contract method 0xea211d7c.
//
// Solidity: function secondarySaleRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) SecondarySaleRoyaltyBPS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "secondarySaleRoyaltyBPS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SecondarySaleRoyaltyBPS is a free data retrieval call binding the contract method 0xea211d7c.
//
// Solidity: function secondarySaleRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) SecondarySaleRoyaltyBPS() (*big.Int, error) {
	return _FeralfileExhibition.Contract.SecondarySaleRoyaltyBPS(&_FeralfileExhibition.CallOpts)
}

// SecondarySaleRoyaltyBPS is a free data retrieval call binding the contract method 0xea211d7c.
//
// Solidity: function secondarySaleRoyaltyBPS() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) SecondarySaleRoyaltyBPS() (*big.Int, error) {
	return _FeralfileExhibition.Contract.SecondarySaleRoyaltyBPS(&_FeralfileExhibition.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeralfileExhibition.Contract.SupportsInterface(&_FeralfileExhibition.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeralfileExhibition.Contract.SupportsInterface(&_FeralfileExhibition.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionSession) Symbol() (string, error) {
	return _FeralfileExhibition.Contract.Symbol(&_FeralfileExhibition.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Symbol() (string, error) {
	return _FeralfileExhibition.Contract.Symbol(&_FeralfileExhibition.CallOpts)
}

// Title is a free data retrieval call binding the contract method 0x4a79d50c.
//
// Solidity: function title() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Title(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "title")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Title is a free data retrieval call binding the contract method 0x4a79d50c.
//
// Solidity: function title() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionSession) Title() (string, error) {
	return _FeralfileExhibition.Contract.Title(&_FeralfileExhibition.CallOpts)
}

// Title is a free data retrieval call binding the contract method 0x4a79d50c.
//
// Solidity: function title() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Title() (string, error) {
	return _FeralfileExhibition.Contract.Title(&_FeralfileExhibition.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.TokenByIndex(&_FeralfileExhibition.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.TokenByIndex(&_FeralfileExhibition.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.TokenOfOwnerByIndex(&_FeralfileExhibition.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.TokenOfOwnerByIndex(&_FeralfileExhibition.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionSession) TokenURI(tokenId *big.Int) (string, error) {
	return _FeralfileExhibition.Contract.TokenURI(&_FeralfileExhibition.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _FeralfileExhibition.Contract.TokenURI(&_FeralfileExhibition.CallOpts, tokenId)
}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) TotalArtworks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "totalArtworks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) TotalArtworks() (*big.Int, error) {
	return _FeralfileExhibition.Contract.TotalArtworks(&_FeralfileExhibition.CallOpts)
}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) TotalArtworks() (*big.Int, error) {
	return _FeralfileExhibition.Contract.TotalArtworks(&_FeralfileExhibition.CallOpts)
}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) TotalEditionOfArtwork(opts *bind.CallOpts, artworkID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "totalEditionOfArtwork", artworkID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) TotalEditionOfArtwork(artworkID *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.TotalEditionOfArtwork(&_FeralfileExhibition.CallOpts, artworkID)
}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) TotalEditionOfArtwork(artworkID *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.TotalEditionOfArtwork(&_FeralfileExhibition.CallOpts, artworkID)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) TotalSupply() (*big.Int, error) {
	return _FeralfileExhibition.Contract.TotalSupply(&_FeralfileExhibition.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) TotalSupply() (*big.Int, error) {
	return _FeralfileExhibition.Contract.TotalSupply(&_FeralfileExhibition.CallOpts)
}

// Trustee is a free data retrieval call binding the contract method 0xfdf97cb2.
//
// Solidity: function trustee() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Trustee(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "trustee")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Trustee is a free data retrieval call binding the contract method 0xfdf97cb2.
//
// Solidity: function trustee() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionSession) Trustee() (common.Address, error) {
	return _FeralfileExhibition.Contract.Trustee(&_FeralfileExhibition.CallOpts)
}

// Trustee is a free data retrieval call binding the contract method 0xfdf97cb2.
//
// Solidity: function trustee() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Trustee() (common.Address, error) {
	return _FeralfileExhibition.Contract.Trustee(&_FeralfileExhibition.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.Approve(&_FeralfileExhibition.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.Approve(&_FeralfileExhibition.TransactOpts, to, tokenId)
}

// CreateArtwork is a paid mutator transaction binding the contract method 0x0dd62a0d.
//
// Solidity: function createArtwork(string _fingerprint, string _title, string _description, address _artist, string _medium, uint256 _editionSize) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) CreateArtwork(opts *bind.TransactOpts, _fingerprint string, _title string, _description string, _artist common.Address, _medium string, _editionSize *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "createArtwork", _fingerprint, _title, _description, _artist, _medium, _editionSize)
}

// CreateArtwork is a paid mutator transaction binding the contract method 0x0dd62a0d.
//
// Solidity: function createArtwork(string _fingerprint, string _title, string _description, address _artist, string _medium, uint256 _editionSize) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) CreateArtwork(_fingerprint string, _title string, _description string, _artist common.Address, _medium string, _editionSize *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.CreateArtwork(&_FeralfileExhibition.TransactOpts, _fingerprint, _title, _description, _artist, _medium, _editionSize)
}

// CreateArtwork is a paid mutator transaction binding the contract method 0x0dd62a0d.
//
// Solidity: function createArtwork(string _fingerprint, string _title, string _description, address _artist, string _medium, uint256 _editionSize) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) CreateArtwork(_fingerprint string, _title string, _description string, _artist common.Address, _medium string, _editionSize *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.CreateArtwork(&_FeralfileExhibition.TransactOpts, _fingerprint, _title, _description, _artist, _medium, _editionSize)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) RenounceOwnership() (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.RenounceOwnership(&_FeralfileExhibition.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.RenounceOwnership(&_FeralfileExhibition.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SafeTransferFrom(&_FeralfileExhibition.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SafeTransferFrom(&_FeralfileExhibition.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SafeTransferFrom0(&_FeralfileExhibition.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SafeTransferFrom0(&_FeralfileExhibition.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetApprovalForAll(&_FeralfileExhibition.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetApprovalForAll(&_FeralfileExhibition.TransactOpts, operator, approved)
}

// SetArtworkBaseURI is a paid mutator transaction binding the contract method 0x5bcdf74c.
//
// Solidity: function setArtworkBaseURI(string baseURI_) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) SetArtworkBaseURI(opts *bind.TransactOpts, baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "setArtworkBaseURI", baseURI_)
}

// SetArtworkBaseURI is a paid mutator transaction binding the contract method 0x5bcdf74c.
//
// Solidity: function setArtworkBaseURI(string baseURI_) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) SetArtworkBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetArtworkBaseURI(&_FeralfileExhibition.TransactOpts, baseURI_)
}

// SetArtworkBaseURI is a paid mutator transaction binding the contract method 0x5bcdf74c.
//
// Solidity: function setArtworkBaseURI(string baseURI_) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) SetArtworkBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetArtworkBaseURI(&_FeralfileExhibition.TransactOpts, baseURI_)
}

// SetMultipleRoyaltySharingPayoutAddress is a paid mutator transaction binding the contract method 0x4895ad74.
//
// Solidity: function setMultipleRoyaltySharingPayoutAddress(address payoutAddress) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) SetMultipleRoyaltySharingPayoutAddress(opts *bind.TransactOpts, payoutAddress common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "setMultipleRoyaltySharingPayoutAddress", payoutAddress)
}

// SetMultipleRoyaltySharingPayoutAddress is a paid mutator transaction binding the contract method 0x4895ad74.
//
// Solidity: function setMultipleRoyaltySharingPayoutAddress(address payoutAddress) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) SetMultipleRoyaltySharingPayoutAddress(payoutAddress common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetMultipleRoyaltySharingPayoutAddress(&_FeralfileExhibition.TransactOpts, payoutAddress)
}

// SetMultipleRoyaltySharingPayoutAddress is a paid mutator transaction binding the contract method 0x4895ad74.
//
// Solidity: function setMultipleRoyaltySharingPayoutAddress(address payoutAddress) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) SetMultipleRoyaltySharingPayoutAddress(payoutAddress common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetMultipleRoyaltySharingPayoutAddress(&_FeralfileExhibition.TransactOpts, payoutAddress)
}

// SetTrustee is a paid mutator transaction binding the contract method 0xd0d1ea70.
//
// Solidity: function setTrustee(address _newTrustee) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) SetTrustee(opts *bind.TransactOpts, _newTrustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "setTrustee", _newTrustee)
}

// SetTrustee is a paid mutator transaction binding the contract method 0xd0d1ea70.
//
// Solidity: function setTrustee(address _newTrustee) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) SetTrustee(_newTrustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetTrustee(&_FeralfileExhibition.TransactOpts, _newTrustee)
}

// SetTrustee is a paid mutator transaction binding the contract method 0xd0d1ea70.
//
// Solidity: function setTrustee(address _newTrustee) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) SetTrustee(_newTrustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetTrustee(&_FeralfileExhibition.TransactOpts, _newTrustee)
}

// SwapArtworkFromBitmark is a paid mutator transaction binding the contract method 0xac14cf0b.
//
// Solidity: function swapArtworkFromBitmark(uint256 _artworkID, uint256 _bitmarkID, uint256 _editionNumber, address _owner, string _prevProvenance, string _ipfsCID) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) SwapArtworkFromBitmark(opts *bind.TransactOpts, _artworkID *big.Int, _bitmarkID *big.Int, _editionNumber *big.Int, _owner common.Address, _prevProvenance string, _ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "swapArtworkFromBitmark", _artworkID, _bitmarkID, _editionNumber, _owner, _prevProvenance, _ipfsCID)
}

// SwapArtworkFromBitmark is a paid mutator transaction binding the contract method 0xac14cf0b.
//
// Solidity: function swapArtworkFromBitmark(uint256 _artworkID, uint256 _bitmarkID, uint256 _editionNumber, address _owner, string _prevProvenance, string _ipfsCID) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) SwapArtworkFromBitmark(_artworkID *big.Int, _bitmarkID *big.Int, _editionNumber *big.Int, _owner common.Address, _prevProvenance string, _ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SwapArtworkFromBitmark(&_FeralfileExhibition.TransactOpts, _artworkID, _bitmarkID, _editionNumber, _owner, _prevProvenance, _ipfsCID)
}

// SwapArtworkFromBitmark is a paid mutator transaction binding the contract method 0xac14cf0b.
//
// Solidity: function swapArtworkFromBitmark(uint256 _artworkID, uint256 _bitmarkID, uint256 _editionNumber, address _owner, string _prevProvenance, string _ipfsCID) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) SwapArtworkFromBitmark(_artworkID *big.Int, _bitmarkID *big.Int, _editionNumber *big.Int, _owner common.Address, _prevProvenance string, _ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SwapArtworkFromBitmark(&_FeralfileExhibition.TransactOpts, _artworkID, _bitmarkID, _editionNumber, _owner, _prevProvenance, _ipfsCID)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.TransferFrom(&_FeralfileExhibition.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.TransferFrom(&_FeralfileExhibition.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.TransferOwnership(&_FeralfileExhibition.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.TransferOwnership(&_FeralfileExhibition.TransactOpts, newOwner)
}

// UpdateArtworkEditionIPFSCid is a paid mutator transaction binding the contract method 0x0cfcb5f1.
//
// Solidity: function updateArtworkEditionIPFSCid(uint256 _tokenId, string _ipfsCID) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) UpdateArtworkEditionIPFSCid(opts *bind.TransactOpts, _tokenId *big.Int, _ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "updateArtworkEditionIPFSCid", _tokenId, _ipfsCID)
}

// UpdateArtworkEditionIPFSCid is a paid mutator transaction binding the contract method 0x0cfcb5f1.
//
// Solidity: function updateArtworkEditionIPFSCid(uint256 _tokenId, string _ipfsCID) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) UpdateArtworkEditionIPFSCid(_tokenId *big.Int, _ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.UpdateArtworkEditionIPFSCid(&_FeralfileExhibition.TransactOpts, _tokenId, _ipfsCID)
}

// UpdateArtworkEditionIPFSCid is a paid mutator transaction binding the contract method 0x0cfcb5f1.
//
// Solidity: function updateArtworkEditionIPFSCid(uint256 _tokenId, string _ipfsCID) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) UpdateArtworkEditionIPFSCid(_tokenId *big.Int, _ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.UpdateArtworkEditionIPFSCid(&_FeralfileExhibition.TransactOpts, _tokenId, _ipfsCID)
}

// FeralfileExhibitionApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the FeralfileExhibition contract.
type FeralfileExhibitionApprovalIterator struct {
	Event *FeralfileExhibitionApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionApproval represents a Approval event raised by the FeralfileExhibition contract.
type FeralfileExhibitionApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*FeralfileExhibitionApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionApprovalIterator{contract: _FeralfileExhibition.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionApproval)
				if err := _FeralfileExhibition.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) ParseApproval(log types.Log) (*FeralfileExhibitionApproval, error) {
	event := new(FeralfileExhibitionApproval)
	if err := _FeralfileExhibition.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the FeralfileExhibition contract.
type FeralfileExhibitionApprovalForAllIterator struct {
	Event *FeralfileExhibitionApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionApprovalForAll represents a ApprovalForAll event raised by the FeralfileExhibition contract.
type FeralfileExhibitionApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*FeralfileExhibitionApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionApprovalForAllIterator{contract: _FeralfileExhibition.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionApprovalForAll)
				if err := _FeralfileExhibition.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) ParseApprovalForAll(log types.Log) (*FeralfileExhibitionApprovalForAll, error) {
	event := new(FeralfileExhibitionApprovalForAll)
	if err := _FeralfileExhibition.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionNewArtworkIterator is returned from FilterNewArtwork and is used to iterate over the raw logs and unpacked data for NewArtwork events raised by the FeralfileExhibition contract.
type FeralfileExhibitionNewArtworkIterator struct {
	Event *FeralfileExhibitionNewArtwork // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionNewArtworkIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionNewArtwork)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionNewArtwork)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionNewArtworkIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionNewArtworkIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionNewArtwork represents a NewArtwork event raised by the FeralfileExhibition contract.
type FeralfileExhibitionNewArtwork struct {
	Creator   common.Address
	ArtworkID *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewArtwork is a free log retrieval operation binding the contract event 0x997bc5bd0747442b15dc8315d11d6dad5b3afd0a1504a6882f57d988dfe98451.
//
// Solidity: event NewArtwork(address indexed creator, uint256 indexed artworkID)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) FilterNewArtwork(opts *bind.FilterOpts, creator []common.Address, artworkID []*big.Int) (*FeralfileExhibitionNewArtworkIterator, error) {

	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}
	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.FilterLogs(opts, "NewArtwork", creatorRule, artworkIDRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionNewArtworkIterator{contract: _FeralfileExhibition.contract, event: "NewArtwork", logs: logs, sub: sub}, nil
}

// WatchNewArtwork is a free log subscription operation binding the contract event 0x997bc5bd0747442b15dc8315d11d6dad5b3afd0a1504a6882f57d988dfe98451.
//
// Solidity: event NewArtwork(address indexed creator, uint256 indexed artworkID)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) WatchNewArtwork(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionNewArtwork, creator []common.Address, artworkID []*big.Int) (event.Subscription, error) {

	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}
	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.WatchLogs(opts, "NewArtwork", creatorRule, artworkIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionNewArtwork)
				if err := _FeralfileExhibition.contract.UnpackLog(event, "NewArtwork", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewArtwork is a log parse operation binding the contract event 0x997bc5bd0747442b15dc8315d11d6dad5b3afd0a1504a6882f57d988dfe98451.
//
// Solidity: event NewArtwork(address indexed creator, uint256 indexed artworkID)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) ParseNewArtwork(log types.Log) (*FeralfileExhibitionNewArtwork, error) {
	event := new(FeralfileExhibitionNewArtwork)
	if err := _FeralfileExhibition.contract.UnpackLog(event, "NewArtwork", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionNewArtworkEditionIterator is returned from FilterNewArtworkEdition and is used to iterate over the raw logs and unpacked data for NewArtworkEdition events raised by the FeralfileExhibition contract.
type FeralfileExhibitionNewArtworkEditionIterator struct {
	Event *FeralfileExhibitionNewArtworkEdition // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionNewArtworkEditionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionNewArtworkEdition)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionNewArtworkEdition)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionNewArtworkEditionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionNewArtworkEditionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionNewArtworkEdition represents a NewArtworkEdition event raised by the FeralfileExhibition contract.
type FeralfileExhibitionNewArtworkEdition struct {
	Owner     common.Address
	ArtworkID *big.Int
	EditionID *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewArtworkEdition is a free log retrieval operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) FilterNewArtworkEdition(opts *bind.FilterOpts, owner []common.Address, artworkID []*big.Int, editionID []*big.Int) (*FeralfileExhibitionNewArtworkEditionIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}
	var editionIDRule []interface{}
	for _, editionIDItem := range editionID {
		editionIDRule = append(editionIDRule, editionIDItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.FilterLogs(opts, "NewArtworkEdition", ownerRule, artworkIDRule, editionIDRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionNewArtworkEditionIterator{contract: _FeralfileExhibition.contract, event: "NewArtworkEdition", logs: logs, sub: sub}, nil
}

// WatchNewArtworkEdition is a free log subscription operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) WatchNewArtworkEdition(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionNewArtworkEdition, owner []common.Address, artworkID []*big.Int, editionID []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var artworkIDRule []interface{}
	for _, artworkIDItem := range artworkID {
		artworkIDRule = append(artworkIDRule, artworkIDItem)
	}
	var editionIDRule []interface{}
	for _, editionIDItem := range editionID {
		editionIDRule = append(editionIDRule, editionIDItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.WatchLogs(opts, "NewArtworkEdition", ownerRule, artworkIDRule, editionIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionNewArtworkEdition)
				if err := _FeralfileExhibition.contract.UnpackLog(event, "NewArtworkEdition", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewArtworkEdition is a log parse operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address indexed owner, uint256 indexed artworkID, uint256 indexed editionID)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) ParseNewArtworkEdition(log types.Log) (*FeralfileExhibitionNewArtworkEdition, error) {
	event := new(FeralfileExhibitionNewArtworkEdition)
	if err := _FeralfileExhibition.contract.UnpackLog(event, "NewArtworkEdition", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the FeralfileExhibition contract.
type FeralfileExhibitionOwnershipTransferredIterator struct {
	Event *FeralfileExhibitionOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionOwnershipTransferred represents a OwnershipTransferred event raised by the FeralfileExhibition contract.
type FeralfileExhibitionOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FeralfileExhibitionOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionOwnershipTransferredIterator{contract: _FeralfileExhibition.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionOwnershipTransferred)
				if err := _FeralfileExhibition.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) ParseOwnershipTransferred(log types.Log) (*FeralfileExhibitionOwnershipTransferred, error) {
	event := new(FeralfileExhibitionOwnershipTransferred)
	if err := _FeralfileExhibition.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the FeralfileExhibition contract.
type FeralfileExhibitionTransferIterator struct {
	Event *FeralfileExhibitionTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionTransfer represents a Transfer event raised by the FeralfileExhibition contract.
type FeralfileExhibitionTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*FeralfileExhibitionTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionTransferIterator{contract: _FeralfileExhibition.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionTransfer)
				if err := _FeralfileExhibition.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) ParseTransfer(log types.Log) (*FeralfileExhibitionTransfer, error) {
	event := new(FeralfileExhibitionTransfer)
	if err := _FeralfileExhibition.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
