// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package feralfile

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// FeralfileExhibitionABI is the input ABI used to generate the binding from.
const FeralfileExhibitionABI = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_curator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxEdition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_basePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenBaseURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_artworkID\",\"type\":\"uint256\"}],\"name\":\"NewArtwork\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_artworkID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_editionID\",\"type\":\"uint256\"}],\"name\":\"NewArtworkEdition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworkEditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"editionID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bitmarkID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsCID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworks\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"fingerprint\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"medium\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"minted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"curator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"maxEdition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTrustee\",\"type\":\"address\"}],\"name\":\"setTrustee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"title\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_fingerprint\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_artist\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_medium\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"}],\"name\":\"createArtwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalArtworks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getArtworkByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_artworkID\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_ipfsCIDs\",\"type\":\"string[]\"}],\"name\":\"mintArtwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"hasOwnedBy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionID\",\"type\":\"uint256\"}],\"name\":\"editionProvenances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_artworkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bitmarkIDs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ipfsCID\",\"type\":\"string\"}],\"name\":\"swapArtworkFromBitmarks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"}],\"name\":\"totalEditionOfArtwork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"artworkID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getArtworkEditionByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setArtworkBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// FeralfileExhibitionBin is the compiled bytecode used for deploying new contracts.
var FeralfileExhibitionBin = "0x60806040523480156200001157600080fd5b506040516200620d3803806200620d83398181016040528101906200003791906200037a565b85858160009080519060200190620000519291906200022a565b5080600190805190602001906200006a9291906200022a565b5050506200008d620000816200015c60201b60201c565b6200016460201b60201c565b6000600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600c9080519060200190620000e79291906200022a565b5083600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600e8190555081600f8190555080601090805190602001906200014f9291906200022a565b50505050505050620005fe565b600033905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620002389062000536565b90600052602060002090601f0160209004810192826200025c5760008555620002a8565b82601f106200027757805160ff1916838001178555620002a8565b82800160010185558215620002a8579182015b82811115620002a75782518255916020019190600101906200028a565b5b509050620002b79190620002bb565b5090565b5b80821115620002d6576000816000905550600101620002bc565b5090565b6000620002f1620002eb846200048f565b6200045b565b9050828152602081018484840111156200030a57600080fd5b6200031784828562000500565b509392505050565b6000815190506200033081620005ca565b92915050565b600082601f8301126200034857600080fd5b81516200035a848260208601620002da565b91505092915050565b6000815190506200037481620005e4565b92915050565b60008060008060008060c087890312156200039457600080fd5b600087015167ffffffffffffffff811115620003af57600080fd5b620003bd89828a0162000336565b965050602087015167ffffffffffffffff811115620003db57600080fd5b620003e989828a0162000336565b9550506040620003fc89828a016200031f565b94505060606200040f89828a0162000363565b93505060806200042289828a0162000363565b92505060a087015167ffffffffffffffff8111156200044057600080fd5b6200044e89828a0162000336565b9150509295509295509295565b6000604051905081810181811067ffffffffffffffff821117156200048557620004846200059b565b5b8060405250919050565b600067ffffffffffffffff821115620004ad57620004ac6200059b565b5b601f19601f8301169050602081019050919050565b6000620004cf82620004d6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156200052057808201518184015260208101905062000503565b8381111562000530576000848401525b50505050565b600060028204905060018216806200054f57607f821691505b602082108114156200056657620005656200056c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620005d581620004c2565b8114620005e157600080fd5b50565b620005ef81620004f6565b8114620005fb57600080fd5b50565b615bff806200060e6000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c806370a0823111610130578063bd6a5f35116100b8578063e66f53b71161007c578063e66f53b7146106ba578063e985e9c5146106d8578063f2fde38b14610708578063fdf97cb214610724578063fe2a3bf31461074257610227565b8063bd6a5f3514610616578063c7876ea414610632578063c87b56dd14610650578063d0d1ea7014610680578063e4a233e11461069c57610227565b806395d89b41116100ff57806395d89b4114610574578063a22cb46514610592578063b260c0e7146105ae578063b4883703146105ca578063b88d4fde146105fa57610227565b806370a08231146104ec578063715018a61461051c57806386dc0e73146105265780638da5cb5b1461055657610227565b80634a79d50c116101b35780635bcdf74c116101825780635bcdf74c1461041e57806362fe21311461043a5780636352211e1461046e578063641b18e91461049e5780636af51703146104ce57610227565b80634a79d50c1461037d5780634b6026731461039b5780634cfdbdb8146103d25780634f6ccce7146103ee57610227565b80630f28b0c9116101fa5780630f28b0c9146102c657806318160ddd146102f757806323b872dd146103155780632f745c591461033157806342842e0e1461036157610227565b806301ffc9a71461022c57806306fdde031461025c578063081812fc1461027a578063095ea7b3146102aa575b600080fd5b610246600480360381019061024191906144b4565b610772565b60405161025391906152d8565b60405180910390f35b6102646107ec565b60405161027191906153a1565b60405180910390f35b610294600480360381019061028f9190614547565b61087e565b6040516102a191906151da565b60405180910390f35b6102c460048036038101906102bf9190614392565b610903565b005b6102e060048036038101906102db9190614547565b610a1b565b6040516102ee9291906152a1565b60405180910390f35b6102ff610d43565b60405161030c91906156e3565b60405180910390f35b61032f600480360381019061032a919061428c565b610d50565b005b61034b60048036038101906103469190614392565b610db0565b60405161035891906156e3565b60405180910390f35b61037b6004803603810190610376919061428c565b610e55565b005b610385610e75565b60405161039291906153a1565b60405180910390f35b6103b560048036038101906103b09190614547565b610f03565b6040516103c998979695949392919061530e565b60405180910390f35b6103ec60048036038101906103e791906145ac565b611110565b005b61040860048036038101906104039190614547565b611855565b60405161041591906156e3565b60405180910390f35b61043860048036038101906104339190614506565b6118ec565b005b610454600480360381019061044f9190614547565b61199d565b604051610465959493929190615727565b60405180910390f35b61048860048036038101906104839190614547565b611a5b565b60405161049591906151da565b60405180910390f35b6104b860048036038101906104b39190614600565b611b0d565b6040516104c591906156e3565b60405180910390f35b6104d6611b81565b6040516104e391906156e3565b60405180910390f35b61050660048036038101906105019190614227565b611b87565b60405161051391906156e3565b60405180910390f35b610524611c3f565b005b610540600480360381019061053b9190614570565b611cc7565b60405161054d91906152d8565b60405180910390f35b61055e611e4e565b60405161056b91906151da565b60405180910390f35b61057c611e78565b60405161058991906153a1565b60405180910390f35b6105ac60048036038101906105a79190614356565b611f0a565b005b6105c860048036038101906105c3919061463c565b61208b565b005b6105e460048036038101906105df9190614547565b612706565b6040516105f191906156e3565b60405180910390f35b610614600480360381019061060f91906142db565b61279d565b005b610630600480360381019061062b91906143ce565b6127ff565b005b61063a612b63565b60405161064791906156e3565b60405180910390f35b61066a60048036038101906106659190614547565b612b69565b60405161067791906153a1565b60405180910390f35b61069a60048036038101906106959190614227565b612cb0565b005b6106a4612d70565b6040516106b191906156e3565b60405180910390f35b6106c2612d7d565b6040516106cf91906151da565b60405180910390f35b6106f260048036038101906106ed9190614250565b612da3565b6040516106ff91906152d8565b60405180910390f35b610722600480360381019061071d9190614227565b612e37565b005b61072c612f2f565b60405161073991906151da565b60405180910390f35b61075c60048036038101906107579190614547565b612f55565b60405161076991906156e3565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107e557506107e482612f75565b5b9050919050565b6060600080546107fb90615a3d565b80601f016020809104026020016040519081016040528092919081815260200182805461082790615a3d565b80156108745780601f1061084957610100808354040283529160200191610874565b820191906000526020600020905b81548152906001019060200180831161085757829003601f168201915b5050505050905090565b600061088982613057565b6108c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bf906155a3565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061090e82611a5b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561097f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097690615623565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661099e6130c3565b73ffffffffffffffffffffffffffffffffffffffff1614806109cd57506109cc816109c76130c3565b612da3565b5b610a0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0390615523565b60405180910390fd5b610a1683836130cb565b505050565b606080600060166000858152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610ae557838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505081526020019060010190610a53565b5050505090506000815167ffffffffffffffff811115610b2e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610b5c5781602001602082028036833780820191505090505b5090506000825167ffffffffffffffff811115610ba2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610bd05781602001602082028036833780820191505090505b50905060005b8351811015610d3457838181518110610c18577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160000151838281518110610c5d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050838181518110610cd0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151828281518110610d15577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610d2c90615a6f565b915050610bd6565b50818194509450505050915091565b6000600880549050905090565b610d61610d5b6130c3565b82613184565b610da0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9790615643565b60405180910390fd5b610dab838383613262565b505050565b6000610dbb83611b87565b8210610dfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df390615403565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610e708383836040518060200160405280600081525061279d565b505050565b600c8054610e8290615a3d565b80601f0160208091040260200160405190810160405280929190818152602001828054610eae90615a3d565b8015610efb5780601f10610ed057610100808354040283529160200191610efb565b820191906000526020600020905b815481529060010190602001808311610ede57829003601f168201915b505050505081565b6012602052806000526040600020600091509050806000015490806001018054610f2c90615a3d565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5890615a3d565b8015610fa55780601f10610f7a57610100808354040283529160200191610fa5565b820191906000526020600020905b815481529060010190602001808311610f8857829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003018054610fe090615a3d565b80601f016020809104026020016040519081016040528092919081815260200182805461100c90615a3d565b80156110595780601f1061102e57610100808354040283529160200191611059565b820191906000526020600020905b81548152906001019060200180831161103c57829003601f168201915b50505050509080600401805461106e90615a3d565b80601f016020809104026020016040519081016040528092919081815260200182805461109a90615a3d565b80156110e75780601f106110bc576101008083540402835291602001916110e7565b820191906000526020600020905b8154815290600101906020018083116110ca57829003601f168201915b5050505050908060050154908060060154908060070160009054906101000a900460ff16905088565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061119e575061116f611e4e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6111a757600080fd5b60006012600084815260200190815260200160002060405180610100016040529081600082015481526020016001820180546111e290615a3d565b80601f016020809104026020016040519081016040528092919081815260200182805461120e90615a3d565b801561125b5780601f106112305761010080835404028352916020019161125b565b820191906000526020600020905b81548152906001019060200180831161123e57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180546112ca90615a3d565b80601f01602080910402602001604051908101604052809291908181526020018280546112f690615a3d565b80156113435780601f1061131857610100808354040283529160200191611343565b820191906000526020600020905b81548152906001019060200180831161132657829003601f168201915b5050505050815260200160048201805461135c90615a3d565b80601f016020809104026020016040519081016040528092919081815260200182805461138890615a3d565b80156113d55780601f106113aa576101008083540402835291602001916113d5565b820191906000526020600020905b8154815290600101906020018083116113b857829003601f168201915b5050505050815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff16151515158152505090506000801b81600001511415611459576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611450906154a3565b60405180910390fd5b60005b825181101561184f57600060146000868152602001908152602001600020805490509050600085826040516020016114959291906156fe565b6040516020818303038152906040528051906020012060001c90506000601360008381526020019081526020016000206000015414611509576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611500906153e3565b60405180910390fd5b6015858481518110611544577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040516115599190615194565b908152602001604051809103902060009054906101000a900460ff16156115b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ac90615463565b60405180910390fd5b60006040518060a0016040528083815260200184815260200188815260200160008152602001878681518110611614577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015181525090506001601587868151811061165e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040516116739190615194565b908152602001604051809103902060006101000a81548160ff02191690831515021790555080601360008481526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040190805190602001906116f0929190613faf565b5090505060146000888152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055601660008381526020019081526020016000206040518060400160405280876040015173ffffffffffffffffffffffffffffffffffffffff16815260200142815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015550506117fa85604001518361332c565b7f4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4856040015188846040516118319392919061526a565b60405180910390a1505050808061184790615a6f565b91505061145c565b50505050565b600061185f610d43565b82106118a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189790615663565b60405180910390fd5b600882815481106118da577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061197a575061194b611e4e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61198357600080fd5b8060109080519060200190611999929190613faf565b5050565b60136020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040180546119d890615a3d565b80601f0160208091040260200160405190810160405280929190818152602001828054611a0490615a3d565b8015611a515780601f10611a2657610100808354040283529160200191611a51565b820191906000526020600020905b815481529060010190602001808311611a3457829003601f168201915b5050505050905085565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afb90615563565b60405180910390fd5b80915050919050565b6000611b1883612f55565b8210611b2357600080fd5b601460008481526020019081526020016000208281548110611b6e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b600e5481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611bf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bef90615543565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611c476130c3565b73ffffffffffffffffffffffffffffffffffffffff16611c65611e4e565b73ffffffffffffffffffffffffffffffffffffffff1614611cbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb2906155c3565b60405180910390fd5b611cc560006134fa565b565b60008060166000858152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015611d8f57838290600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152505081526020019060010190611cfd565b5050505090506000815110611e425760005b8151811015611e40578373ffffffffffffffffffffffffffffffffffffffff16828281518110611dfa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff161415611e2d57600192505050611e48565b8080611e3890615a6f565b915050611da1565b505b60009150505b92915050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054611e8790615a3d565b80601f0160208091040260200160405190810160405280929190818152602001828054611eb390615a3d565b8015611f005780601f10611ed557610100808354040283529160200191611f00565b820191906000526020600020905b815481529060010190602001808311611ee357829003601f168201915b5050505050905090565b611f126130c3565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f77906154e3565b60405180910390fd5b8060056000611f8d6130c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1661203a6130c3565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161207f91906152d8565b60405180910390a35050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061211957506120ea611e4e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61212257600080fd5b600060126000878152602001908152602001600020604051806101000160405290816000820154815260200160018201805461215d90615a3d565b80601f016020809104026020016040519081016040528092919081815260200182805461218990615a3d565b80156121d65780601f106121ab576101008083540402835291602001916121d6565b820191906000526020600020905b8154815290600101906020018083116121b957829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805461224590615a3d565b80601f016020809104026020016040519081016040528092919081815260200182805461227190615a3d565b80156122be5780601f10612293576101008083540402835291602001916122be565b820191906000526020600020905b8154815290600101906020018083116122a157829003601f168201915b505050505081526020016004820180546122d790615a3d565b80601f016020809104026020016040519081016040528092919081815260200182805461230390615a3d565b80156123505780601f1061232557610100808354040283529160200191612350565b820191906000526020600020905b81548152906001019060200180831161233357829003601f168201915b5050505050815260200160058201548152602001600682015481526020016007820160009054906101000a900460ff16151515158152505090506000801b816000015114156123d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123cb906154a3565b60405180910390fd5b600060146000888152602001908152602001600020805490509050600085146123fb578490505b600087826040516020016124109291906156fe565b6040516020818303038152906040528051906020012060001c9050600060136000838152602001908152602001600020600401805461244e90615a3d565b80601f016020809104026020016040519081016040528092919081815260200182805461247a90615a3d565b80156124c75780601f1061249c576101008083540402835291602001916124c7565b820191906000526020600020905b8154815290600101906020018083116124aa57829003601f168201915b505050505090506015816040516124de9190615194565b908152602001604051809103902060009054906101000a900460ff161561253a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253190615463565b60405180910390fd5b60006040518060a001604052808481526020018581526020018b81526020018a815260200187815250905080601360008581526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040190805190602001906125bd929190613faf565b50905050601460008b81526020019081526020016000208390806001815401808255809150506001900390600052602060002001600090919091909150556016600084815260200190815260200160002060405180604001604052808973ffffffffffffffffffffffffffffffffffffffff16815260200142815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015550506126bf878461332c565b7f4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4878b856040516126f29392919061526a565b60405180910390a150505050505050505050565b6000612710612d70565b8210612751576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274890615683565b60405180910390fd5b6011828154811061278b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b6127ae6127a86130c3565b83613184565b6127ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127e490615643565b60405180910390fd5b6127f9848484846135c0565b50505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061288d575061285e611e4e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61289657600080fd5b6000602060ff1614156128de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128d5906156c3565b60405180910390fd5b600e54821115612923576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291a906156a3565b60405180910390fd5b60008760405160200161293691906152f3565b6040516020818303038152906040528051906020012060001c90506000801b6012600083815260200190815260200160002060000154146129ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129a3906153c3565b60405180910390fd5b60006040518061010001604052808a81526020018981526020018873ffffffffffffffffffffffffffffffffffffffff16815260200187815260200186815260200185815260200184815260200160001515815250905060118290806001815401808255809150506001900390600052602060002001600090919091909150558060126000848152602001908152602001600020600082015181600001556020820151816001019080519060200190612a66929190613faf565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019080519060200190612aca929190613faf565b506080820151816004019080519060200190612ae7929190613faf565b5060a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff0219169083151502179055509050507f997bc5bd0747442b15dc8315d11d6dad5b3afd0a1504a6882f57d988dfe984518783604051612b50929190615241565b60405180910390a1505050505050505050565b600f5481565b6060612b7482613057565b612bb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612baa90615603565b60405180910390fd5b6000612bbd61361c565b9050600081511415612be15760405180602001604052806000815250915050612cab565b6000601360008581526020019081526020016000206004018054612c0490615a3d565b80601f0160208091040260200160405190810160405280929190818152602001828054612c3090615a3d565b8015612c7d5780601f10612c5257610100808354040283529160200191612c7d565b820191906000526020600020905b815481529060010190602001808311612c6057829003601f168201915b505050505090508181604051602001612c979291906151ab565b604051602081830303815290604052925050505b919050565b612cb86130c3565b73ffffffffffffffffffffffffffffffffffffffff16612cd6611e4e565b73ffffffffffffffffffffffffffffffffffffffff1614612d2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d23906155c3565b60405180910390fd5b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000601180549050905090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b612e3f6130c3565b73ffffffffffffffffffffffffffffffffffffffff16612e5d611e4e565b73ffffffffffffffffffffffffffffffffffffffff1614612eb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612eaa906155c3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612f23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f1a90615443565b60405180910390fd5b612f2c816134fa565b50565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060146000838152602001908152602001600020805490509050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061304057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80613050575061304f826136ae565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661313e83611a5b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061318f82613057565b6131ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131c590615503565b60405180910390fd5b60006131d983611a5b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061324857508373ffffffffffffffffffffffffffffffffffffffff166132308461087e565b73ffffffffffffffffffffffffffffffffffffffff16145b8061325957506132588185612da3565b5b91505092915050565b61326d838383613718565b6016600082815260200190815260200160002060405180604001604052808473ffffffffffffffffffffffffffffffffffffffff16815260200142815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561339c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161339390615583565b60405180910390fd5b6133a581613057565b156133e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133dc90615483565b60405180910390fd5b6133f160008383613974565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461344191906158f3565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6135cb848484613262565b6135d784848484613a88565b613616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161360d90615423565b60405180910390fd5b50505050565b60606010805461362b90615a3d565b80601f016020809104026020016040519081016040528092919081815260200182805461365790615a3d565b80156136a45780601f10613679576101008083540402835291602001916136a4565b820191906000526020600020905b81548152906001019060200180831161368757829003601f168201915b5050505050905090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b8273ffffffffffffffffffffffffffffffffffffffff1661373882611a5b565b73ffffffffffffffffffffffffffffffffffffffff161461378e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613785906155e3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156137fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137f5906154c3565b60405180910390fd5b613809838383613974565b6138146000826130cb565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546138649190615949565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546138bb91906158f3565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b61397f838383613c1f565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156139c2576139bd81613c24565b613a01565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614613a00576139ff8382613c6d565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613a4457613a3f81613dda565b613a83565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614613a8257613a818282613f1d565b5b5b505050565b6000613aa98473ffffffffffffffffffffffffffffffffffffffff16613f9c565b15613c12578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02613ad26130c3565b8786866040518563ffffffff1660e01b8152600401613af494939291906151f5565b602060405180830381600087803b158015613b0e57600080fd5b505af1925050508015613b3f57506040513d601f19601f82011682018060405250810190613b3c91906144dd565b60015b613bc2573d8060008114613b6f576040519150601f19603f3d011682016040523d82523d6000602084013e613b74565b606091505b50600081511415613bba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613bb190615423565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613c17565b600190505b949350505050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001613c7a84611b87565b613c849190615949565b9050600060076000848152602001908152602001600020549050818114613d69576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600880549050613dee9190615949565b9050600060096000848152602001908152602001600020549050600060088381548110613e44577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490508060088381548110613e8c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480613f01577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000613f2883611b87565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600080823b905060008111915050919050565b828054613fbb90615a3d565b90600052602060002090601f016020900481019282613fdd5760008555614024565b82601f10613ff657805160ff1916838001178555614024565b82800160010185558215614024579182015b82811115614023578251825591602001919060010190614008565b5b5090506140319190614035565b5090565b5b8082111561404e576000816000905550600101614036565b5090565b6000614065614060846157b2565b615781565b9050808382526020820190508260005b858110156140a5578135850161408b88826141e8565b845260208401935060208301925050600181019050614075565b5050509392505050565b60006140c26140bd846157de565b615781565b9050828152602081018484840111156140da57600080fd5b6140e58482856159fb565b509392505050565b60006141006140fb8461580e565b615781565b90508281526020810184848401111561411857600080fd5b6141238482856159fb565b509392505050565b60008135905061413a81615b56565b92915050565b600082601f83011261415157600080fd5b8135614161848260208601614052565b91505092915050565b60008135905061417981615b6d565b92915050565b60008135905061418e81615b84565b92915050565b6000813590506141a381615b9b565b92915050565b6000815190506141b881615b9b565b92915050565b600082601f8301126141cf57600080fd5b81356141df8482602086016140af565b91505092915050565b600082601f8301126141f957600080fd5b81356142098482602086016140ed565b91505092915050565b60008135905061422181615bb2565b92915050565b60006020828403121561423957600080fd5b60006142478482850161412b565b91505092915050565b6000806040838503121561426357600080fd5b60006142718582860161412b565b92505060206142828582860161412b565b9150509250929050565b6000806000606084860312156142a157600080fd5b60006142af8682870161412b565b93505060206142c08682870161412b565b92505060406142d186828701614212565b9150509250925092565b600080600080608085870312156142f157600080fd5b60006142ff8782880161412b565b94505060206143108782880161412b565b935050604061432187828801614212565b925050606085013567ffffffffffffffff81111561433e57600080fd5b61434a878288016141be565b91505092959194509250565b6000806040838503121561436957600080fd5b60006143778582860161412b565b92505060206143888582860161416a565b9150509250929050565b600080604083850312156143a557600080fd5b60006143b38582860161412b565b92505060206143c485828601614212565b9150509250929050565b600080600080600080600060e0888a0312156143e957600080fd5b60006143f78a828b0161417f565b975050602088013567ffffffffffffffff81111561441457600080fd5b6144208a828b016141e8565b96505060406144318a828b0161412b565b955050606088013567ffffffffffffffff81111561444e57600080fd5b61445a8a828b016141e8565b945050608088013567ffffffffffffffff81111561447757600080fd5b6144838a828b016141e8565b93505060a06144948a828b01614212565b92505060c06144a58a828b01614212565b91505092959891949750929550565b6000602082840312156144c657600080fd5b60006144d484828501614194565b91505092915050565b6000602082840312156144ef57600080fd5b60006144fd848285016141a9565b91505092915050565b60006020828403121561451857600080fd5b600082013567ffffffffffffffff81111561453257600080fd5b61453e848285016141e8565b91505092915050565b60006020828403121561455957600080fd5b600061456784828501614212565b91505092915050565b6000806040838503121561458357600080fd5b600061459185828601614212565b92505060206145a28582860161412b565b9150509250929050565b600080604083850312156145bf57600080fd5b60006145cd85828601614212565b925050602083013567ffffffffffffffff8111156145ea57600080fd5b6145f685828601614140565b9150509250929050565b6000806040838503121561461357600080fd5b600061462185828601614212565b925050602061463285828601614212565b9150509250929050565b600080600080600060a0868803121561465457600080fd5b600061466288828901614212565b955050602061467388828901614212565b945050604061468488828901614212565b93505060606146958882890161412b565b925050608086013567ffffffffffffffff8111156146b257600080fd5b6146be888289016141e8565b9150509295509295909350565b60006146d783836146fb565b60208301905092915050565b60006146ef8383615176565b60208301905092915050565b6147048161597d565b82525050565b6147138161597d565b82525050565b60006147248261585e565b61472e81856158a4565b93506147398361583e565b8060005b8381101561476a57815161475188826146cb565b975061475c8361588a565b92505060018101905061473d565b5085935050505092915050565b600061478282615869565b61478c81856158b5565b93506147978361584e565b8060005b838110156147c85781516147af88826146e3565b97506147ba83615897565b92505060018101905061479b565b5085935050505092915050565b6147de8161598f565b82525050565b6147ed8161599b565b82525050565b60006147fe82615874565b61480881856158c6565b9350614818818560208601615a0a565b61482181615b45565b840191505092915050565b60006148378261587f565b61484181856158d7565b9350614851818560208601615a0a565b61485a81615b45565b840191505092915050565b60006148708261587f565b61487a81856158e8565b935061488a818560208601615a0a565b80840191505092915050565b60006148a36016836158d7565b91507f6475706c6963617465642066696e6765727072696e74000000000000000000006000830152602082019050919050565b60006148e36015836158d7565b91507f6475706c6963617465642065646974696f6e20696400000000000000000000006000830152602082019050919050565b6000614923602b836158d7565b91507f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008301527f74206f6620626f756e64730000000000000000000000000000000000000000006020830152604082019050919050565b60006149896032836158d7565b91507f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008301527f63656976657220696d706c656d656e74657200000000000000000000000000006020830152604082019050919050565b60006149ef6026836158d7565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614a556012836158d7565b91507f69706673206964207265676973746572656400000000000000000000000000006000830152602082019050919050565b6000614a95601c836158d7565b91507f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006000830152602082019050919050565b6000614ad5600e836158e8565b91507f2f6d657461646174612e6a736f6e0000000000000000000000000000000000006000830152600e82019050919050565b6000614b156014836158d7565b91507f617274776f726b206973206e6f7420666f756e640000000000000000000000006000830152602082019050919050565b6000614b556024836158d7565b91507f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614bbb6019836158d7565b91507f4552433732313a20617070726f766520746f2063616c6c6572000000000000006000830152602082019050919050565b6000614bfb602c836158d7565b91507f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b6000614c616038836158d7565b91507f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020830152604082019050919050565b6000614cc7602a836158d7565b91507f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b6000614d2d6029836158d7565b91507f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008301527f656e7420746f6b656e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000614d936020836158d7565b91507f4552433732313a206d696e7420746f20746865207a65726f20616464726573736000830152602082019050919050565b6000614dd3602c836158d7565b91507f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b6000614e396020836158d7565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000614e796029836158d7565b91507f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008301527f73206e6f74206f776e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000614edf602f836158d7565b91507f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008301527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006020830152604082019050919050565b6000614f456021836158d7565b91507f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614fab6031836158d7565b91507f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020830152604082019050919050565b6000615011602c836158d7565b91507f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008301527f7574206f6620626f756e647300000000000000000000000000000000000000006020830152604082019050919050565b60006150776024836158d7565b91507f617274776f726b733a20676c6f62616c20696e646578206f7574206f6620626f60008301527f756e6473000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006150dd603f836158d7565b91507f65646974696f6e2073697a65206578636565647320746865206d6178696d756d60008301527f2065646974696f6e2073697a65206f66207468652065786869626974696f6e006020830152604082019050919050565b6000615143601c836158d7565b91507f66696e6765727072696e742063616e206e6f7420626520656d707479000000006000830152602082019050919050565b61517f816159f1565b82525050565b61518e816159f1565b82525050565b60006151a08284614865565b915081905092915050565b60006151b78285614865565b91506151c38284614865565b91506151ce82614ac8565b91508190509392505050565b60006020820190506151ef600083018461470a565b92915050565b600060808201905061520a600083018761470a565b615217602083018661470a565b6152246040830185615185565b818103606083015261523681846147f3565b905095945050505050565b6000604082019050615256600083018561470a565b6152636020830184615185565b9392505050565b600060608201905061527f600083018661470a565b61528c6020830185615185565b6152996040830184615185565b949350505050565b600060408201905081810360008301526152bb8185614719565b905081810360208301526152cf8184614777565b90509392505050565b60006020820190506152ed60008301846147d5565b92915050565b600060208201905061530860008301846147e4565b92915050565b600061010082019050615324600083018b6147e4565b8181036020830152615336818a61482c565b9050615345604083018961470a565b8181036060830152615357818861482c565b9050818103608083015261536b818761482c565b905061537a60a0830186615185565b61538760c0830185615185565b61539460e08301846147d5565b9998505050505050505050565b600060208201905081810360008301526153bb818461482c565b905092915050565b600060208201905081810360008301526153dc81614896565b9050919050565b600060208201905081810360008301526153fc816148d6565b9050919050565b6000602082019050818103600083015261541c81614916565b9050919050565b6000602082019050818103600083015261543c8161497c565b9050919050565b6000602082019050818103600083015261545c816149e2565b9050919050565b6000602082019050818103600083015261547c81614a48565b9050919050565b6000602082019050818103600083015261549c81614a88565b9050919050565b600060208201905081810360008301526154bc81614b08565b9050919050565b600060208201905081810360008301526154dc81614b48565b9050919050565b600060208201905081810360008301526154fc81614bae565b9050919050565b6000602082019050818103600083015261551c81614bee565b9050919050565b6000602082019050818103600083015261553c81614c54565b9050919050565b6000602082019050818103600083015261555c81614cba565b9050919050565b6000602082019050818103600083015261557c81614d20565b9050919050565b6000602082019050818103600083015261559c81614d86565b9050919050565b600060208201905081810360008301526155bc81614dc6565b9050919050565b600060208201905081810360008301526155dc81614e2c565b9050919050565b600060208201905081810360008301526155fc81614e6c565b9050919050565b6000602082019050818103600083015261561c81614ed2565b9050919050565b6000602082019050818103600083015261563c81614f38565b9050919050565b6000602082019050818103600083015261565c81614f9e565b9050919050565b6000602082019050818103600083015261567c81615004565b9050919050565b6000602082019050818103600083015261569c8161506a565b9050919050565b600060208201905081810360008301526156bc816150d0565b9050919050565b600060208201905081810360008301526156dc81615136565b9050919050565b60006020820190506156f86000830184615185565b92915050565b60006040820190506157136000830185615185565b6157206020830184615185565b9392505050565b600060a08201905061573c6000830188615185565b6157496020830187615185565b6157566040830186615185565b6157636060830185615185565b8181036080830152615775818461482c565b90509695505050505050565b6000604051905081810181811067ffffffffffffffff821117156157a8576157a7615b16565b5b8060405250919050565b600067ffffffffffffffff8211156157cd576157cc615b16565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156157f9576157f8615b16565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561582957615828615b16565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006158fe826159f1565b9150615909836159f1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561593e5761593d615ab8565b5b828201905092915050565b6000615954826159f1565b915061595f836159f1565b92508282101561597257615971615ab8565b5b828203905092915050565b6000615988826159d1565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015615a28578082015181840152602081019050615a0d565b83811115615a37576000848401525b50505050565b60006002820490506001821680615a5557607f821691505b60208210811415615a6957615a68615ae7565b5b50919050565b6000615a7a826159f1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415615aad57615aac615ab8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b615b5f8161597d565b8114615b6a57600080fd5b50565b615b768161598f565b8114615b8157600080fd5b50565b615b8d8161599b565b8114615b9857600080fd5b50565b615ba4816159a5565b8114615baf57600080fd5b50565b615bbb816159f1565b8114615bc657600080fd5b5056fea264697066735822122037478e3ff8c7eeeae6536bbb32e9ae3043fda84e00a9b95c7f2ede8a69df2e8764736f6c63430008000033"

// DeployFeralfileExhibition deploys a new Ethereum contract, binding an instance of FeralfileExhibition to it.
func DeployFeralfileExhibition(auth *bind.TransactOpts, backend bind.ContractBackend, _title string, _symbol string, _curator common.Address, _maxEdition *big.Int, _basePrice *big.Int, tokenBaseURI_ string) (common.Address, *types.Transaction, *FeralfileExhibition, error) {
	parsed, err := abi.JSON(strings.NewReader(FeralfileExhibitionABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(FeralfileExhibitionBin), backend, _title, _symbol, _curator, _maxEdition, _basePrice, tokenBaseURI_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FeralfileExhibition{FeralfileExhibitionCaller: FeralfileExhibitionCaller{contract: contract}, FeralfileExhibitionTransactor: FeralfileExhibitionTransactor{contract: contract}, FeralfileExhibitionFilterer: FeralfileExhibitionFilterer{contract: contract}}, nil
}

// FeralfileExhibition is an auto generated Go binding around an Ethereum contract.
type FeralfileExhibition struct {
	FeralfileExhibitionCaller     // Read-only binding to the contract
	FeralfileExhibitionTransactor // Write-only binding to the contract
	FeralfileExhibitionFilterer   // Log filterer for contract events
}

// FeralfileExhibitionCaller is an auto generated read-only Go binding around an Ethereum contract.
type FeralfileExhibitionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FeralfileExhibitionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FeralfileExhibitionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeralfileExhibitionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FeralfileExhibitionSession struct {
	Contract     *FeralfileExhibition // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// FeralfileExhibitionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FeralfileExhibitionCallerSession struct {
	Contract *FeralfileExhibitionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// FeralfileExhibitionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FeralfileExhibitionTransactorSession struct {
	Contract     *FeralfileExhibitionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// FeralfileExhibitionRaw is an auto generated low-level Go binding around an Ethereum contract.
type FeralfileExhibitionRaw struct {
	Contract *FeralfileExhibition // Generic contract binding to access the raw methods on
}

// FeralfileExhibitionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FeralfileExhibitionCallerRaw struct {
	Contract *FeralfileExhibitionCaller // Generic read-only contract binding to access the raw methods on
}

// FeralfileExhibitionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FeralfileExhibitionTransactorRaw struct {
	Contract *FeralfileExhibitionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFeralfileExhibition creates a new instance of FeralfileExhibition, bound to a specific deployed contract.
func NewFeralfileExhibition(address common.Address, backend bind.ContractBackend) (*FeralfileExhibition, error) {
	contract, err := bindFeralfileExhibition(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibition{FeralfileExhibitionCaller: FeralfileExhibitionCaller{contract: contract}, FeralfileExhibitionTransactor: FeralfileExhibitionTransactor{contract: contract}, FeralfileExhibitionFilterer: FeralfileExhibitionFilterer{contract: contract}}, nil
}

// NewFeralfileExhibitionCaller creates a new read-only instance of FeralfileExhibition, bound to a specific deployed contract.
func NewFeralfileExhibitionCaller(address common.Address, caller bind.ContractCaller) (*FeralfileExhibitionCaller, error) {
	contract, err := bindFeralfileExhibition(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionCaller{contract: contract}, nil
}

// NewFeralfileExhibitionTransactor creates a new write-only instance of FeralfileExhibition, bound to a specific deployed contract.
func NewFeralfileExhibitionTransactor(address common.Address, transactor bind.ContractTransactor) (*FeralfileExhibitionTransactor, error) {
	contract, err := bindFeralfileExhibition(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionTransactor{contract: contract}, nil
}

// NewFeralfileExhibitionFilterer creates a new log filterer instance of FeralfileExhibition, bound to a specific deployed contract.
func NewFeralfileExhibitionFilterer(address common.Address, filterer bind.ContractFilterer) (*FeralfileExhibitionFilterer, error) {
	contract, err := bindFeralfileExhibition(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionFilterer{contract: contract}, nil
}

// bindFeralfileExhibition binds a generic wrapper to an already deployed contract.
func bindFeralfileExhibition(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FeralfileExhibitionABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeralfileExhibition *FeralfileExhibitionRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeralfileExhibition.Contract.FeralfileExhibitionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeralfileExhibition *FeralfileExhibitionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.FeralfileExhibitionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeralfileExhibition *FeralfileExhibitionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.FeralfileExhibitionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeralfileExhibition *FeralfileExhibitionCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeralfileExhibition.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeralfileExhibition *FeralfileExhibitionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeralfileExhibition *FeralfileExhibitionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.contract.Transact(opts, method, params...)
}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, uint256 editionNumber, uint256 artworkID, uint256 bitmarkID, string ipfsCID)
func (_FeralfileExhibition *FeralfileExhibitionCaller) ArtworkEditions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	EditionID     *big.Int
	EditionNumber *big.Int
	ArtworkID     *big.Int
	BitmarkID     *big.Int
	IpfsCID       string
}, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "artworkEditions", arg0)

	outstruct := new(struct {
		EditionID     *big.Int
		EditionNumber *big.Int
		ArtworkID     *big.Int
		BitmarkID     *big.Int
		IpfsCID       string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.EditionID = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.EditionNumber = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.ArtworkID = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.BitmarkID = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.IpfsCID = *abi.ConvertType(out[4], new(string)).(*string)

	return *outstruct, err

}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, uint256 editionNumber, uint256 artworkID, uint256 bitmarkID, string ipfsCID)
func (_FeralfileExhibition *FeralfileExhibitionSession) ArtworkEditions(arg0 *big.Int) (struct {
	EditionID     *big.Int
	EditionNumber *big.Int
	ArtworkID     *big.Int
	BitmarkID     *big.Int
	IpfsCID       string
}, error) {
	return _FeralfileExhibition.Contract.ArtworkEditions(&_FeralfileExhibition.CallOpts, arg0)
}

// ArtworkEditions is a free data retrieval call binding the contract method 0x62fe2131.
//
// Solidity: function artworkEditions(uint256 ) view returns(uint256 editionID, uint256 editionNumber, uint256 artworkID, uint256 bitmarkID, string ipfsCID)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) ArtworkEditions(arg0 *big.Int) (struct {
	EditionID     *big.Int
	EditionNumber *big.Int
	ArtworkID     *big.Int
	BitmarkID     *big.Int
	IpfsCID       string
}, error) {
	return _FeralfileExhibition.Contract.ArtworkEditions(&_FeralfileExhibition.CallOpts, arg0)
}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(bytes32 fingerprint, string title, address artist, string medium, string data, uint256 editionSize, uint256 initialPrice, bool minted)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Artworks(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Fingerprint  [32]byte
	Title        string
	Artist       common.Address
	Medium       string
	Data         string
	EditionSize  *big.Int
	InitialPrice *big.Int
	Minted       bool
}, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "artworks", arg0)

	outstruct := new(struct {
		Fingerprint  [32]byte
		Title        string
		Artist       common.Address
		Medium       string
		Data         string
		EditionSize  *big.Int
		InitialPrice *big.Int
		Minted       bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fingerprint = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Title = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Artist = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Medium = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.Data = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.EditionSize = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.InitialPrice = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.Minted = *abi.ConvertType(out[7], new(bool)).(*bool)

	return *outstruct, err

}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(bytes32 fingerprint, string title, address artist, string medium, string data, uint256 editionSize, uint256 initialPrice, bool minted)
func (_FeralfileExhibition *FeralfileExhibitionSession) Artworks(arg0 *big.Int) (struct {
	Fingerprint  [32]byte
	Title        string
	Artist       common.Address
	Medium       string
	Data         string
	EditionSize  *big.Int
	InitialPrice *big.Int
	Minted       bool
}, error) {
	return _FeralfileExhibition.Contract.Artworks(&_FeralfileExhibition.CallOpts, arg0)
}

// Artworks is a free data retrieval call binding the contract method 0x4b602673.
//
// Solidity: function artworks(uint256 ) view returns(bytes32 fingerprint, string title, address artist, string medium, string data, uint256 editionSize, uint256 initialPrice, bool minted)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Artworks(arg0 *big.Int) (struct {
	Fingerprint  [32]byte
	Title        string
	Artist       common.Address
	Medium       string
	Data         string
	EditionSize  *big.Int
	InitialPrice *big.Int
	Minted       bool
}, error) {
	return _FeralfileExhibition.Contract.Artworks(&_FeralfileExhibition.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _FeralfileExhibition.Contract.BalanceOf(&_FeralfileExhibition.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _FeralfileExhibition.Contract.BalanceOf(&_FeralfileExhibition.CallOpts, owner)
}

// BasePrice is a free data retrieval call binding the contract method 0xc7876ea4.
//
// Solidity: function basePrice() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) BasePrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "basePrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BasePrice is a free data retrieval call binding the contract method 0xc7876ea4.
//
// Solidity: function basePrice() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) BasePrice() (*big.Int, error) {
	return _FeralfileExhibition.Contract.BasePrice(&_FeralfileExhibition.CallOpts)
}

// BasePrice is a free data retrieval call binding the contract method 0xc7876ea4.
//
// Solidity: function basePrice() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) BasePrice() (*big.Int, error) {
	return _FeralfileExhibition.Contract.BasePrice(&_FeralfileExhibition.CallOpts)
}

// Curator is a free data retrieval call binding the contract method 0xe66f53b7.
//
// Solidity: function curator() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Curator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "curator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Curator is a free data retrieval call binding the contract method 0xe66f53b7.
//
// Solidity: function curator() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionSession) Curator() (common.Address, error) {
	return _FeralfileExhibition.Contract.Curator(&_FeralfileExhibition.CallOpts)
}

// Curator is a free data retrieval call binding the contract method 0xe66f53b7.
//
// Solidity: function curator() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Curator() (common.Address, error) {
	return _FeralfileExhibition.Contract.Curator(&_FeralfileExhibition.CallOpts)
}

// EditionProvenances is a free data retrieval call binding the contract method 0x0f28b0c9.
//
// Solidity: function editionProvenances(uint256 editionID) view returns(address[], uint256[])
func (_FeralfileExhibition *FeralfileExhibitionCaller) EditionProvenances(opts *bind.CallOpts, editionID *big.Int) ([]common.Address, []*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "editionProvenances", editionID)

	if err != nil {
		return *new([]common.Address), *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)

	return out0, out1, err

}

// EditionProvenances is a free data retrieval call binding the contract method 0x0f28b0c9.
//
// Solidity: function editionProvenances(uint256 editionID) view returns(address[], uint256[])
func (_FeralfileExhibition *FeralfileExhibitionSession) EditionProvenances(editionID *big.Int) ([]common.Address, []*big.Int, error) {
	return _FeralfileExhibition.Contract.EditionProvenances(&_FeralfileExhibition.CallOpts, editionID)
}

// EditionProvenances is a free data retrieval call binding the contract method 0x0f28b0c9.
//
// Solidity: function editionProvenances(uint256 editionID) view returns(address[], uint256[])
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) EditionProvenances(editionID *big.Int) ([]common.Address, []*big.Int, error) {
	return _FeralfileExhibition.Contract.EditionProvenances(&_FeralfileExhibition.CallOpts, editionID)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibition.Contract.GetApproved(&_FeralfileExhibition.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibition.Contract.GetApproved(&_FeralfileExhibition.CallOpts, tokenId)
}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) GetArtworkByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "getArtworkByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) GetArtworkByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.GetArtworkByIndex(&_FeralfileExhibition.CallOpts, index)
}

// GetArtworkByIndex is a free data retrieval call binding the contract method 0xb4883703.
//
// Solidity: function getArtworkByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) GetArtworkByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.GetArtworkByIndex(&_FeralfileExhibition.CallOpts, index)
}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) GetArtworkEditionByIndex(opts *bind.CallOpts, artworkID *big.Int, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "getArtworkEditionByIndex", artworkID, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) GetArtworkEditionByIndex(artworkID *big.Int, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.GetArtworkEditionByIndex(&_FeralfileExhibition.CallOpts, artworkID, index)
}

// GetArtworkEditionByIndex is a free data retrieval call binding the contract method 0x641b18e9.
//
// Solidity: function getArtworkEditionByIndex(uint256 artworkID, uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) GetArtworkEditionByIndex(artworkID *big.Int, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.GetArtworkEditionByIndex(&_FeralfileExhibition.CallOpts, artworkID, index)
}

// HasOwnedBy is a free data retrieval call binding the contract method 0x86dc0e73.
//
// Solidity: function hasOwnedBy(uint256 editionID, address owner) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionCaller) HasOwnedBy(opts *bind.CallOpts, editionID *big.Int, owner common.Address) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "hasOwnedBy", editionID, owner)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasOwnedBy is a free data retrieval call binding the contract method 0x86dc0e73.
//
// Solidity: function hasOwnedBy(uint256 editionID, address owner) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionSession) HasOwnedBy(editionID *big.Int, owner common.Address) (bool, error) {
	return _FeralfileExhibition.Contract.HasOwnedBy(&_FeralfileExhibition.CallOpts, editionID, owner)
}

// HasOwnedBy is a free data retrieval call binding the contract method 0x86dc0e73.
//
// Solidity: function hasOwnedBy(uint256 editionID, address owner) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) HasOwnedBy(editionID *big.Int, owner common.Address) (bool, error) {
	return _FeralfileExhibition.Contract.HasOwnedBy(&_FeralfileExhibition.CallOpts, editionID, owner)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _FeralfileExhibition.Contract.IsApprovedForAll(&_FeralfileExhibition.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _FeralfileExhibition.Contract.IsApprovedForAll(&_FeralfileExhibition.CallOpts, owner, operator)
}

// MaxEdition is a free data retrieval call binding the contract method 0x6af51703.
//
// Solidity: function maxEdition() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) MaxEdition(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "maxEdition")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxEdition is a free data retrieval call binding the contract method 0x6af51703.
//
// Solidity: function maxEdition() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) MaxEdition() (*big.Int, error) {
	return _FeralfileExhibition.Contract.MaxEdition(&_FeralfileExhibition.CallOpts)
}

// MaxEdition is a free data retrieval call binding the contract method 0x6af51703.
//
// Solidity: function maxEdition() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) MaxEdition() (*big.Int, error) {
	return _FeralfileExhibition.Contract.MaxEdition(&_FeralfileExhibition.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionSession) Name() (string, error) {
	return _FeralfileExhibition.Contract.Name(&_FeralfileExhibition.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Name() (string, error) {
	return _FeralfileExhibition.Contract.Name(&_FeralfileExhibition.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionSession) Owner() (common.Address, error) {
	return _FeralfileExhibition.Contract.Owner(&_FeralfileExhibition.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Owner() (common.Address, error) {
	return _FeralfileExhibition.Contract.Owner(&_FeralfileExhibition.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibition.Contract.OwnerOf(&_FeralfileExhibition.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _FeralfileExhibition.Contract.OwnerOf(&_FeralfileExhibition.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeralfileExhibition.Contract.SupportsInterface(&_FeralfileExhibition.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _FeralfileExhibition.Contract.SupportsInterface(&_FeralfileExhibition.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionSession) Symbol() (string, error) {
	return _FeralfileExhibition.Contract.Symbol(&_FeralfileExhibition.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Symbol() (string, error) {
	return _FeralfileExhibition.Contract.Symbol(&_FeralfileExhibition.CallOpts)
}

// Title is a free data retrieval call binding the contract method 0x4a79d50c.
//
// Solidity: function title() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Title(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "title")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Title is a free data retrieval call binding the contract method 0x4a79d50c.
//
// Solidity: function title() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionSession) Title() (string, error) {
	return _FeralfileExhibition.Contract.Title(&_FeralfileExhibition.CallOpts)
}

// Title is a free data retrieval call binding the contract method 0x4a79d50c.
//
// Solidity: function title() view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Title() (string, error) {
	return _FeralfileExhibition.Contract.Title(&_FeralfileExhibition.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.TokenByIndex(&_FeralfileExhibition.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.TokenByIndex(&_FeralfileExhibition.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.TokenOfOwnerByIndex(&_FeralfileExhibition.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.TokenOfOwnerByIndex(&_FeralfileExhibition.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionSession) TokenURI(tokenId *big.Int) (string, error) {
	return _FeralfileExhibition.Contract.TokenURI(&_FeralfileExhibition.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _FeralfileExhibition.Contract.TokenURI(&_FeralfileExhibition.CallOpts, tokenId)
}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) TotalArtworks(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "totalArtworks")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) TotalArtworks() (*big.Int, error) {
	return _FeralfileExhibition.Contract.TotalArtworks(&_FeralfileExhibition.CallOpts)
}

// TotalArtworks is a free data retrieval call binding the contract method 0xe4a233e1.
//
// Solidity: function totalArtworks() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) TotalArtworks() (*big.Int, error) {
	return _FeralfileExhibition.Contract.TotalArtworks(&_FeralfileExhibition.CallOpts)
}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) TotalEditionOfArtwork(opts *bind.CallOpts, artworkID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "totalEditionOfArtwork", artworkID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) TotalEditionOfArtwork(artworkID *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.TotalEditionOfArtwork(&_FeralfileExhibition.CallOpts, artworkID)
}

// TotalEditionOfArtwork is a free data retrieval call binding the contract method 0xfe2a3bf3.
//
// Solidity: function totalEditionOfArtwork(uint256 artworkID) view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) TotalEditionOfArtwork(artworkID *big.Int) (*big.Int, error) {
	return _FeralfileExhibition.Contract.TotalEditionOfArtwork(&_FeralfileExhibition.CallOpts, artworkID)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionSession) TotalSupply() (*big.Int, error) {
	return _FeralfileExhibition.Contract.TotalSupply(&_FeralfileExhibition.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) TotalSupply() (*big.Int, error) {
	return _FeralfileExhibition.Contract.TotalSupply(&_FeralfileExhibition.CallOpts)
}

// Trustee is a free data retrieval call binding the contract method 0xfdf97cb2.
//
// Solidity: function trustee() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCaller) Trustee(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeralfileExhibition.contract.Call(opts, &out, "trustee")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Trustee is a free data retrieval call binding the contract method 0xfdf97cb2.
//
// Solidity: function trustee() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionSession) Trustee() (common.Address, error) {
	return _FeralfileExhibition.Contract.Trustee(&_FeralfileExhibition.CallOpts)
}

// Trustee is a free data retrieval call binding the contract method 0xfdf97cb2.
//
// Solidity: function trustee() view returns(address)
func (_FeralfileExhibition *FeralfileExhibitionCallerSession) Trustee() (common.Address, error) {
	return _FeralfileExhibition.Contract.Trustee(&_FeralfileExhibition.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.Approve(&_FeralfileExhibition.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.Approve(&_FeralfileExhibition.TransactOpts, to, tokenId)
}

// CreateArtwork is a paid mutator transaction binding the contract method 0xbd6a5f35.
//
// Solidity: function createArtwork(bytes32 _fingerprint, string _title, address _artist, string _medium, string _data, uint256 _editionSize, uint256 _initialPrice) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) CreateArtwork(opts *bind.TransactOpts, _fingerprint [32]byte, _title string, _artist common.Address, _medium string, _data string, _editionSize *big.Int, _initialPrice *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "createArtwork", _fingerprint, _title, _artist, _medium, _data, _editionSize, _initialPrice)
}

// CreateArtwork is a paid mutator transaction binding the contract method 0xbd6a5f35.
//
// Solidity: function createArtwork(bytes32 _fingerprint, string _title, address _artist, string _medium, string _data, uint256 _editionSize, uint256 _initialPrice) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) CreateArtwork(_fingerprint [32]byte, _title string, _artist common.Address, _medium string, _data string, _editionSize *big.Int, _initialPrice *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.CreateArtwork(&_FeralfileExhibition.TransactOpts, _fingerprint, _title, _artist, _medium, _data, _editionSize, _initialPrice)
}

// CreateArtwork is a paid mutator transaction binding the contract method 0xbd6a5f35.
//
// Solidity: function createArtwork(bytes32 _fingerprint, string _title, address _artist, string _medium, string _data, uint256 _editionSize, uint256 _initialPrice) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) CreateArtwork(_fingerprint [32]byte, _title string, _artist common.Address, _medium string, _data string, _editionSize *big.Int, _initialPrice *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.CreateArtwork(&_FeralfileExhibition.TransactOpts, _fingerprint, _title, _artist, _medium, _data, _editionSize, _initialPrice)
}

// MintArtwork is a paid mutator transaction binding the contract method 0x4cfdbdb8.
//
// Solidity: function mintArtwork(uint256 _artworkID, string[] _ipfsCIDs) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) MintArtwork(opts *bind.TransactOpts, _artworkID *big.Int, _ipfsCIDs []string) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "mintArtwork", _artworkID, _ipfsCIDs)
}

// MintArtwork is a paid mutator transaction binding the contract method 0x4cfdbdb8.
//
// Solidity: function mintArtwork(uint256 _artworkID, string[] _ipfsCIDs) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) MintArtwork(_artworkID *big.Int, _ipfsCIDs []string) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.MintArtwork(&_FeralfileExhibition.TransactOpts, _artworkID, _ipfsCIDs)
}

// MintArtwork is a paid mutator transaction binding the contract method 0x4cfdbdb8.
//
// Solidity: function mintArtwork(uint256 _artworkID, string[] _ipfsCIDs) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) MintArtwork(_artworkID *big.Int, _ipfsCIDs []string) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.MintArtwork(&_FeralfileExhibition.TransactOpts, _artworkID, _ipfsCIDs)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) RenounceOwnership() (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.RenounceOwnership(&_FeralfileExhibition.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.RenounceOwnership(&_FeralfileExhibition.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SafeTransferFrom(&_FeralfileExhibition.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SafeTransferFrom(&_FeralfileExhibition.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SafeTransferFrom0(&_FeralfileExhibition.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SafeTransferFrom0(&_FeralfileExhibition.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetApprovalForAll(&_FeralfileExhibition.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetApprovalForAll(&_FeralfileExhibition.TransactOpts, operator, approved)
}

// SetArtworkBaseURI is a paid mutator transaction binding the contract method 0x5bcdf74c.
//
// Solidity: function setArtworkBaseURI(string baseURI_) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) SetArtworkBaseURI(opts *bind.TransactOpts, baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "setArtworkBaseURI", baseURI_)
}

// SetArtworkBaseURI is a paid mutator transaction binding the contract method 0x5bcdf74c.
//
// Solidity: function setArtworkBaseURI(string baseURI_) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) SetArtworkBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetArtworkBaseURI(&_FeralfileExhibition.TransactOpts, baseURI_)
}

// SetArtworkBaseURI is a paid mutator transaction binding the contract method 0x5bcdf74c.
//
// Solidity: function setArtworkBaseURI(string baseURI_) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) SetArtworkBaseURI(baseURI_ string) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetArtworkBaseURI(&_FeralfileExhibition.TransactOpts, baseURI_)
}

// SetTrustee is a paid mutator transaction binding the contract method 0xd0d1ea70.
//
// Solidity: function setTrustee(address _newTrustee) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) SetTrustee(opts *bind.TransactOpts, _newTrustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "setTrustee", _newTrustee)
}

// SetTrustee is a paid mutator transaction binding the contract method 0xd0d1ea70.
//
// Solidity: function setTrustee(address _newTrustee) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) SetTrustee(_newTrustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetTrustee(&_FeralfileExhibition.TransactOpts, _newTrustee)
}

// SetTrustee is a paid mutator transaction binding the contract method 0xd0d1ea70.
//
// Solidity: function setTrustee(address _newTrustee) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) SetTrustee(_newTrustee common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SetTrustee(&_FeralfileExhibition.TransactOpts, _newTrustee)
}

// SwapArtworkFromBitmarks is a paid mutator transaction binding the contract method 0xb260c0e7.
//
// Solidity: function swapArtworkFromBitmarks(uint256 _artworkID, uint256 _bitmarkIDs, uint256 _editionNumber, address _newOwner, string _ipfsCID) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) SwapArtworkFromBitmarks(opts *bind.TransactOpts, _artworkID *big.Int, _bitmarkIDs *big.Int, _editionNumber *big.Int, _newOwner common.Address, _ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "swapArtworkFromBitmarks", _artworkID, _bitmarkIDs, _editionNumber, _newOwner, _ipfsCID)
}

// SwapArtworkFromBitmarks is a paid mutator transaction binding the contract method 0xb260c0e7.
//
// Solidity: function swapArtworkFromBitmarks(uint256 _artworkID, uint256 _bitmarkIDs, uint256 _editionNumber, address _newOwner, string _ipfsCID) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) SwapArtworkFromBitmarks(_artworkID *big.Int, _bitmarkIDs *big.Int, _editionNumber *big.Int, _newOwner common.Address, _ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SwapArtworkFromBitmarks(&_FeralfileExhibition.TransactOpts, _artworkID, _bitmarkIDs, _editionNumber, _newOwner, _ipfsCID)
}

// SwapArtworkFromBitmarks is a paid mutator transaction binding the contract method 0xb260c0e7.
//
// Solidity: function swapArtworkFromBitmarks(uint256 _artworkID, uint256 _bitmarkIDs, uint256 _editionNumber, address _newOwner, string _ipfsCID) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) SwapArtworkFromBitmarks(_artworkID *big.Int, _bitmarkIDs *big.Int, _editionNumber *big.Int, _newOwner common.Address, _ipfsCID string) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.SwapArtworkFromBitmarks(&_FeralfileExhibition.TransactOpts, _artworkID, _bitmarkIDs, _editionNumber, _newOwner, _ipfsCID)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.TransferFrom(&_FeralfileExhibition.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.TransferFrom(&_FeralfileExhibition.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibition *FeralfileExhibitionSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.TransferOwnership(&_FeralfileExhibition.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeralfileExhibition *FeralfileExhibitionTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeralfileExhibition.Contract.TransferOwnership(&_FeralfileExhibition.TransactOpts, newOwner)
}

// FeralfileExhibitionApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the FeralfileExhibition contract.
type FeralfileExhibitionApprovalIterator struct {
	Event *FeralfileExhibitionApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionApproval represents a Approval event raised by the FeralfileExhibition contract.
type FeralfileExhibitionApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*FeralfileExhibitionApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionApprovalIterator{contract: _FeralfileExhibition.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionApproval)
				if err := _FeralfileExhibition.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) ParseApproval(log types.Log) (*FeralfileExhibitionApproval, error) {
	event := new(FeralfileExhibitionApproval)
	if err := _FeralfileExhibition.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the FeralfileExhibition contract.
type FeralfileExhibitionApprovalForAllIterator struct {
	Event *FeralfileExhibitionApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionApprovalForAll represents a ApprovalForAll event raised by the FeralfileExhibition contract.
type FeralfileExhibitionApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*FeralfileExhibitionApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionApprovalForAllIterator{contract: _FeralfileExhibition.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionApprovalForAll)
				if err := _FeralfileExhibition.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) ParseApprovalForAll(log types.Log) (*FeralfileExhibitionApprovalForAll, error) {
	event := new(FeralfileExhibitionApprovalForAll)
	if err := _FeralfileExhibition.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionNewArtworkIterator is returned from FilterNewArtwork and is used to iterate over the raw logs and unpacked data for NewArtwork events raised by the FeralfileExhibition contract.
type FeralfileExhibitionNewArtworkIterator struct {
	Event *FeralfileExhibitionNewArtwork // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionNewArtworkIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionNewArtwork)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionNewArtwork)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionNewArtworkIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionNewArtworkIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionNewArtwork represents a NewArtwork event raised by the FeralfileExhibition contract.
type FeralfileExhibitionNewArtwork struct {
	Creator   common.Address
	ArtworkID *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewArtwork is a free log retrieval operation binding the contract event 0x997bc5bd0747442b15dc8315d11d6dad5b3afd0a1504a6882f57d988dfe98451.
//
// Solidity: event NewArtwork(address _creator, uint256 _artworkID)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) FilterNewArtwork(opts *bind.FilterOpts) (*FeralfileExhibitionNewArtworkIterator, error) {

	logs, sub, err := _FeralfileExhibition.contract.FilterLogs(opts, "NewArtwork")
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionNewArtworkIterator{contract: _FeralfileExhibition.contract, event: "NewArtwork", logs: logs, sub: sub}, nil
}

// WatchNewArtwork is a free log subscription operation binding the contract event 0x997bc5bd0747442b15dc8315d11d6dad5b3afd0a1504a6882f57d988dfe98451.
//
// Solidity: event NewArtwork(address _creator, uint256 _artworkID)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) WatchNewArtwork(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionNewArtwork) (event.Subscription, error) {

	logs, sub, err := _FeralfileExhibition.contract.WatchLogs(opts, "NewArtwork")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionNewArtwork)
				if err := _FeralfileExhibition.contract.UnpackLog(event, "NewArtwork", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewArtwork is a log parse operation binding the contract event 0x997bc5bd0747442b15dc8315d11d6dad5b3afd0a1504a6882f57d988dfe98451.
//
// Solidity: event NewArtwork(address _creator, uint256 _artworkID)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) ParseNewArtwork(log types.Log) (*FeralfileExhibitionNewArtwork, error) {
	event := new(FeralfileExhibitionNewArtwork)
	if err := _FeralfileExhibition.contract.UnpackLog(event, "NewArtwork", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionNewArtworkEditionIterator is returned from FilterNewArtworkEdition and is used to iterate over the raw logs and unpacked data for NewArtworkEdition events raised by the FeralfileExhibition contract.
type FeralfileExhibitionNewArtworkEditionIterator struct {
	Event *FeralfileExhibitionNewArtworkEdition // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionNewArtworkEditionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionNewArtworkEdition)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionNewArtworkEdition)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionNewArtworkEditionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionNewArtworkEditionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionNewArtworkEdition represents a NewArtworkEdition event raised by the FeralfileExhibition contract.
type FeralfileExhibitionNewArtworkEdition struct {
	Owner     common.Address
	ArtworkID *big.Int
	EditionID *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewArtworkEdition is a free log retrieval operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address _owner, uint256 _artworkID, uint256 _editionID)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) FilterNewArtworkEdition(opts *bind.FilterOpts) (*FeralfileExhibitionNewArtworkEditionIterator, error) {

	logs, sub, err := _FeralfileExhibition.contract.FilterLogs(opts, "NewArtworkEdition")
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionNewArtworkEditionIterator{contract: _FeralfileExhibition.contract, event: "NewArtworkEdition", logs: logs, sub: sub}, nil
}

// WatchNewArtworkEdition is a free log subscription operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address _owner, uint256 _artworkID, uint256 _editionID)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) WatchNewArtworkEdition(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionNewArtworkEdition) (event.Subscription, error) {

	logs, sub, err := _FeralfileExhibition.contract.WatchLogs(opts, "NewArtworkEdition")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionNewArtworkEdition)
				if err := _FeralfileExhibition.contract.UnpackLog(event, "NewArtworkEdition", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewArtworkEdition is a log parse operation binding the contract event 0x4f21e8cd53f1df1da42ec94ba03f881c1185607b26e4dcb81941535157d73dd4.
//
// Solidity: event NewArtworkEdition(address _owner, uint256 _artworkID, uint256 _editionID)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) ParseNewArtworkEdition(log types.Log) (*FeralfileExhibitionNewArtworkEdition, error) {
	event := new(FeralfileExhibitionNewArtworkEdition)
	if err := _FeralfileExhibition.contract.UnpackLog(event, "NewArtworkEdition", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the FeralfileExhibition contract.
type FeralfileExhibitionOwnershipTransferredIterator struct {
	Event *FeralfileExhibitionOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionOwnershipTransferred represents a OwnershipTransferred event raised by the FeralfileExhibition contract.
type FeralfileExhibitionOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FeralfileExhibitionOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionOwnershipTransferredIterator{contract: _FeralfileExhibition.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionOwnershipTransferred)
				if err := _FeralfileExhibition.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) ParseOwnershipTransferred(log types.Log) (*FeralfileExhibitionOwnershipTransferred, error) {
	event := new(FeralfileExhibitionOwnershipTransferred)
	if err := _FeralfileExhibition.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeralfileExhibitionTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the FeralfileExhibition contract.
type FeralfileExhibitionTransferIterator struct {
	Event *FeralfileExhibitionTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeralfileExhibitionTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeralfileExhibitionTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeralfileExhibitionTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeralfileExhibitionTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeralfileExhibitionTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeralfileExhibitionTransfer represents a Transfer event raised by the FeralfileExhibition contract.
type FeralfileExhibitionTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*FeralfileExhibitionTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &FeralfileExhibitionTransferIterator{contract: _FeralfileExhibition.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *FeralfileExhibitionTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _FeralfileExhibition.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeralfileExhibitionTransfer)
				if err := _FeralfileExhibition.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_FeralfileExhibition *FeralfileExhibitionFilterer) ParseTransfer(log types.Log) (*FeralfileExhibitionTransfer, error) {
	event := new(FeralfileExhibitionTransfer)
	if err := _FeralfileExhibition.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
